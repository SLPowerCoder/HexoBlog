{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/uploads/redux-flow.JPG","path":"uploads/redux-flow.JPG","modified":1,"renderable":0},{"_id":"source/uploads/react-native声明周期.PNG","path":"uploads/react-native声明周期.PNG","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"5c1d01ee0c0bec632b24c6b6f84f847a7fcfeea3","modified":1493657126000},{"_id":"themes/next/.DS_Store","hash":"6eec8b12b33f5ec91562c7c59a0280dbfe0e9366","modified":1488116041000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1488107356000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1488107356000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1488107356000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1488107356000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1488107356000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1488107356000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1488107356000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1488107356000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1488107356000},{"_id":"themes/next/_config.yml","hash":"fad8d20ee5fd42cee01126be7d4623614f4730ea","modified":1488445146000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1488107356000},{"_id":"themes/next/gulpfile.coffee","hash":"b00e93c5c8667a4fbed71046dc93ce6784bf6257","modified":1488107356000},{"_id":"themes/next/package.json","hash":"a042faed34835a52505643aa2d841cd2dcf5dff6","modified":1488107356000},{"_id":"source/_posts/Objective-C 消息转发机制.md","hash":"1d7d4565f2b25d0fbc03e72d8176f0b37abe4df0","modified":1488352007000},{"_id":"source/_posts/RN原生之间的通信方式.md","hash":"e559fbd5b29094ebf38ff4660d6ebd82821cafef","modified":1532866366058},{"_id":"source/_posts/React Native的性能优化.md","hash":"a93b9d7937c8b1c668d7e26b3d91a2d3749d73f1","modified":1531627092950},{"_id":"source/_posts/block.md","hash":"b25bcff327737abd7eaf42f106b491d353cbf672","modified":1490418684000},{"_id":"source/_posts/hexo的安装和配置.md","hash":"737731a4eeb8b62e9d7ccd738865df15b043396d","modified":1530022524756},{"_id":"source/_posts/iOS 深拷贝和浅拷贝.md","hash":"b71b3bf26b7dcf4ae8279175bb498bcf7ec33575","modified":1488275805000},{"_id":"source/_posts/iOS中assign与weak，retain与strong的区别.md","hash":"2636224f4da7dce57ae9a0f134a2685bdc1add32","modified":1490419461000},{"_id":"source/_posts/iOS中为什么非要用runtime才能在分类中扩展属性呢.md","hash":"27883ea12b2b6aff6e2d7a585afe0a77bd1942cb","modified":1489381444000},{"_id":"source/_posts/iOS你可能不知道的小技巧.md","hash":"915bab048b5b2f880217fecfaa63444193046bb9","modified":1489381392000},{"_id":"source/_posts/iOS音频的播放以及录制.md","hash":"85c6647f1ad28ba13d253050c60db3c62bd8926a","modified":1489139172000},{"_id":"source/_posts/react native集成到原有的项目中(iOS).md","hash":"69190d541d2470e11b018dbeee2e3779fb371500","modified":1493659149000},{"_id":"source/_posts/react-native组件间的通信.md","hash":"bf7494abd2b43dc6034e3de66d59c611197573a8","modified":1535986458372},{"_id":"source/_posts/一次masonry布局错误后的自检.md","hash":"15215f2b3be2138c409d9dd44ef2258d67158fdd","modified":1494694851000},{"_id":"source/_posts/滴滴面试总结.md","hash":"0c02c910ded6d7e4fdaab39de4681b2b4cf4aab3","modified":1530024006823},{"_id":"source/_posts/看了我这篇RN你就入门了.md","hash":"616894f135fff35848f742d516a732b814f02a13","modified":1531029040609},{"_id":"source/_posts/运行react native 官方例子出错.md","hash":"b2bc8b08898d10b475925a3ff63854359dd42803","modified":1489381325000},{"_id":"source/about/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1488120658000},{"_id":"source/about/index.md","hash":"ec4f2af5b00af501db2bc51afb60737fc3b4d2bb","modified":1489132055000},{"_id":"source/categories/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1488120305000},{"_id":"source/categories/index.md","hash":"169a057df237a482f9b96d97ce1a77382080b98d","modified":1488120528000},{"_id":"source/_posts/.DS_Store","hash":"5ae2a7113e11cb6423e9c92adc54c1eca40cbc32","modified":1535986468627},{"_id":"source/tags/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1488120458000},{"_id":"source/tags/index.md","hash":"1e116430e9e4272e427a966b0db023f4cca730b5","modified":1488120552000},{"_id":"source/uploads/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1472787725000},{"_id":"source/uploads/redux-flow.JPG","hash":"93acd3c8ac12ba90e53eb75133ff6db0bf469a17","modified":1480990009000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1488107356000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1488107356000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1488107066000},{"_id":"themes/next/.git/index","hash":"554332c6ceabf96b569ee70d4216dee112ce881b","modified":1488107356000},{"_id":"themes/next/.git/packed-refs","hash":"d05f26c3202fade741a32e36554b9b6cd4422234","modified":1488107356000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1488107356000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1488107356000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1488107356000},{"_id":"themes/next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488107356000},{"_id":"themes/next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488107356000},{"_id":"themes/next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1488107356000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1488107356000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1488107356000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1488107356000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1488107356000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1488107356000},{"_id":"themes/next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1488107356000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"40d01dc46d57f71c2ef635c45b295d4355456e90","modified":1488107356000},{"_id":"themes/next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1488107356000},{"_id":"themes/next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1488107356000},{"_id":"themes/next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1488107356000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1488107356000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1488107356000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1488107356000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1488107356000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1488107356000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1488107356000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1488107356000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1488107356000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1488107356000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1488107356000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1488107356000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488107356000},{"_id":"source/uploads/react-native声明周期.PNG","hash":"162d1c9d0eac14be02db6907dd2ac8e880bdabaa","modified":1480593194000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1488107066000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1488107066000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1488107066000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1488107066000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1488107066000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1488107066000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1488107066000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1488107066000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1488107066000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1488107066000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1488107066000},{"_id":"themes/next/.git/logs/HEAD","hash":"fe27a58e7ea0e904b25a432b8d52fdccc4dab78c","modified":1488107356000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488107356000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488107356000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1488107356000},{"_id":"themes/next/layout/_macro/post.swig","hash":"2c2efe44ea013030f3ce5da7bfdeddb74489eb6e","modified":1488107356000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1488107356000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b57650032ed47b8bd357ec4dcc02d872fdd0e3e1","modified":1488107356000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1488107356000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1488107356000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1488107356000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1488107356000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1488107356000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1488107356000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1488107356000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1488107356000},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1488107356000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1488107356000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1488107356000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1488107356000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1488107356000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1488107356000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1488107356000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1488107356000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1488107356000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1488107356000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1488107356000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1488107356000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1488107356000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1488107356000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1488107356000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1488107356000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1488107356000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1488107356000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1488107356000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1488107356000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1488107356000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488107356000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488107356000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1488107356000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1488107356000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1488107356000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488107356000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488107356000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488107356000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488107356000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488107356000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488107356000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488107356000},{"_id":"themes/next/.git/refs/heads/master","hash":"27a9366b738d13d91bd795b01f0db1df7e8ce5d7","modified":1488107356000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1488107356000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1488107356000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1488107356000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1488107356000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"741f09b2ba4e440011c15f5d288b109b82c87f1b","modified":1488107356000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1488107356000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1488107356000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1488107356000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1488107356000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1488107356000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1488107356000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1488107356000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"ceb39c100c99900294ddee8b1ff81fcaf43873b5","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1488107356000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1488107356000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1488107356000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1488107356000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1488107356000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1488107356000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3c8dcf93db666ac6f9f8955b5d36a9419430862a","modified":1488107356000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1488107356000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1488107356000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1488107356000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1488107356000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1488107356000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1488107356000},{"_id":"themes/next/source/js/src/post-details.js","hash":"661806a916fa46566accb3222da1fb790decb725","modified":1488107356000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1488107356000},{"_id":"themes/next/source/js/src/utils.js","hash":"9ff232a2d39a513b811814480502e3eaac429c52","modified":1488107356000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1488107356000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1488107356000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1488107356000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1488107356000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1488107356000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1488107356000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1488107356000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1488107356000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1488107356000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1488107356000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1488107356000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1488107356000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1488107356000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1488107356000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1488107356000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1488107356000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1488107356000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1488107356000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1488107356000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1488107356000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1488107356000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1488107356000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1488107356000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1488107356000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1488107356000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1488107356000},{"_id":"source/uploads/avatar.png","hash":"b74fcbb6d16aff6e0a360078aac9ed83327fbde8","modified":1472787672000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"fe27a58e7ea0e904b25a432b8d52fdccc4dab78c","modified":1488107356000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1488107356000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1488107356000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1488107356000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1488107356000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1488107356000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1488107356000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1488107356000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"7e18f08c2c82f71e83860f232d43d8b89865ac2e","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1488107356000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1488107356000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488107356000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488107356000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488107356000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488107356000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488107356000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488107356000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1488107356000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1488107356000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1488107356000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1488107356000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1488107356000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1488107356000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1488107356000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1488107356000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1488107356000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1488107356000},{"_id":"themes/next/.git/objects/pack/pack-441108cf8c03fb6bf31bbe7fa959d18f11aa6977.idx","hash":"34796711763f05745f3341e777e92ee0fac86dd7","modified":1488107356000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1488107356000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1488107356000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1488107356000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1488107356000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1488107356000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"fe27a58e7ea0e904b25a432b8d52fdccc4dab78c","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"72bb1c9c890a1dfeca7804d681b366fea0ac4421","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1488107356000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488107356000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488107356000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488107356000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488107356000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1488107356000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1488107356000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488107356000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1488107356000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1488107356000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1488107356000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1488107356000},{"_id":"themes/next/.git/objects/pack/pack-441108cf8c03fb6bf31bbe7fa959d18f11aa6977.pack","hash":"53ca490bb39d443cf6341e17072eb21eb96a3897","modified":1488107356000},{"_id":"public/search.xml","hash":"c1b69ec0f62d3224b83b49135e03529a40c5f720","modified":1535986480029},{"_id":"public/about/index.html","hash":"7950772576ba822a326e40275aececf3db1b161b","modified":1535986480056},{"_id":"public/categories/index.html","hash":"12318f4f9507be3eaeb0706a96dfa664ff4d7ccb","modified":1535986480056},{"_id":"public/tags/index.html","hash":"c9da9dba2c6548469c79dd049057359cd5ebd71d","modified":1535986480056},{"_id":"public/2018/09/03/react-native组件间的通信/index.html","hash":"bf036839aa5e5b1c38669531c88e43178e70f4ef","modified":1535986480057},{"_id":"public/2018/07/29/RN原生之间的通信方式/index.html","hash":"e0cbf8b2fe265b7518bf50807dfde703c04436f8","modified":1535986480057},{"_id":"public/2018/06/27/React Native的性能优化/index.html","hash":"f63dfc5c45f8591cdb09ae02020d55b3828bf0ed","modified":1535986480057},{"_id":"public/2018/06/15/滴滴面试总结/index.html","hash":"c2c57d804d181b12480e046f9209e2a9a6225aa2","modified":1535986480057},{"_id":"public/2017/05/13/一次masonry布局错误后的自检/index.html","hash":"24b6a139a98cac78a9ff8212e33f1f468aa66f73","modified":1535986480057},{"_id":"public/2017/05/02/react native集成到原有的项目中(iOS)/index.html","hash":"bb5e0efeec9de0e5f00afa4a9567d9a98954dac0","modified":1535986480057},{"_id":"public/2017/03/14/block/index.html","hash":"e9098a51be7c99819567c89e1a3e5b31ae6e8930","modified":1535986480057},{"_id":"public/2017/03/10/iOS音频的播放以及录制/index.html","hash":"624413d54eae0f830935d399fc03a07c4f9c1665","modified":1535986480057},{"_id":"public/2017/02/11/iOS 深拷贝和浅拷贝/index.html","hash":"1f884a057fe96caf8a38a2e2fac006e569e183bc","modified":1535986480057},{"_id":"public/2017/02/11/Objective-C 消息转发机制/index.html","hash":"89208927ea68899d87d36491c163034415eadfe0","modified":1535986480057},{"_id":"public/2017/02/11/iOS中assign与weak，retain与strong的区别/index.html","hash":"364f3c51fe2592327e7a83656e4f4c721a8240d4","modified":1535986480057},{"_id":"public/2017/02/11/iOS中为什么非要用runtime才能在分类中扩展属性呢/index.html","hash":"6af1ed4bca88017e9be7d590107e5921692e59c6","modified":1535986480057},{"_id":"public/2017/01/07/运行react native 官方例子出错/index.html","hash":"fcf8c5b82f1611b30ed88f41610e0e51c0f70727","modified":1535986480057},{"_id":"public/2016/12/30/看了我这篇RN你就入门了/index.html","hash":"ec3096083aaf81535c39171f2504e3a3ea98029d","modified":1535986480058},{"_id":"public/2016/09/02/iOS你可能不知道的小技巧/index.html","hash":"f522460b8250616f9a8872288915e2321fe55641","modified":1535986480058},{"_id":"public/2016/09/02/hexo的安装和配置/index.html","hash":"653698b139257baf6ba5397d9eb03bc94c05dbcd","modified":1535986480058},{"_id":"public/archives/index.html","hash":"ca91b14ca7d65df29026c2556183551f967f7635","modified":1535986480058},{"_id":"public/archives/page/2/index.html","hash":"eb7428657d22197b9daa3daf65393348ce721980","modified":1535986480058},{"_id":"public/archives/2016/index.html","hash":"a4e0face911a1070362bc5d3c7b2860aadceca8a","modified":1535986480058},{"_id":"public/archives/2016/09/index.html","hash":"04f7190b1aa9e762b0117d8807fcd922c0045f61","modified":1535986480058},{"_id":"public/archives/2016/12/index.html","hash":"2f063284faf40ca15a2af363f26590e2c78dc28b","modified":1535986480058},{"_id":"public/archives/2017/index.html","hash":"b2d533338f3c0b1387da20a675a581b03f7a9c72","modified":1535986480058},{"_id":"public/archives/2017/01/index.html","hash":"ae1bd39c7ed71aad05ce640f494f3ab82d586212","modified":1535986480058},{"_id":"public/archives/2017/02/index.html","hash":"44b3d2e1955817d58b54ced4cfa387f51dd146e6","modified":1535986480058},{"_id":"public/archives/2017/03/index.html","hash":"c427ea7e329e9113cd95ae5297aaf33e04bb5b00","modified":1535986480058},{"_id":"public/archives/2017/05/index.html","hash":"0d5a53e8937253eed457f26509d8691b48304631","modified":1535986480059},{"_id":"public/archives/2018/index.html","hash":"25f4055d9a8c922cbd8a61a6bfcb46ace0540729","modified":1535986480059},{"_id":"public/archives/2018/06/index.html","hash":"e50bca2708010ad9e1d5ee79ce90c16fc2c6fdbf","modified":1535986480059},{"_id":"public/archives/2018/07/index.html","hash":"063e6a822473dc9c619437e48aa35ebf5cc3980a","modified":1535986480059},{"_id":"public/archives/2018/09/index.html","hash":"ef359795ca9c9ce1a2a5a789edb73a13a5575e2b","modified":1535986480059},{"_id":"public/categories/iOS/index.html","hash":"b8953d595f5fe6654c888001bb18b01f95663b97","modified":1535986480059},{"_id":"public/categories/react-native/index.html","hash":"322b496a750e8d34d36342b686ef9b0c7fca9355","modified":1535986480059},{"_id":"public/categories/hexo/index.html","hash":"111878d457a93cad4146cc92c042cc8aec99cf57","modified":1535986480059},{"_id":"public/page/2/index.html","hash":"f1cfca1a51775aa7f36e1d952821976375c9e4b4","modified":1535986480059},{"_id":"public/index.html","hash":"ef939aee4f587dc43493bf64ae77f9baea13ca20","modified":1535986480059},{"_id":"public/tags/react-native/index.html","hash":"43bc94e4cfd2d1bdb95a0c268383d41d663cc432","modified":1535986480059},{"_id":"public/tags/消息转发/index.html","hash":"4202eb6b4855c2218fdf54f93e2ca08fddd5288d","modified":1535986480059},{"_id":"public/tags/hexo/index.html","hash":"3d62b4d0672113dc13ca5a54825cfc51d0f1c2be","modified":1535986480059},{"_id":"public/tags/博客/index.html","hash":"3b8e2db4259ecd6f1b0c74d8d603880fffc1baad","modified":1535986480059},{"_id":"public/tags/深拷贝/index.html","hash":"a7428b809e51b74a395ee433afbe3def1aeeb4ed","modified":1535986480060},{"_id":"public/tags/浅拷贝/index.html","hash":"7d3e6ede618206b02bdc933791e0ab89c1aec1a2","modified":1535986480060},{"_id":"public/tags/runtime/index.html","hash":"3e470cb2f1277c4dae35f1d31079184a293b064a","modified":1535986480060},{"_id":"public/tags/category/index.html","hash":"7398ae0cf66724a61f1a60d5cc7a218d54a8ead7","modified":1535986480060},{"_id":"public/tags/assign/index.html","hash":"f488e65ff088b4e3a1ce916ca15ba981c60efcbe","modified":1535986480060},{"_id":"public/tags/weak/index.html","hash":"468adabc728455cb96cda76d6fb0ad4c2c1db10d","modified":1535986480060},{"_id":"public/tags/retain/index.html","hash":"a66e4ef95ef6e54234834ff37b59c7e8a70ef85f","modified":1535986480060},{"_id":"public/tags/strong/index.html","hash":"7378866e77d945f71f8c059d50494ac8e06be032","modified":1535986480060},{"_id":"public/tags/iOS/index.html","hash":"3e185a4f47d7320f9051ce815532dfc5703372ad","modified":1535986480060},{"_id":"public/tags/audio/index.html","hash":"d14b1fc44f0ad50e9f370e91b1beda70c42b24ef","modified":1535986480060},{"_id":"public/tags/通信/index.html","hash":"71ad6fa21bd99ad9db7c1fdabbeeb89b79f18a31","modified":1535986480060},{"_id":"public/tags/面试/index.html","hash":"e4bb567b92a10fe2dd704965e294fad8aaf83055","modified":1535986480060},{"_id":"public/tags/block/index.html","hash":"ba9e7420d0b6dbc513f704c0331d596b1821aa0c","modified":1535986480060},{"_id":"public/tags/masonry/index.html","hash":"383563410d0029b65843e9e733e9d8983a0d11bd","modified":1535986480061},{"_id":"public/tags/redux/index.html","hash":"0f151e501543f4957a245e3fda472f4058384c3d","modified":1535986480061},{"_id":"public/tags/react-redux/index.html","hash":"8a12105d8d3f2d4a268558e109289c029f5b66a5","modified":1535986480061},{"_id":"public/uploads/redux-flow.JPG","hash":"93acd3c8ac12ba90e53eb75133ff6db0bf469a17","modified":1535986480069},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1535986480069},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1535986480069},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1535986480069},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1535986480069},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1535986480069},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1535986480069},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1535986480070},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1535986480070},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1535986480070},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535986480070},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1535986480070},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1535986480070},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1535986480070},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1535986480070},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1535986480070},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1535986480070},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1535986480070},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1535986480070},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1535986480070},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1535986480071},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1535986480071},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1535986480071},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1535986480071},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1535986480071},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1535986480608},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1535986480610},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1535986480610},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1535986480610},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1535986480615},{"_id":"public/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1535986480615},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1535986480616},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1535986480616},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1535986480616},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1535986480616},{"_id":"public/js/src/post-details.js","hash":"661806a916fa46566accb3222da1fb790decb725","modified":1535986480616},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1535986480616},{"_id":"public/js/src/utils.js","hash":"9ff232a2d39a513b811814480502e3eaac429c52","modified":1535986480616},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1535986480616},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1535986480616},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1535986480616},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1535986480616},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1535986480616},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1535986480616},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1535986480616},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1535986480617},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1535986480617},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1535986480617},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1535986480617},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1535986480617},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1535986480617},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1535986480617},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1535986480617},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1535986480617},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1535986480617},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1535986480617},{"_id":"public/css/main.css","hash":"f6fd0144d1803f232d4b30eeba2dca60fe136b0f","modified":1535986480617},{"_id":"public/uploads/react-native声明周期.PNG","hash":"162d1c9d0eac14be02db6907dd2ac8e880bdabaa","modified":1535986480617},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1535986480617},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1535986480625},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1535986480625},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1535986480625},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1535986480625},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1535986480629},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1535986480634},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1535986480634},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1535986480635},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1535986480638},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1535986480638},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1535986480639},{"_id":"public/uploads/avatar.png","hash":"b74fcbb6d16aff6e0a360078aac9ed83327fbde8","modified":1535986480639},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1535986480646},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1535986480662},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1535986480675},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1535986480690}],"Category":[{"name":"iOS","_id":"cjlmeouuy0005v8tjmiz4zlod"},{"name":"react-native","_id":"cjlmeouv1000av8tjshp09bx9"},{"name":"hexo","_id":"cjlmeouv8000nv8tj8vftcdta"}],"Data":[],"Page":[{"title":"about","date":"2016-09-02T03:53:42.000Z","comments":0,"_content":"\n## 枫叶\n---\n优秀的博客有很多，为什么还要创建这个博客呢？这个问题我也曾问过我自己，别人也问过我，思量良久只能说优秀的博客是别人的，不是你的，即使你天天逛别人家的博客也不如自己亲自写来的真实，没错就是这样。\n\n喜欢捯饬捯饬博客，研究一些新的东西\n热衷于react native，cocos2d-x这些跨平台开发，**梦想**有一天能一统全栈\n\n闲暇之余喜欢看看历史剧，如果你愿意和我聊历史，我就跟你聊到天荒地老\n\n如果你要约我的话，👇下面有EMail\n\ngithub: \"https://github.com/SLPowerCoder\"\nCSDN: \"http://blog.csdn.net/u014041012\"\n简书: \"http://www.jianshu.com/users/baaa48a4b911/latest_articles\"\nEmail: \"sunlei_1030@126.com\"\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-09-02 11:53:42\ncomments: false\n---\n\n## 枫叶\n---\n优秀的博客有很多，为什么还要创建这个博客呢？这个问题我也曾问过我自己，别人也问过我，思量良久只能说优秀的博客是别人的，不是你的，即使你天天逛别人家的博客也不如自己亲自写来的真实，没错就是这样。\n\n喜欢捯饬捯饬博客，研究一些新的东西\n热衷于react native，cocos2d-x这些跨平台开发，**梦想**有一天能一统全栈\n\n闲暇之余喜欢看看历史剧，如果你愿意和我聊历史，我就跟你聊到天荒地老\n\n如果你要约我的话，👇下面有EMail\n\ngithub: \"https://github.com/SLPowerCoder\"\nCSDN: \"http://blog.csdn.net/u014041012\"\n简书: \"http://www.jianshu.com/users/baaa48a4b911/latest_articles\"\nEmail: \"sunlei_1030@126.com\"\n","updated":"2017-03-10T07:47:35.000Z","path":"about/index.html","layout":"page","_id":"cjlmeouuu0001v8tjgyodb1ot","content":"<h2 id=\"枫叶\"><a href=\"#枫叶\" class=\"headerlink\" title=\"枫叶\"></a>枫叶</h2><hr>\n<p>优秀的博客有很多，为什么还要创建这个博客呢？这个问题我也曾问过我自己，别人也问过我，思量良久只能说优秀的博客是别人的，不是你的，即使你天天逛别人家的博客也不如自己亲自写来的真实，没错就是这样。</p>\n<p>喜欢捯饬捯饬博客，研究一些新的东西<br>热衷于react native，cocos2d-x这些跨平台开发，<strong>梦想</strong>有一天能一统全栈</p>\n<p>闲暇之余喜欢看看历史剧，如果你愿意和我聊历史，我就跟你聊到天荒地老</p>\n<p>如果你要约我的话，👇下面有EMail</p>\n<p>github: “<a href=\"https://github.com/SLPowerCoder\" target=\"_blank\" rel=\"external\">https://github.com/SLPowerCoder</a>“<br>CSDN: “<a href=\"http://blog.csdn.net/u014041012\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/u014041012</a>“<br>简书: “<a href=\"http://www.jianshu.com/users/baaa48a4b911/latest_articles\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/users/baaa48a4b911/latest_articles</a>“<br>Email: “sunlei_1030@126.com”</p>\n","excerpt":"","more":"<h2 id=\"枫叶\"><a href=\"#枫叶\" class=\"headerlink\" title=\"枫叶\"></a>枫叶</h2><hr>\n<p>优秀的博客有很多，为什么还要创建这个博客呢？这个问题我也曾问过我自己，别人也问过我，思量良久只能说优秀的博客是别人的，不是你的，即使你天天逛别人家的博客也不如自己亲自写来的真实，没错就是这样。</p>\n<p>喜欢捯饬捯饬博客，研究一些新的东西<br>热衷于react native，cocos2d-x这些跨平台开发，<strong>梦想</strong>有一天能一统全栈</p>\n<p>闲暇之余喜欢看看历史剧，如果你愿意和我聊历史，我就跟你聊到天荒地老</p>\n<p>如果你要约我的话，👇下面有EMail</p>\n<p>github: “<a href=\"https://github.com/SLPowerCoder\">https://github.com/SLPowerCoder</a>“<br>CSDN: “<a href=\"http://blog.csdn.net/u014041012\">http://blog.csdn.net/u014041012</a>“<br>简书: “<a href=\"http://www.jianshu.com/users/baaa48a4b911/latest_articles\">http://www.jianshu.com/users/baaa48a4b911/latest_articles</a>“<br>Email: “sunlei_1030@126.com”</p>\n"},{"title":"categories","date":"2016-09-02T03:30:25.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-09-02 11:30:25\ntype: \"categories\"\ncomments: false\n\n---\n","updated":"2017-02-26T14:48:48.000Z","path":"categories/index.html","layout":"page","_id":"cjlmeouuw0003v8tj6ypk4ywi","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-09-02T03:50:27.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-09-02 11:50:27\ntype: \"tags\"\ncomments: false\n\n---\n","updated":"2017-02-26T14:49:12.000Z","path":"tags/index.html","layout":"page","_id":"cjlmeouzg0020v8tjmvtreul3","content":"","excerpt":"","more":""}],"Post":[{"title":"Objective-C 消息转发机制","_content":"\n一图胜千言，习惯性的先来一张图以便对消息转发有个整体的把握\n### 运行时系统库方法查询流程图\n![运行时系统库方法查询](http://upload-images.jianshu.io/upload_images/1229960-edd81dfe76dacf77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n>对于对象无法处理的消息，如果不做转发处理的话，程序最终会调用NSObjective的doesNotRecognizeSelector:消息将程序crash掉。\n\n### Objective-C提供了两种消息转发选项\n* 快速转发：NSObject类的子类A可以通过重写NSObject类的forwardingTargetForSelector:方法，将A的实例无法识别的消息转发给目标对象B，从而实现快速转发。*该技巧就像是将对象的实现代码与转发对象合并到一起。这类似于实现的多继承行为。如果你有一个定了对象 能够消化哪些消息的目标类，这个技巧可以取得很好的效果*\n* 标准（完整）转发：NSObject类的子类A可以通过重写NSObject类的forwardInvocation:方法，实现标准转发。标准转发巧可以通过methodSignatureForSelector：方法获取一个methodsignature对象最终被封为NSInvocation对象传递给forwardInvocation:方法（注意如果methodSignatureForSelector：方法返回一个nil，程序会crash）从该对象能获取消息的全部内容（包含目标，方法名，和参数）。\n\n如果你拥有了一个定义了对象能够消化哪些消息的目标类，快速转发可以取得很好的效果。如果你没有这样目标类或想要执行其他处理过程（如记录日志并‘吞下’消息），就应该使用完整转发。\n\n### 写了一大推字感觉很抽象，下面来点干货\n下面我要把Test实例的logName消息转发给Target实例，代码如下\nTest头文件\n```\n//\n//  Test.h\n//  ForwardMsg\n//\n//  Created by 孙磊 on 2017/2/25.\n//  Copyright © 2017年 孙磊. All rights reserved.\n//\n\n#import <Foundation/Foundation.h>\n\n@interface Test : NSObject\n\n-(void)logName;\n\n@end\n```\nTest实现文件\n\n```\n//\n//  Test.m\n//  ForwardMsg\n//\n//  Created by 孙磊 on 2017/2/25.\n//  Copyright © 2017年 孙磊. All rights reserved.\n//\n\n#import \"Test.h\"\n#import \"Target.h\"\n#import <objc/runtime.h>\n\n@implementation Test{\n    Target *mTarget;\n}\n\n- (instancetype)init\n{\n    self = [super init];\n    if (self) {\n        \n        //创建目标对象\n        mTarget = [Target new];\n    }\n    return self;\n}\n\n#if 0\n//当一个对象无法识别消息后，会执行resolveInstanceMethod或者resolveClassMethod方法\n//如果不想进行消息转发，可以在此方法中动态添加消息来做处理\n//如果不重写此方法或者此方法返回NO，系统会执行forwardingTargetForSelector进行快速转发\n\n+ (BOOL)resolveInstanceMethod:(SEL)sel\n{\n    \n    if(sel == @selector(logName)){\n        //第四个参数详解地址  https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html\n        //v代表返回类型为void\n        //@代表一个对象\n        //:代表一个selector\n        //因为OC中的每个方法都有默认的两个参数sel 和 selector，所以一般都是v@:\n        class_addMethod([self class],sel,(IMP)dynamicMethodIMP,\"v@:\");\n        return YES;\n    }\n    return [super resolveInstanceMethod:sel];\n}\n\n//万年备胎\nvoid dynamicMethodIMP(id self, SEL _cmd)\n{\n    //对无法识别的消息做处理\n    NSLog(@\"该对象无法识别 %@ 方法------%s\", NSStringFromSelector(_cmd),__func__);\n}\n\n#else \n\n/***************==========1、快速消息转发，快速转发只可以获取到方法签名==========*******************/\n\n-(id)forwardingTargetForSelector:(SEL)aSelector{\n    NSLog(@\"%s\",__func__);\n    if ([mTarget respondsToSelector:aSelector]) {\n        //目标对象有对应的处理方法，则就会快速消息转发，不会再执行完整消息转发了\n        return mTarget;\n    }\n    //目标对象也没有对应的方法，此时系统会执行forwardInvocation进行完整消息转发\n    return nil;\n}\n\n/***********=============2、标准（完整）消息转发，完整消息转发，可以获取方法签名，参数等详细信息==========*********/\n\n//返回一个完整的方法签名，提供给forwardInvocation以便完整转发消息\n-(NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector{\n    \n    NSMethodSignature* signature = [super methodSignatureForSelector:aSelector];\n    \n     if (!signature)\n        signature = [mTarget methodSignatureForSelector:aSelector];\n\n     return signature;\n}\n\n-(void)forwardInvocation:(NSInvocation *)anInvocation{\n    NSLog(@\"%s-----完整消息转发------\",__func__);\n    SEL invSEL = anInvocation.selector;\n    if ([mTarget respondsToSelector:invSEL]){\n        \n        //利用forwardInvocation方法来重新指定消息处理对象\n        [anInvocation invokeWithTarget:mTarget];\n    }\n    else {\n        [self doesNotRecognizeSelector:invSEL];\n    }\n}\n\n#endif\n\n@end\n```\n目标文件的头文件\n```\n//\n//  Target.h\n//  ForwardMsg\n//\n//  Created by 孙磊 on 2017/2/25.\n//  Copyright © 2017年 孙磊. All rights reserved.\n//\n\n#import <Foundation/Foundation.h>\n\n@interface Target : NSObject\n\n-(void)logName;\n\n@end\n\n```\n目标文件的实现文件\n```\n//\n//  Target.m\n//  ForwardMsg\n//\n//  Created by 孙磊 on 2017/2/25.\n//  Copyright © 2017年 孙磊. All rights reserved.\n//\n\n#import \"Target.h\"\n\n@implementation Target\n\n-(void)logName{\nNSLog(@\"我是备用方法---%s\",__func__);\n}\n\n@end\n\n```\n\n[推荐一个国外大大利用消息转发避免后台返回NSNull（后台有时候会返回<null>）而引起的奔溃问题，例如你需要一个字符串他却给你返回了一个“<null>”这样一个NSNull对象。用法很简单，直接把NullSafe.m拖到项目中即可，该文件会在运行时自动加载](https://github.com/nicklockwood/NullSafe)\n\n扩展：简单说一下NULL，nil，Nil，NSNull的用处\nNULL：用于普通类型，例如NSInteger\nnil：用于OC对象（除了类这个对象）,给nil对象发送消息不会crash\nNil：用于Class类型对象的赋值（类是元类的实例，也是对象）\nNSNull：用于OC对象的站位，一般会作为集合中的占位元素，给NSNull对象发送消息会crash的，后台给我们返回的<null>就是NSNull对象\n","source":"_posts/Objective-C 消息转发机制.md","raw":"---\ntitle: Objective-C 消息转发机制\ncategories: iOS\ntags: [消息转发]\n\n---\n\n一图胜千言，习惯性的先来一张图以便对消息转发有个整体的把握\n### 运行时系统库方法查询流程图\n![运行时系统库方法查询](http://upload-images.jianshu.io/upload_images/1229960-edd81dfe76dacf77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n>对于对象无法处理的消息，如果不做转发处理的话，程序最终会调用NSObjective的doesNotRecognizeSelector:消息将程序crash掉。\n\n### Objective-C提供了两种消息转发选项\n* 快速转发：NSObject类的子类A可以通过重写NSObject类的forwardingTargetForSelector:方法，将A的实例无法识别的消息转发给目标对象B，从而实现快速转发。*该技巧就像是将对象的实现代码与转发对象合并到一起。这类似于实现的多继承行为。如果你有一个定了对象 能够消化哪些消息的目标类，这个技巧可以取得很好的效果*\n* 标准（完整）转发：NSObject类的子类A可以通过重写NSObject类的forwardInvocation:方法，实现标准转发。标准转发巧可以通过methodSignatureForSelector：方法获取一个methodsignature对象最终被封为NSInvocation对象传递给forwardInvocation:方法（注意如果methodSignatureForSelector：方法返回一个nil，程序会crash）从该对象能获取消息的全部内容（包含目标，方法名，和参数）。\n\n如果你拥有了一个定义了对象能够消化哪些消息的目标类，快速转发可以取得很好的效果。如果你没有这样目标类或想要执行其他处理过程（如记录日志并‘吞下’消息），就应该使用完整转发。\n\n### 写了一大推字感觉很抽象，下面来点干货\n下面我要把Test实例的logName消息转发给Target实例，代码如下\nTest头文件\n```\n//\n//  Test.h\n//  ForwardMsg\n//\n//  Created by 孙磊 on 2017/2/25.\n//  Copyright © 2017年 孙磊. All rights reserved.\n//\n\n#import <Foundation/Foundation.h>\n\n@interface Test : NSObject\n\n-(void)logName;\n\n@end\n```\nTest实现文件\n\n```\n//\n//  Test.m\n//  ForwardMsg\n//\n//  Created by 孙磊 on 2017/2/25.\n//  Copyright © 2017年 孙磊. All rights reserved.\n//\n\n#import \"Test.h\"\n#import \"Target.h\"\n#import <objc/runtime.h>\n\n@implementation Test{\n    Target *mTarget;\n}\n\n- (instancetype)init\n{\n    self = [super init];\n    if (self) {\n        \n        //创建目标对象\n        mTarget = [Target new];\n    }\n    return self;\n}\n\n#if 0\n//当一个对象无法识别消息后，会执行resolveInstanceMethod或者resolveClassMethod方法\n//如果不想进行消息转发，可以在此方法中动态添加消息来做处理\n//如果不重写此方法或者此方法返回NO，系统会执行forwardingTargetForSelector进行快速转发\n\n+ (BOOL)resolveInstanceMethod:(SEL)sel\n{\n    \n    if(sel == @selector(logName)){\n        //第四个参数详解地址  https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html\n        //v代表返回类型为void\n        //@代表一个对象\n        //:代表一个selector\n        //因为OC中的每个方法都有默认的两个参数sel 和 selector，所以一般都是v@:\n        class_addMethod([self class],sel,(IMP)dynamicMethodIMP,\"v@:\");\n        return YES;\n    }\n    return [super resolveInstanceMethod:sel];\n}\n\n//万年备胎\nvoid dynamicMethodIMP(id self, SEL _cmd)\n{\n    //对无法识别的消息做处理\n    NSLog(@\"该对象无法识别 %@ 方法------%s\", NSStringFromSelector(_cmd),__func__);\n}\n\n#else \n\n/***************==========1、快速消息转发，快速转发只可以获取到方法签名==========*******************/\n\n-(id)forwardingTargetForSelector:(SEL)aSelector{\n    NSLog(@\"%s\",__func__);\n    if ([mTarget respondsToSelector:aSelector]) {\n        //目标对象有对应的处理方法，则就会快速消息转发，不会再执行完整消息转发了\n        return mTarget;\n    }\n    //目标对象也没有对应的方法，此时系统会执行forwardInvocation进行完整消息转发\n    return nil;\n}\n\n/***********=============2、标准（完整）消息转发，完整消息转发，可以获取方法签名，参数等详细信息==========*********/\n\n//返回一个完整的方法签名，提供给forwardInvocation以便完整转发消息\n-(NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector{\n    \n    NSMethodSignature* signature = [super methodSignatureForSelector:aSelector];\n    \n     if (!signature)\n        signature = [mTarget methodSignatureForSelector:aSelector];\n\n     return signature;\n}\n\n-(void)forwardInvocation:(NSInvocation *)anInvocation{\n    NSLog(@\"%s-----完整消息转发------\",__func__);\n    SEL invSEL = anInvocation.selector;\n    if ([mTarget respondsToSelector:invSEL]){\n        \n        //利用forwardInvocation方法来重新指定消息处理对象\n        [anInvocation invokeWithTarget:mTarget];\n    }\n    else {\n        [self doesNotRecognizeSelector:invSEL];\n    }\n}\n\n#endif\n\n@end\n```\n目标文件的头文件\n```\n//\n//  Target.h\n//  ForwardMsg\n//\n//  Created by 孙磊 on 2017/2/25.\n//  Copyright © 2017年 孙磊. All rights reserved.\n//\n\n#import <Foundation/Foundation.h>\n\n@interface Target : NSObject\n\n-(void)logName;\n\n@end\n\n```\n目标文件的实现文件\n```\n//\n//  Target.m\n//  ForwardMsg\n//\n//  Created by 孙磊 on 2017/2/25.\n//  Copyright © 2017年 孙磊. All rights reserved.\n//\n\n#import \"Target.h\"\n\n@implementation Target\n\n-(void)logName{\nNSLog(@\"我是备用方法---%s\",__func__);\n}\n\n@end\n\n```\n\n[推荐一个国外大大利用消息转发避免后台返回NSNull（后台有时候会返回<null>）而引起的奔溃问题，例如你需要一个字符串他却给你返回了一个“<null>”这样一个NSNull对象。用法很简单，直接把NullSafe.m拖到项目中即可，该文件会在运行时自动加载](https://github.com/nicklockwood/NullSafe)\n\n扩展：简单说一下NULL，nil，Nil，NSNull的用处\nNULL：用于普通类型，例如NSInteger\nnil：用于OC对象（除了类这个对象）,给nil对象发送消息不会crash\nNil：用于Class类型对象的赋值（类是元类的实例，也是对象）\nNSNull：用于OC对象的站位，一般会作为集合中的占位元素，给NSNull对象发送消息会crash的，后台给我们返回的<null>就是NSNull对象\n","slug":"Objective-C 消息转发机制","published":1,"date":"2017-02-11T15:41:29.000Z","updated":"2017-03-01T07:06:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmeouur0000v8tjdil13j8p","content":"<p>一图胜千言，习惯性的先来一张图以便对消息转发有个整体的把握</p>\n<h3 id=\"运行时系统库方法查询流程图\"><a href=\"#运行时系统库方法查询流程图\" class=\"headerlink\" title=\"运行时系统库方法查询流程图\"></a>运行时系统库方法查询流程图</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/1229960-edd81dfe76dacf77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"运行时系统库方法查询\"></p>\n<blockquote>\n<p>对于对象无法处理的消息，如果不做转发处理的话，程序最终会调用NSObjective的doesNotRecognizeSelector:消息将程序crash掉。</p>\n</blockquote>\n<h3 id=\"Objective-C提供了两种消息转发选项\"><a href=\"#Objective-C提供了两种消息转发选项\" class=\"headerlink\" title=\"Objective-C提供了两种消息转发选项\"></a>Objective-C提供了两种消息转发选项</h3><ul>\n<li>快速转发：NSObject类的子类A可以通过重写NSObject类的forwardingTargetForSelector:方法，将A的实例无法识别的消息转发给目标对象B，从而实现快速转发。<em>该技巧就像是将对象的实现代码与转发对象合并到一起。这类似于实现的多继承行为。如果你有一个定了对象 能够消化哪些消息的目标类，这个技巧可以取得很好的效果</em></li>\n<li>标准（完整）转发：NSObject类的子类A可以通过重写NSObject类的forwardInvocation:方法，实现标准转发。标准转发巧可以通过methodSignatureForSelector：方法获取一个methodsignature对象最终被封为NSInvocation对象传递给forwardInvocation:方法（注意如果methodSignatureForSelector：方法返回一个nil，程序会crash）从该对象能获取消息的全部内容（包含目标，方法名，和参数）。</li>\n</ul>\n<p>如果你拥有了一个定义了对象能够消化哪些消息的目标类，快速转发可以取得很好的效果。如果你没有这样目标类或想要执行其他处理过程（如记录日志并‘吞下’消息），就应该使用完整转发。</p>\n<h3 id=\"写了一大推字感觉很抽象，下面来点干货\"><a href=\"#写了一大推字感觉很抽象，下面来点干货\" class=\"headerlink\" title=\"写了一大推字感觉很抽象，下面来点干货\"></a>写了一大推字感觉很抽象，下面来点干货</h3><p>下面我要把Test实例的logName消息转发给Target实例，代码如下<br>Test头文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//</div><div class=\"line\">//  Test.h</div><div class=\"line\">//  ForwardMsg</div><div class=\"line\">//</div><div class=\"line\">//  Created by 孙磊 on 2017/2/25.</div><div class=\"line\">//  Copyright © 2017年 孙磊. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\"></div><div class=\"line\">@interface Test : NSObject</div><div class=\"line\"></div><div class=\"line\">-(void)logName;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure></p>\n<p>Test实现文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div></pre></td><td class=\"code\"><pre><div class=\"line\">//</div><div class=\"line\">//  Test.m</div><div class=\"line\">//  ForwardMsg</div><div class=\"line\">//</div><div class=\"line\">//  Created by 孙磊 on 2017/2/25.</div><div class=\"line\">//  Copyright © 2017年 孙磊. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import &quot;Test.h&quot;</div><div class=\"line\">#import &quot;Target.h&quot;</div><div class=\"line\">#import &lt;objc/runtime.h&gt;</div><div class=\"line\"></div><div class=\"line\">@implementation Test&#123;</div><div class=\"line\">    Target *mTarget;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (instancetype)init</div><div class=\"line\">&#123;</div><div class=\"line\">    self = [super init];</div><div class=\"line\">    if (self) &#123;</div><div class=\"line\">        </div><div class=\"line\">        //创建目标对象</div><div class=\"line\">        mTarget = [Target new];</div><div class=\"line\">    &#125;</div><div class=\"line\">    return self;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#if 0</div><div class=\"line\">//当一个对象无法识别消息后，会执行resolveInstanceMethod或者resolveClassMethod方法</div><div class=\"line\">//如果不想进行消息转发，可以在此方法中动态添加消息来做处理</div><div class=\"line\">//如果不重写此方法或者此方法返回NO，系统会执行forwardingTargetForSelector进行快速转发</div><div class=\"line\"></div><div class=\"line\">+ (BOOL)resolveInstanceMethod:(SEL)sel</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">    if(sel == @selector(logName))&#123;</div><div class=\"line\">        //第四个参数详解地址  https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html</div><div class=\"line\">        //v代表返回类型为void</div><div class=\"line\">        //@代表一个对象</div><div class=\"line\">        //:代表一个selector</div><div class=\"line\">        //因为OC中的每个方法都有默认的两个参数sel 和 selector，所以一般都是v@:</div><div class=\"line\">        class_addMethod([self class],sel,(IMP)dynamicMethodIMP,&quot;v@:&quot;);</div><div class=\"line\">        return YES;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return [super resolveInstanceMethod:sel];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//万年备胎</div><div class=\"line\">void dynamicMethodIMP(id self, SEL _cmd)</div><div class=\"line\">&#123;</div><div class=\"line\">    //对无法识别的消息做处理</div><div class=\"line\">    NSLog(@&quot;该对象无法识别 %@ 方法------%s&quot;, NSStringFromSelector(_cmd),__func__);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#else </div><div class=\"line\"></div><div class=\"line\">/***************==========1、快速消息转发，快速转发只可以获取到方法签名==========*******************/</div><div class=\"line\"></div><div class=\"line\">-(id)forwardingTargetForSelector:(SEL)aSelector&#123;</div><div class=\"line\">    NSLog(@&quot;%s&quot;,__func__);</div><div class=\"line\">    if ([mTarget respondsToSelector:aSelector]) &#123;</div><div class=\"line\">        //目标对象有对应的处理方法，则就会快速消息转发，不会再执行完整消息转发了</div><div class=\"line\">        return mTarget;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //目标对象也没有对应的方法，此时系统会执行forwardInvocation进行完整消息转发</div><div class=\"line\">    return nil;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/***********=============2、标准（完整）消息转发，完整消息转发，可以获取方法签名，参数等详细信息==========*********/</div><div class=\"line\"></div><div class=\"line\">//返回一个完整的方法签名，提供给forwardInvocation以便完整转发消息</div><div class=\"line\">-(NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector&#123;</div><div class=\"line\">    </div><div class=\"line\">    NSMethodSignature* signature = [super methodSignatureForSelector:aSelector];</div><div class=\"line\">    </div><div class=\"line\">     if (!signature)</div><div class=\"line\">        signature = [mTarget methodSignatureForSelector:aSelector];</div><div class=\"line\"></div><div class=\"line\">     return signature;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(void)forwardInvocation:(NSInvocation *)anInvocation&#123;</div><div class=\"line\">    NSLog(@&quot;%s-----完整消息转发------&quot;,__func__);</div><div class=\"line\">    SEL invSEL = anInvocation.selector;</div><div class=\"line\">    if ([mTarget respondsToSelector:invSEL])&#123;</div><div class=\"line\">        </div><div class=\"line\">        //利用forwardInvocation方法来重新指定消息处理对象</div><div class=\"line\">        [anInvocation invokeWithTarget:mTarget];</div><div class=\"line\">    &#125;</div><div class=\"line\">    else &#123;</div><div class=\"line\">        [self doesNotRecognizeSelector:invSEL];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#endif</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>目标文件的头文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//</div><div class=\"line\">//  Target.h</div><div class=\"line\">//  ForwardMsg</div><div class=\"line\">//</div><div class=\"line\">//  Created by 孙磊 on 2017/2/25.</div><div class=\"line\">//  Copyright © 2017年 孙磊. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\"></div><div class=\"line\">@interface Target : NSObject</div><div class=\"line\"></div><div class=\"line\">-(void)logName;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure></p>\n<p>目标文件的实现文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">//</div><div class=\"line\">//  Target.m</div><div class=\"line\">//  ForwardMsg</div><div class=\"line\">//</div><div class=\"line\">//  Created by 孙磊 on 2017/2/25.</div><div class=\"line\">//  Copyright © 2017年 孙磊. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import &quot;Target.h&quot;</div><div class=\"line\"></div><div class=\"line\">@implementation Target</div><div class=\"line\"></div><div class=\"line\">-(void)logName&#123;</div><div class=\"line\">NSLog(@&quot;我是备用方法---%s&quot;,__func__);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/nicklockwood/NullSafe\" target=\"_blank\" rel=\"external\">推荐一个国外大大利用消息转发避免后台返回NSNull（后台有时候会返回<null>）而引起的奔溃问题，例如你需要一个字符串他却给你返回了一个“<null>”这样一个NSNull对象。用法很简单，直接把NullSafe.m拖到项目中即可，该文件会在运行时自动加载</null></null></a></p>\n<p>扩展：简单说一下NULL，nil，Nil，NSNull的用处<br>NULL：用于普通类型，例如NSInteger<br>nil：用于OC对象（除了类这个对象）,给nil对象发送消息不会crash<br>Nil：用于Class类型对象的赋值（类是元类的实例，也是对象）<br>NSNull：用于OC对象的站位，一般会作为集合中的占位元素，给NSNull对象发送消息会crash的，后台给我们返回的<null>就是NSNull对象</null></p>\n","excerpt":"","more":"<p>一图胜千言，习惯性的先来一张图以便对消息转发有个整体的把握</p>\n<h3 id=\"运行时系统库方法查询流程图\"><a href=\"#运行时系统库方法查询流程图\" class=\"headerlink\" title=\"运行时系统库方法查询流程图\"></a>运行时系统库方法查询流程图</h3><p><img src=\"http://upload-images.jianshu.io/upload_images/1229960-edd81dfe76dacf77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"运行时系统库方法查询\"></p>\n<blockquote>\n<p>对于对象无法处理的消息，如果不做转发处理的话，程序最终会调用NSObjective的doesNotRecognizeSelector:消息将程序crash掉。</p>\n</blockquote>\n<h3 id=\"Objective-C提供了两种消息转发选项\"><a href=\"#Objective-C提供了两种消息转发选项\" class=\"headerlink\" title=\"Objective-C提供了两种消息转发选项\"></a>Objective-C提供了两种消息转发选项</h3><ul>\n<li>快速转发：NSObject类的子类A可以通过重写NSObject类的forwardingTargetForSelector:方法，将A的实例无法识别的消息转发给目标对象B，从而实现快速转发。<em>该技巧就像是将对象的实现代码与转发对象合并到一起。这类似于实现的多继承行为。如果你有一个定了对象 能够消化哪些消息的目标类，这个技巧可以取得很好的效果</em></li>\n<li>标准（完整）转发：NSObject类的子类A可以通过重写NSObject类的forwardInvocation:方法，实现标准转发。标准转发巧可以通过methodSignatureForSelector：方法获取一个methodsignature对象最终被封为NSInvocation对象传递给forwardInvocation:方法（注意如果methodSignatureForSelector：方法返回一个nil，程序会crash）从该对象能获取消息的全部内容（包含目标，方法名，和参数）。</li>\n</ul>\n<p>如果你拥有了一个定义了对象能够消化哪些消息的目标类，快速转发可以取得很好的效果。如果你没有这样目标类或想要执行其他处理过程（如记录日志并‘吞下’消息），就应该使用完整转发。</p>\n<h3 id=\"写了一大推字感觉很抽象，下面来点干货\"><a href=\"#写了一大推字感觉很抽象，下面来点干货\" class=\"headerlink\" title=\"写了一大推字感觉很抽象，下面来点干货\"></a>写了一大推字感觉很抽象，下面来点干货</h3><p>下面我要把Test实例的logName消息转发给Target实例，代码如下<br>Test头文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//</div><div class=\"line\">//  Test.h</div><div class=\"line\">//  ForwardMsg</div><div class=\"line\">//</div><div class=\"line\">//  Created by 孙磊 on 2017/2/25.</div><div class=\"line\">//  Copyright © 2017年 孙磊. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\"></div><div class=\"line\">@interface Test : NSObject</div><div class=\"line\"></div><div class=\"line\">-(void)logName;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure></p>\n<p>Test实现文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div></pre></td><td class=\"code\"><pre><div class=\"line\">//</div><div class=\"line\">//  Test.m</div><div class=\"line\">//  ForwardMsg</div><div class=\"line\">//</div><div class=\"line\">//  Created by 孙磊 on 2017/2/25.</div><div class=\"line\">//  Copyright © 2017年 孙磊. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import &quot;Test.h&quot;</div><div class=\"line\">#import &quot;Target.h&quot;</div><div class=\"line\">#import &lt;objc/runtime.h&gt;</div><div class=\"line\"></div><div class=\"line\">@implementation Test&#123;</div><div class=\"line\">    Target *mTarget;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (instancetype)init</div><div class=\"line\">&#123;</div><div class=\"line\">    self = [super init];</div><div class=\"line\">    if (self) &#123;</div><div class=\"line\">        </div><div class=\"line\">        //创建目标对象</div><div class=\"line\">        mTarget = [Target new];</div><div class=\"line\">    &#125;</div><div class=\"line\">    return self;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#if 0</div><div class=\"line\">//当一个对象无法识别消息后，会执行resolveInstanceMethod或者resolveClassMethod方法</div><div class=\"line\">//如果不想进行消息转发，可以在此方法中动态添加消息来做处理</div><div class=\"line\">//如果不重写此方法或者此方法返回NO，系统会执行forwardingTargetForSelector进行快速转发</div><div class=\"line\"></div><div class=\"line\">+ (BOOL)resolveInstanceMethod:(SEL)sel</div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">    if(sel == @selector(logName))&#123;</div><div class=\"line\">        //第四个参数详解地址  https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html</div><div class=\"line\">        //v代表返回类型为void</div><div class=\"line\">        //@代表一个对象</div><div class=\"line\">        //:代表一个selector</div><div class=\"line\">        //因为OC中的每个方法都有默认的两个参数sel 和 selector，所以一般都是v@:</div><div class=\"line\">        class_addMethod([self class],sel,(IMP)dynamicMethodIMP,&quot;v@:&quot;);</div><div class=\"line\">        return YES;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return [super resolveInstanceMethod:sel];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//万年备胎</div><div class=\"line\">void dynamicMethodIMP(id self, SEL _cmd)</div><div class=\"line\">&#123;</div><div class=\"line\">    //对无法识别的消息做处理</div><div class=\"line\">    NSLog(@&quot;该对象无法识别 %@ 方法------%s&quot;, NSStringFromSelector(_cmd),__func__);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#else </div><div class=\"line\"></div><div class=\"line\">/***************==========1、快速消息转发，快速转发只可以获取到方法签名==========*******************/</div><div class=\"line\"></div><div class=\"line\">-(id)forwardingTargetForSelector:(SEL)aSelector&#123;</div><div class=\"line\">    NSLog(@&quot;%s&quot;,__func__);</div><div class=\"line\">    if ([mTarget respondsToSelector:aSelector]) &#123;</div><div class=\"line\">        //目标对象有对应的处理方法，则就会快速消息转发，不会再执行完整消息转发了</div><div class=\"line\">        return mTarget;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //目标对象也没有对应的方法，此时系统会执行forwardInvocation进行完整消息转发</div><div class=\"line\">    return nil;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/***********=============2、标准（完整）消息转发，完整消息转发，可以获取方法签名，参数等详细信息==========*********/</div><div class=\"line\"></div><div class=\"line\">//返回一个完整的方法签名，提供给forwardInvocation以便完整转发消息</div><div class=\"line\">-(NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector&#123;</div><div class=\"line\">    </div><div class=\"line\">    NSMethodSignature* signature = [super methodSignatureForSelector:aSelector];</div><div class=\"line\">    </div><div class=\"line\">     if (!signature)</div><div class=\"line\">        signature = [mTarget methodSignatureForSelector:aSelector];</div><div class=\"line\"></div><div class=\"line\">     return signature;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-(void)forwardInvocation:(NSInvocation *)anInvocation&#123;</div><div class=\"line\">    NSLog(@&quot;%s-----完整消息转发------&quot;,__func__);</div><div class=\"line\">    SEL invSEL = anInvocation.selector;</div><div class=\"line\">    if ([mTarget respondsToSelector:invSEL])&#123;</div><div class=\"line\">        </div><div class=\"line\">        //利用forwardInvocation方法来重新指定消息处理对象</div><div class=\"line\">        [anInvocation invokeWithTarget:mTarget];</div><div class=\"line\">    &#125;</div><div class=\"line\">    else &#123;</div><div class=\"line\">        [self doesNotRecognizeSelector:invSEL];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#endif</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>目标文件的头文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//</div><div class=\"line\">//  Target.h</div><div class=\"line\">//  ForwardMsg</div><div class=\"line\">//</div><div class=\"line\">//  Created by 孙磊 on 2017/2/25.</div><div class=\"line\">//  Copyright © 2017年 孙磊. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\"></div><div class=\"line\">@interface Target : NSObject</div><div class=\"line\"></div><div class=\"line\">-(void)logName;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure></p>\n<p>目标文件的实现文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">//</div><div class=\"line\">//  Target.m</div><div class=\"line\">//  ForwardMsg</div><div class=\"line\">//</div><div class=\"line\">//  Created by 孙磊 on 2017/2/25.</div><div class=\"line\">//  Copyright © 2017年 孙磊. All rights reserved.</div><div class=\"line\">//</div><div class=\"line\"></div><div class=\"line\">#import &quot;Target.h&quot;</div><div class=\"line\"></div><div class=\"line\">@implementation Target</div><div class=\"line\"></div><div class=\"line\">-(void)logName&#123;</div><div class=\"line\">NSLog(@&quot;我是备用方法---%s&quot;,__func__);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/nicklockwood/NullSafe\">推荐一个国外大大利用消息转发避免后台返回NSNull（后台有时候会返回<null>）而引起的奔溃问题，例如你需要一个字符串他却给你返回了一个“<null>”这样一个NSNull对象。用法很简单，直接把NullSafe.m拖到项目中即可，该文件会在运行时自动加载</a></p>\n<p>扩展：简单说一下NULL，nil，Nil，NSNull的用处<br>NULL：用于普通类型，例如NSInteger<br>nil：用于OC对象（除了类这个对象）,给nil对象发送消息不会crash<br>Nil：用于Class类型对象的赋值（类是元类的实例，也是对象）<br>NSNull：用于OC对象的站位，一般会作为集合中的占位元素，给NSNull对象发送消息会crash的，后台给我们返回的<null>就是NSNull对象</p>\n"},{"title":"RN与原生之间的通信方式","date":"2018-07-29T12:06:09.142Z","_content":"\n### 从原生到RN的通信\n\n可以通过bridge发送通知的方式来向RN通信\n\n### 从RN到原生的通信\n\n通过实现RN的一些协议来用原生代码封装RN接口","source":"_posts/RN原生之间的通信方式.md","raw":"---\ntitle: RN与原生之间的通信方式\ndate: 2018--7-29 20:02:45\ncategories: react-native\ntags: [react-native]\n\n---\n\n### 从原生到RN的通信\n\n可以通过bridge发送通知的方式来向RN通信\n\n### 从RN到原生的通信\n\n通过实现RN的一些协议来用原生代码封装RN接口","slug":"RN原生之间的通信方式","published":1,"updated":"2018-07-29T12:12:46.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmeouuv0002v8tjesoo9u4t","content":"<h3 id=\"从原生到RN的通信\"><a href=\"#从原生到RN的通信\" class=\"headerlink\" title=\"从原生到RN的通信\"></a>从原生到RN的通信</h3><p>可以通过bridge发送通知的方式来向RN通信</p>\n<h3 id=\"从RN到原生的通信\"><a href=\"#从RN到原生的通信\" class=\"headerlink\" title=\"从RN到原生的通信\"></a>从RN到原生的通信</h3><p>通过实现RN的一些协议来用原生代码封装RN接口</p>\n","excerpt":"","more":"<h3 id=\"从原生到RN的通信\"><a href=\"#从原生到RN的通信\" class=\"headerlink\" title=\"从原生到RN的通信\"></a>从原生到RN的通信</h3><p>可以通过bridge发送通知的方式来向RN通信</p>\n<h3 id=\"从RN到原生的通信\"><a href=\"#从RN到原生的通信\" class=\"headerlink\" title=\"从RN到原生的通信\"></a>从RN到原生的通信</h3><p>通过实现RN的一些协议来用原生代码封装RN接口</p>\n"},{"title":"React Native的性能优化","date":"2018-06-27T14:58:51.000Z","_content":"\n### React Native的性能优化\n众所周知RN由于应用了virtual DOM 、diff算法等一些列调优机制，使RN应用几乎达到了与原生一样的体验，但是毕竟RN只是原生APP的一个线程而已，RN和原生还隔着一道桥梁batch bridge，最终RN的代码还是要通过jscore引擎转换成原生代码来执行，这就决定了RN不可能超越原生，除非RN能越过这道坎，尽管官方替我们做了一些优化，但是有些优化只能交给了用户来决定，比如`sholdComponentUpdate`是返回true还是false，这是需要我们来决定的，再比如APP的页面如果非常多的话，打包之后bundle非常大，而加载和初始化bundle又很耗时间，这又需要拆分bundle，所以还是有许多需要人工来优化。\n\n既然是性能优化那就肯定得找出RN的性能瓶颈在哪\n\n### 一、基础优化（目的是尽量减少页面的渲染）\n\n1. 比较吃性能的、耗时的操作可以放到`componentDidMount`中，然后再用`Interaction manager`在包裹一下，比如网络请求。\n2. 尽量少用状态组件，尽可能用无状态组件，**无状态组件不会被实例化**，可以提升性能\n3. 自定义的有状态组件尽量继承自`pure component`，这样系统会自动在`shouldComponentUpdate`中**默认做一层浅比较（直接拿两个对象做比较，对象中的子元素不做比较）**，可以减少一些不必要的渲染，当然你也也可以在该方法中做**深**层次的比较，如果组件不是继承自`PureComponent`则该方法默认返回true，这样会导致很多无用的渲染，比如父组件的改变会导致子组件的重新render。\n4. 利用`immutable`不可变数据，提升性能，它可以避免本来应该渲染而实际却没有发生渲染的问题，因为框架默认在`shouldComponentUpdate`做的是一层浅比较，如果在state改变的过程中做的是浅拷贝，则state改变之前和改变之后是相等的，指向的是同一个对象，这样浅比较会认为state没有改变而不做渲染。\n5. 对于同层级的相同类型的组件，要给每个组件指定唯一的key值。例如通常我们在一个容器组件中创建多个子组件的时候，我们会把这些子组件放在一个数组里，然后把数组直接放到容器页面中，形如下面的伪代码：\n\n\t```\n\tbanner = ()=>{\n\t\tlet childArr = [];\n\t\twhile(let i < 10) {\n\t\t\tchildArr.push(<Child key={XXXXXX}></Child>)\n\t\t}\n\t\treturn <View> {childArr} </View>\n\t}\n\t```\n\tChild组件的key一定要有，这涉及到diff算法的原理，diff算法是按层级进行比较的，当前的virtual DOM 和之前的virtual DOM进行同层级比较的时候，对于属于同一个父组件的同一层级的子组件，**如果没有key值的话，RN需要遍历该父组件的所有子组件来行进对比，才能知道哪一个子组件发生了改变，这样如果子组件的数量很大的时候会很耗性能，RN有可能会因为遍历的耗时而选择放弃对比来重新渲染所有的子组件，但是如果有key值的话可以利用key直接进行两两比较**，效率就高出很多。\n6. 列表优化，几乎所有的APP都有列表，所以列表的优化尤为重要，之前RN采用的是listView，数据稍微大的时候会出现明显卡顿，有性能瓶颈，最后RN在xxx版推出了新的列表神器`FlatList`和`SectionList`，他俩都是继承自`VirtualizedList`，比listView的性能更高，并且使用起来也更简单了，无需再想listView一样要先创建一个DataSource对象了。具体优化可以参考官网。。。\n7. 用`FlatList`替换`scrollView`，因为在用`scrollView`的时候它会一下子把他上面的所有子组件都渲染出来，而`FlatList`可以设置首屏渲染的行数，这样就不会导致在刚进入这一页的时候出现卡顿现象。\n\n### 二、本地分包优化\n从官方给出的RN耗时图可以看出，最耗性能的地方是bundle包的**JS环境的初始化**和**加载**，所以这一块的优化也至关重要，bundle体积过大会导致加载慢，其中bundle包括**react等基础库以及引入的三方库** 和 **你自己的业务代码**，可以先从两方面着手。第一：需要尽可能的优化bundle的体积，去掉一些不必要的资源。第二：做拆分处理，把bundle拆分成`基础bundle`和`业务bundle`。 `基础bundle`是APP必须依赖的公共基础部分。其实拆分之后还是很耗时间，所以我们又做了另一种处理，那就是`预加载`，对`基础bundle`进行预加载，这样可以减少一些加载以及初始化的耗时。\n\n总结如下：\n\n1. **本地分包**： 把bundle拆分成`公共基础bundle`和`业务bundle`\n2. **预加载**： 预加载`公共基础bundle`\n\n### 三、按需延迟加载\n\n可以通过`require`来实现动态延迟加载,伪代码如下：\n\n```\nimport xxx from './xxxx'\n\nlet test2;\n\nexport default class Test extent Componnet {\n\n\tgetTest2 = ()=>{\n\t\t// 对test2模块进行懒加载（延迟加载），以提高性能\n\t\tif(test2 === undefined) {\n\t\t\ttest2 = require('./xxxx/test2');\n\t\t}\n\t}\n}\n\n\n```\n我们不需要再这个test模块一开始就加载test2模块，这样可以延迟加载一些不是立马需要的其他模块，提升整体加载速度，降低内存。","source":"_posts/React Native的性能优化.md","raw":"---\ntitle: React Native的性能优化\ndate: 2018-06-27 22:58:51\ncategories: react-native\ntags: [react-native]\n---\n\n### React Native的性能优化\n众所周知RN由于应用了virtual DOM 、diff算法等一些列调优机制，使RN应用几乎达到了与原生一样的体验，但是毕竟RN只是原生APP的一个线程而已，RN和原生还隔着一道桥梁batch bridge，最终RN的代码还是要通过jscore引擎转换成原生代码来执行，这就决定了RN不可能超越原生，除非RN能越过这道坎，尽管官方替我们做了一些优化，但是有些优化只能交给了用户来决定，比如`sholdComponentUpdate`是返回true还是false，这是需要我们来决定的，再比如APP的页面如果非常多的话，打包之后bundle非常大，而加载和初始化bundle又很耗时间，这又需要拆分bundle，所以还是有许多需要人工来优化。\n\n既然是性能优化那就肯定得找出RN的性能瓶颈在哪\n\n### 一、基础优化（目的是尽量减少页面的渲染）\n\n1. 比较吃性能的、耗时的操作可以放到`componentDidMount`中，然后再用`Interaction manager`在包裹一下，比如网络请求。\n2. 尽量少用状态组件，尽可能用无状态组件，**无状态组件不会被实例化**，可以提升性能\n3. 自定义的有状态组件尽量继承自`pure component`，这样系统会自动在`shouldComponentUpdate`中**默认做一层浅比较（直接拿两个对象做比较，对象中的子元素不做比较）**，可以减少一些不必要的渲染，当然你也也可以在该方法中做**深**层次的比较，如果组件不是继承自`PureComponent`则该方法默认返回true，这样会导致很多无用的渲染，比如父组件的改变会导致子组件的重新render。\n4. 利用`immutable`不可变数据，提升性能，它可以避免本来应该渲染而实际却没有发生渲染的问题，因为框架默认在`shouldComponentUpdate`做的是一层浅比较，如果在state改变的过程中做的是浅拷贝，则state改变之前和改变之后是相等的，指向的是同一个对象，这样浅比较会认为state没有改变而不做渲染。\n5. 对于同层级的相同类型的组件，要给每个组件指定唯一的key值。例如通常我们在一个容器组件中创建多个子组件的时候，我们会把这些子组件放在一个数组里，然后把数组直接放到容器页面中，形如下面的伪代码：\n\n\t```\n\tbanner = ()=>{\n\t\tlet childArr = [];\n\t\twhile(let i < 10) {\n\t\t\tchildArr.push(<Child key={XXXXXX}></Child>)\n\t\t}\n\t\treturn <View> {childArr} </View>\n\t}\n\t```\n\tChild组件的key一定要有，这涉及到diff算法的原理，diff算法是按层级进行比较的，当前的virtual DOM 和之前的virtual DOM进行同层级比较的时候，对于属于同一个父组件的同一层级的子组件，**如果没有key值的话，RN需要遍历该父组件的所有子组件来行进对比，才能知道哪一个子组件发生了改变，这样如果子组件的数量很大的时候会很耗性能，RN有可能会因为遍历的耗时而选择放弃对比来重新渲染所有的子组件，但是如果有key值的话可以利用key直接进行两两比较**，效率就高出很多。\n6. 列表优化，几乎所有的APP都有列表，所以列表的优化尤为重要，之前RN采用的是listView，数据稍微大的时候会出现明显卡顿，有性能瓶颈，最后RN在xxx版推出了新的列表神器`FlatList`和`SectionList`，他俩都是继承自`VirtualizedList`，比listView的性能更高，并且使用起来也更简单了，无需再想listView一样要先创建一个DataSource对象了。具体优化可以参考官网。。。\n7. 用`FlatList`替换`scrollView`，因为在用`scrollView`的时候它会一下子把他上面的所有子组件都渲染出来，而`FlatList`可以设置首屏渲染的行数，这样就不会导致在刚进入这一页的时候出现卡顿现象。\n\n### 二、本地分包优化\n从官方给出的RN耗时图可以看出，最耗性能的地方是bundle包的**JS环境的初始化**和**加载**，所以这一块的优化也至关重要，bundle体积过大会导致加载慢，其中bundle包括**react等基础库以及引入的三方库** 和 **你自己的业务代码**，可以先从两方面着手。第一：需要尽可能的优化bundle的体积，去掉一些不必要的资源。第二：做拆分处理，把bundle拆分成`基础bundle`和`业务bundle`。 `基础bundle`是APP必须依赖的公共基础部分。其实拆分之后还是很耗时间，所以我们又做了另一种处理，那就是`预加载`，对`基础bundle`进行预加载，这样可以减少一些加载以及初始化的耗时。\n\n总结如下：\n\n1. **本地分包**： 把bundle拆分成`公共基础bundle`和`业务bundle`\n2. **预加载**： 预加载`公共基础bundle`\n\n### 三、按需延迟加载\n\n可以通过`require`来实现动态延迟加载,伪代码如下：\n\n```\nimport xxx from './xxxx'\n\nlet test2;\n\nexport default class Test extent Componnet {\n\n\tgetTest2 = ()=>{\n\t\t// 对test2模块进行懒加载（延迟加载），以提高性能\n\t\tif(test2 === undefined) {\n\t\t\ttest2 = require('./xxxx/test2');\n\t\t}\n\t}\n}\n\n\n```\n我们不需要再这个test模块一开始就加载test2模块，这样可以延迟加载一些不是立马需要的其他模块，提升整体加载速度，降低内存。","slug":"React Native的性能优化","published":1,"updated":"2018-07-15T03:58:12.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmeouuy0006v8tjlvax12lv","content":"<h3 id=\"React-Native的性能优化\"><a href=\"#React-Native的性能优化\" class=\"headerlink\" title=\"React Native的性能优化\"></a>React Native的性能优化</h3><p>众所周知RN由于应用了virtual DOM 、diff算法等一些列调优机制，使RN应用几乎达到了与原生一样的体验，但是毕竟RN只是原生APP的一个线程而已，RN和原生还隔着一道桥梁batch bridge，最终RN的代码还是要通过jscore引擎转换成原生代码来执行，这就决定了RN不可能超越原生，除非RN能越过这道坎，尽管官方替我们做了一些优化，但是有些优化只能交给了用户来决定，比如<code>sholdComponentUpdate</code>是返回true还是false，这是需要我们来决定的，再比如APP的页面如果非常多的话，打包之后bundle非常大，而加载和初始化bundle又很耗时间，这又需要拆分bundle，所以还是有许多需要人工来优化。</p>\n<p>既然是性能优化那就肯定得找出RN的性能瓶颈在哪</p>\n<h3 id=\"一、基础优化（目的是尽量减少页面的渲染）\"><a href=\"#一、基础优化（目的是尽量减少页面的渲染）\" class=\"headerlink\" title=\"一、基础优化（目的是尽量减少页面的渲染）\"></a>一、基础优化（目的是尽量减少页面的渲染）</h3><ol>\n<li>比较吃性能的、耗时的操作可以放到<code>componentDidMount</code>中，然后再用<code>Interaction manager</code>在包裹一下，比如网络请求。</li>\n<li>尽量少用状态组件，尽可能用无状态组件，<strong>无状态组件不会被实例化</strong>，可以提升性能</li>\n<li>自定义的有状态组件尽量继承自<code>pure component</code>，这样系统会自动在<code>shouldComponentUpdate</code>中<strong>默认做一层浅比较（直接拿两个对象做比较，对象中的子元素不做比较）</strong>，可以减少一些不必要的渲染，当然你也也可以在该方法中做<strong>深</strong>层次的比较，如果组件不是继承自<code>PureComponent</code>则该方法默认返回true，这样会导致很多无用的渲染，比如父组件的改变会导致子组件的重新render。</li>\n<li>利用<code>immutable</code>不可变数据，提升性能，它可以避免本来应该渲染而实际却没有发生渲染的问题，因为框架默认在<code>shouldComponentUpdate</code>做的是一层浅比较，如果在state改变的过程中做的是浅拷贝，则state改变之前和改变之后是相等的，指向的是同一个对象，这样浅比较会认为state没有改变而不做渲染。</li>\n<li><p>对于同层级的相同类型的组件，要给每个组件指定唯一的key值。例如通常我们在一个容器组件中创建多个子组件的时候，我们会把这些子组件放在一个数组里，然后把数组直接放到容器页面中，形如下面的伪代码：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">banner = ()=&gt;&#123;</div><div class=\"line\">\tlet childArr = [];</div><div class=\"line\">\twhile(let i &lt; 10) &#123;</div><div class=\"line\">\t\tchildArr.push(&lt;Child key=&#123;XXXXXX&#125;&gt;&lt;/Child&gt;)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn &lt;View&gt; &#123;childArr&#125; &lt;/View&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> Child组件的key一定要有，这涉及到diff算法的原理，diff算法是按层级进行比较的，当前的virtual DOM 和之前的virtual DOM进行同层级比较的时候，对于属于同一个父组件的同一层级的子组件，<strong>如果没有key值的话，RN需要遍历该父组件的所有子组件来行进对比，才能知道哪一个子组件发生了改变，这样如果子组件的数量很大的时候会很耗性能，RN有可能会因为遍历的耗时而选择放弃对比来重新渲染所有的子组件，但是如果有key值的话可以利用key直接进行两两比较</strong>，效率就高出很多。</p>\n</li>\n<li>列表优化，几乎所有的APP都有列表，所以列表的优化尤为重要，之前RN采用的是listView，数据稍微大的时候会出现明显卡顿，有性能瓶颈，最后RN在xxx版推出了新的列表神器<code>FlatList</code>和<code>SectionList</code>，他俩都是继承自<code>VirtualizedList</code>，比listView的性能更高，并且使用起来也更简单了，无需再想listView一样要先创建一个DataSource对象了。具体优化可以参考官网。。。</li>\n<li>用<code>FlatList</code>替换<code>scrollView</code>，因为在用<code>scrollView</code>的时候它会一下子把他上面的所有子组件都渲染出来，而<code>FlatList</code>可以设置首屏渲染的行数，这样就不会导致在刚进入这一页的时候出现卡顿现象。</li>\n</ol>\n<h3 id=\"二、本地分包优化\"><a href=\"#二、本地分包优化\" class=\"headerlink\" title=\"二、本地分包优化\"></a>二、本地分包优化</h3><p>从官方给出的RN耗时图可以看出，最耗性能的地方是bundle包的<strong>JS环境的初始化</strong>和<strong>加载</strong>，所以这一块的优化也至关重要，bundle体积过大会导致加载慢，其中bundle包括<strong>react等基础库以及引入的三方库</strong> 和 <strong>你自己的业务代码</strong>，可以先从两方面着手。第一：需要尽可能的优化bundle的体积，去掉一些不必要的资源。第二：做拆分处理，把bundle拆分成<code>基础bundle</code>和<code>业务bundle</code>。 <code>基础bundle</code>是APP必须依赖的公共基础部分。其实拆分之后还是很耗时间，所以我们又做了另一种处理，那就是<code>预加载</code>，对<code>基础bundle</code>进行预加载，这样可以减少一些加载以及初始化的耗时。</p>\n<p>总结如下：</p>\n<ol>\n<li><strong>本地分包</strong>： 把bundle拆分成<code>公共基础bundle</code>和<code>业务bundle</code></li>\n<li><strong>预加载</strong>： 预加载<code>公共基础bundle</code></li>\n</ol>\n<h3 id=\"三、按需延迟加载\"><a href=\"#三、按需延迟加载\" class=\"headerlink\" title=\"三、按需延迟加载\"></a>三、按需延迟加载</h3><p>可以通过<code>require</code>来实现动态延迟加载,伪代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">import xxx from &apos;./xxxx&apos;</div><div class=\"line\"></div><div class=\"line\">let test2;</div><div class=\"line\"></div><div class=\"line\">export default class Test extent Componnet &#123;</div><div class=\"line\"></div><div class=\"line\">\tgetTest2 = ()=&gt;&#123;</div><div class=\"line\">\t\t// 对test2模块进行懒加载（延迟加载），以提高性能</div><div class=\"line\">\t\tif(test2 === undefined) &#123;</div><div class=\"line\">\t\t\ttest2 = require(&apos;./xxxx/test2&apos;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们不需要再这个test模块一开始就加载test2模块，这样可以延迟加载一些不是立马需要的其他模块，提升整体加载速度，降低内存。</p>\n","excerpt":"","more":"<h3 id=\"React-Native的性能优化\"><a href=\"#React-Native的性能优化\" class=\"headerlink\" title=\"React Native的性能优化\"></a>React Native的性能优化</h3><p>众所周知RN由于应用了virtual DOM 、diff算法等一些列调优机制，使RN应用几乎达到了与原生一样的体验，但是毕竟RN只是原生APP的一个线程而已，RN和原生还隔着一道桥梁batch bridge，最终RN的代码还是要通过jscore引擎转换成原生代码来执行，这就决定了RN不可能超越原生，除非RN能越过这道坎，尽管官方替我们做了一些优化，但是有些优化只能交给了用户来决定，比如<code>sholdComponentUpdate</code>是返回true还是false，这是需要我们来决定的，再比如APP的页面如果非常多的话，打包之后bundle非常大，而加载和初始化bundle又很耗时间，这又需要拆分bundle，所以还是有许多需要人工来优化。</p>\n<p>既然是性能优化那就肯定得找出RN的性能瓶颈在哪</p>\n<h3 id=\"一、基础优化（目的是尽量减少页面的渲染）\"><a href=\"#一、基础优化（目的是尽量减少页面的渲染）\" class=\"headerlink\" title=\"一、基础优化（目的是尽量减少页面的渲染）\"></a>一、基础优化（目的是尽量减少页面的渲染）</h3><ol>\n<li>比较吃性能的、耗时的操作可以放到<code>componentDidMount</code>中，然后再用<code>Interaction manager</code>在包裹一下，比如网络请求。</li>\n<li>尽量少用状态组件，尽可能用无状态组件，<strong>无状态组件不会被实例化</strong>，可以提升性能</li>\n<li>自定义的有状态组件尽量继承自<code>pure component</code>，这样系统会自动在<code>shouldComponentUpdate</code>中<strong>默认做一层浅比较（直接拿两个对象做比较，对象中的子元素不做比较）</strong>，可以减少一些不必要的渲染，当然你也也可以在该方法中做<strong>深</strong>层次的比较，如果组件不是继承自<code>PureComponent</code>则该方法默认返回true，这样会导致很多无用的渲染，比如父组件的改变会导致子组件的重新render。</li>\n<li>利用<code>immutable</code>不可变数据，提升性能，它可以避免本来应该渲染而实际却没有发生渲染的问题，因为框架默认在<code>shouldComponentUpdate</code>做的是一层浅比较，如果在state改变的过程中做的是浅拷贝，则state改变之前和改变之后是相等的，指向的是同一个对象，这样浅比较会认为state没有改变而不做渲染。</li>\n<li><p>对于同层级的相同类型的组件，要给每个组件指定唯一的key值。例如通常我们在一个容器组件中创建多个子组件的时候，我们会把这些子组件放在一个数组里，然后把数组直接放到容器页面中，形如下面的伪代码：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">banner = ()=&gt;&#123;</div><div class=\"line\">\tlet childArr = [];</div><div class=\"line\">\twhile(let i &lt; 10) &#123;</div><div class=\"line\">\t\tchildArr.push(&lt;Child key=&#123;XXXXXX&#125;&gt;&lt;/Child&gt;)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn &lt;View&gt; &#123;childArr&#125; &lt;/View&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> Child组件的key一定要有，这涉及到diff算法的原理，diff算法是按层级进行比较的，当前的virtual DOM 和之前的virtual DOM进行同层级比较的时候，对于属于同一个父组件的同一层级的子组件，<strong>如果没有key值的话，RN需要遍历该父组件的所有子组件来行进对比，才能知道哪一个子组件发生了改变，这样如果子组件的数量很大的时候会很耗性能，RN有可能会因为遍历的耗时而选择放弃对比来重新渲染所有的子组件，但是如果有key值的话可以利用key直接进行两两比较</strong>，效率就高出很多。</p>\n</li>\n<li>列表优化，几乎所有的APP都有列表，所以列表的优化尤为重要，之前RN采用的是listView，数据稍微大的时候会出现明显卡顿，有性能瓶颈，最后RN在xxx版推出了新的列表神器<code>FlatList</code>和<code>SectionList</code>，他俩都是继承自<code>VirtualizedList</code>，比listView的性能更高，并且使用起来也更简单了，无需再想listView一样要先创建一个DataSource对象了。具体优化可以参考官网。。。</li>\n<li>用<code>FlatList</code>替换<code>scrollView</code>，因为在用<code>scrollView</code>的时候它会一下子把他上面的所有子组件都渲染出来，而<code>FlatList</code>可以设置首屏渲染的行数，这样就不会导致在刚进入这一页的时候出现卡顿现象。</li>\n</ol>\n<h3 id=\"二、本地分包优化\"><a href=\"#二、本地分包优化\" class=\"headerlink\" title=\"二、本地分包优化\"></a>二、本地分包优化</h3><p>从官方给出的RN耗时图可以看出，最耗性能的地方是bundle包的<strong>JS环境的初始化</strong>和<strong>加载</strong>，所以这一块的优化也至关重要，bundle体积过大会导致加载慢，其中bundle包括<strong>react等基础库以及引入的三方库</strong> 和 <strong>你自己的业务代码</strong>，可以先从两方面着手。第一：需要尽可能的优化bundle的体积，去掉一些不必要的资源。第二：做拆分处理，把bundle拆分成<code>基础bundle</code>和<code>业务bundle</code>。 <code>基础bundle</code>是APP必须依赖的公共基础部分。其实拆分之后还是很耗时间，所以我们又做了另一种处理，那就是<code>预加载</code>，对<code>基础bundle</code>进行预加载，这样可以减少一些加载以及初始化的耗时。</p>\n<p>总结如下：</p>\n<ol>\n<li><strong>本地分包</strong>： 把bundle拆分成<code>公共基础bundle</code>和<code>业务bundle</code></li>\n<li><strong>预加载</strong>： 预加载<code>公共基础bundle</code></li>\n</ol>\n<h3 id=\"三、按需延迟加载\"><a href=\"#三、按需延迟加载\" class=\"headerlink\" title=\"三、按需延迟加载\"></a>三、按需延迟加载</h3><p>可以通过<code>require</code>来实现动态延迟加载,伪代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">import xxx from &apos;./xxxx&apos;</div><div class=\"line\"></div><div class=\"line\">let test2;</div><div class=\"line\"></div><div class=\"line\">export default class Test extent Componnet &#123;</div><div class=\"line\"></div><div class=\"line\">\tgetTest2 = ()=&gt;&#123;</div><div class=\"line\">\t\t// 对test2模块进行懒加载（延迟加载），以提高性能</div><div class=\"line\">\t\tif(test2 === undefined) &#123;</div><div class=\"line\">\t\t\ttest2 = require(&apos;./xxxx/test2&apos;);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们不需要再这个test模块一开始就加载test2模块，这样可以延迟加载一些不是立马需要的其他模块，提升整体加载速度，降低内存。</p>\n"},{"title":"Mac上 Hexo安装与配置","_content":"\n### 安装\n#### 1. 安装node.js[传送](https://nodejs.org/en/)\n下载node的pkg包，点击直接安装，安装的过程下一步下一步就行了，新版的node.js包含有npm（npm用来安装hexo）\n#### 2. 安装hexo\n``` bash\n$ sudo npm install -g hexo-cli\n```\n\n**注意：**如果没有用sudo来执行命令可能会出现错误\n\n#### 3. 建立本地站点\n现在本地创建一个文件夹，作为本地站点的根目录，例如建立一个HexoBlog文件夹，**cd到HexoBlog的上一级目录执行以下命令**\n\n**1.初始化一个本地站点**\n\n``` bash\nhexo init HexoBlog\n```\n\n**2.进入站点根目录然后进行安装本地站点**\n\n``` bash\ncd HexoBlog\n```\n\n``` bash\nnpm install\n```\n\n**3.生成静态页面**\n\n``` bash\nhexo g\n```\n\n**4.启动本地站点服务器查看效果，执行本命令之后会提示出一个URL，将URL放入浏览器查看效果，按Ctrl+c关闭本地站点服务器**\n\n``` bash\nhexo server\n```\n\n### 配置\n#### 1. 基本配置\n**1.在github上创建一个仓库，仓库的名字必须为\"github用户名.github.io\"**\n\n**2.如果你使用过github，我猜你已经配置好了SSH key,这里我就不多说了，不过即使没有配置SSH key也没关系，只是以后每次提交的时候会提示要求输入密码**\n\n**3.修改站点_config.xml文件，如下：**\n\n```\n# Deployment\n# Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git    #部署类型, 本文使用Git，发现使用github+SSH的方式会提示找不到github\n  repository: https://github.com/SLPowerCoder/SLPowerCoder.github.io  #部署的仓库url,发现使用github+SSH的方式会提示找不到github\n  branch: master   #部署分支,一般使用master主分支\n```\n**4.这些基本的配置完成之后就可以执行命令部署到github上了**\n\n执行下面的命令，安装git部署插件，不然执行了 hexo deploy之后会没有反应，也没有任何提示部署失败，其实是失败的\n\n``` bash \n$ npm install hexo-deployer-git --save\n```\n\n**5.执行下面命令，用于生成静态文件并部署到远程站点，你也可以分两步写**\n\n``` bash \n$ hexo g -d\n```\n\n上述然后在浏览器中输入 github用户名.github.io就可浏览了\n\n#### 2. 博客主题配置\n\n```\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 枫叶\nsubtitle: 枫叶\ndescription: 坐看云起时\nauthor: 枫叶\nlanguage: zh-Hans \ntimezone:\nemail: sunlei_1030@126.com  # 邮箱\n\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: https://slpowercoder.github.io\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Disqus  disqus评论,  与多说类似, 国内一般使用多说\n# disqus_shortname: \nduoshuo_shortname: fengye1030   # 这里添加多说评论\n\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yelee  #默认是landscape 还有yelee,yilia等等\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git    #部署类型, 本文使用Git，发现使用github+SSH的方式会提示找不到github\n  repository: https://github.com/SLPowerCoder/SLPowerCoder.github.io  #部署的仓库url,采用https的,发现使用github+SSH的方式会提示找不到github\n  branch: master   #部署分支,一般使用master主分支\n\n```\n\n### hexo的使用（下面的命令如果报错，请用sudo权限执行）\n\n**1.创建文章（也可以把创建好的md文件直接放到根目录source/_posts目录中）**\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n**2.清楚缓存的静态页面**\n\n``` bash\n$ hexo clean\n```\n\n**3.生成静态页面**\n\n``` bash\n$ hexo generate\n```\n\n**4.运行本地服务器查看效果**\n\n``` bash\n$ hexo server\n```\n\n**5.部署到远程站点**\n\n``` bash\n$ hexo deploy\n```\n\n### 参考文献\n[hexo官网](https://hexo.io/)\n","source":"_posts/hexo的安装和配置.md","raw":"---\ntitle: Mac上 Hexo安装与配置\ncategories: hexo\ntags: [hexo,博客]\n\n---\n\n### 安装\n#### 1. 安装node.js[传送](https://nodejs.org/en/)\n下载node的pkg包，点击直接安装，安装的过程下一步下一步就行了，新版的node.js包含有npm（npm用来安装hexo）\n#### 2. 安装hexo\n``` bash\n$ sudo npm install -g hexo-cli\n```\n\n**注意：**如果没有用sudo来执行命令可能会出现错误\n\n#### 3. 建立本地站点\n现在本地创建一个文件夹，作为本地站点的根目录，例如建立一个HexoBlog文件夹，**cd到HexoBlog的上一级目录执行以下命令**\n\n**1.初始化一个本地站点**\n\n``` bash\nhexo init HexoBlog\n```\n\n**2.进入站点根目录然后进行安装本地站点**\n\n``` bash\ncd HexoBlog\n```\n\n``` bash\nnpm install\n```\n\n**3.生成静态页面**\n\n``` bash\nhexo g\n```\n\n**4.启动本地站点服务器查看效果，执行本命令之后会提示出一个URL，将URL放入浏览器查看效果，按Ctrl+c关闭本地站点服务器**\n\n``` bash\nhexo server\n```\n\n### 配置\n#### 1. 基本配置\n**1.在github上创建一个仓库，仓库的名字必须为\"github用户名.github.io\"**\n\n**2.如果你使用过github，我猜你已经配置好了SSH key,这里我就不多说了，不过即使没有配置SSH key也没关系，只是以后每次提交的时候会提示要求输入密码**\n\n**3.修改站点_config.xml文件，如下：**\n\n```\n# Deployment\n# Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git    #部署类型, 本文使用Git，发现使用github+SSH的方式会提示找不到github\n  repository: https://github.com/SLPowerCoder/SLPowerCoder.github.io  #部署的仓库url,发现使用github+SSH的方式会提示找不到github\n  branch: master   #部署分支,一般使用master主分支\n```\n**4.这些基本的配置完成之后就可以执行命令部署到github上了**\n\n执行下面的命令，安装git部署插件，不然执行了 hexo deploy之后会没有反应，也没有任何提示部署失败，其实是失败的\n\n``` bash \n$ npm install hexo-deployer-git --save\n```\n\n**5.执行下面命令，用于生成静态文件并部署到远程站点，你也可以分两步写**\n\n``` bash \n$ hexo g -d\n```\n\n上述然后在浏览器中输入 github用户名.github.io就可浏览了\n\n#### 2. 博客主题配置\n\n```\n# Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: 枫叶\nsubtitle: 枫叶\ndescription: 坐看云起时\nauthor: 枫叶\nlanguage: zh-Hans \ntimezone:\nemail: sunlei_1030@126.com  # 邮箱\n\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: https://slpowercoder.github.io\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Disqus  disqus评论,  与多说类似, 国内一般使用多说\n# disqus_shortname: \nduoshuo_shortname: fengye1030   # 这里添加多说评论\n\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: yelee  #默认是landscape 还有yelee,yilia等等\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git    #部署类型, 本文使用Git，发现使用github+SSH的方式会提示找不到github\n  repository: https://github.com/SLPowerCoder/SLPowerCoder.github.io  #部署的仓库url,采用https的,发现使用github+SSH的方式会提示找不到github\n  branch: master   #部署分支,一般使用master主分支\n\n```\n\n### hexo的使用（下面的命令如果报错，请用sudo权限执行）\n\n**1.创建文章（也可以把创建好的md文件直接放到根目录source/_posts目录中）**\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n**2.清楚缓存的静态页面**\n\n``` bash\n$ hexo clean\n```\n\n**3.生成静态页面**\n\n``` bash\n$ hexo generate\n```\n\n**4.运行本地服务器查看效果**\n\n``` bash\n$ hexo server\n```\n\n**5.部署到远程站点**\n\n``` bash\n$ hexo deploy\n```\n\n### 参考文献\n[hexo官网](https://hexo.io/)\n","slug":"hexo的安装和配置","published":1,"date":"2016-09-01T16:03:34.000Z","updated":"2018-06-26T14:15:24.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmeouuz0007v8tj9si1f3no","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h4 id=\"1-安装node-js传送\"><a href=\"#1-安装node-js传送\" class=\"headerlink\" title=\"1. 安装node.js传送\"></a>1. 安装node.js<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">传送</a></h4><p>下载node的pkg包，点击直接安装，安装的过程下一步下一步就行了，新版的node.js包含有npm（npm用来安装hexo）</p>\n<h4 id=\"2-安装hexo\"><a href=\"#2-安装hexo\" class=\"headerlink\" title=\"2. 安装hexo\"></a>2. 安装hexo</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong>如果没有用sudo来执行命令可能会出现错误</p>\n<h4 id=\"3-建立本地站点\"><a href=\"#3-建立本地站点\" class=\"headerlink\" title=\"3. 建立本地站点\"></a>3. 建立本地站点</h4><p>现在本地创建一个文件夹，作为本地站点的根目录，例如建立一个HexoBlog文件夹，<strong>cd到HexoBlog的上一级目录执行以下命令</strong></p>\n<p><strong>1.初始化一个本地站点</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init HexoB<span class=\"built_in\">log</span></div></pre></td></tr></table></figure>\n<p><strong>2.进入站点根目录然后进行安装本地站点</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> HexoB<span class=\"built_in\">log</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p><strong>3.生成静态页面</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div></pre></td></tr></table></figure>\n<p><strong>4.启动本地站点服务器查看效果，执行本命令之后会提示出一个URL，将URL放入浏览器查看效果，按Ctrl+c关闭本地站点服务器</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><h4 id=\"1-基本配置\"><a href=\"#1-基本配置\" class=\"headerlink\" title=\"1. 基本配置\"></a>1. 基本配置</h4><p><strong>1.在github上创建一个仓库，仓库的名字必须为”github用户名.github.io”</strong></p>\n<p><strong>2.如果你使用过github，我猜你已经配置好了SSH key,这里我就不多说了，不过即使没有配置SSH key也没关系，只是以后每次提交的时候会提示要求输入密码</strong></p>\n<p><strong>3.修改站点_config.xml文件，如下：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\"># Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git    #部署类型, 本文使用Git，发现使用github+SSH的方式会提示找不到github</div><div class=\"line\">  repository: https://github.com/SLPowerCoder/SLPowerCoder.github.io  #部署的仓库url,发现使用github+SSH的方式会提示找不到github</div><div class=\"line\">  branch: master   #部署分支,一般使用master主分支</div></pre></td></tr></table></figure>\n<p><strong>4.这些基本的配置完成之后就可以执行命令部署到github上了</strong></p>\n<p>执行下面的命令，安装git部署插件，不然执行了 hexo deploy之后会没有反应，也没有任何提示部署失败，其实是失败的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p><strong>5.执行下面命令，用于生成静态文件并部署到远程站点，你也可以分两步写</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g <span class=\"_\">-d</span></div></pre></td></tr></table></figure>\n<p>上述然后在浏览器中输入 github用户名.github.io就可浏览了</p>\n<h4 id=\"2-博客主题配置\"><a href=\"#2-博客主题配置\" class=\"headerlink\" title=\"2. 博客主题配置\"></a>2. 博客主题配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site</div><div class=\"line\">title: 枫叶</div><div class=\"line\">subtitle: 枫叶</div><div class=\"line\">description: 坐看云起时</div><div class=\"line\">author: 枫叶</div><div class=\"line\">language: zh-Hans </div><div class=\"line\">timezone:</div><div class=\"line\">email: sunlei_1030@126.com  # 邮箱</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: https://slpowercoder.github.io</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source</div><div class=\"line\">public_dir: public</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: false</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight:</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Disqus  disqus评论,  与多说类似, 国内一般使用多说</div><div class=\"line\"># disqus_shortname: </div><div class=\"line\">duoshuo_shortname: fengye1030   # 这里添加多说评论</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: yelee  #默认是landscape 还有yelee,yilia等等</div><div class=\"line\"></div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git    #部署类型, 本文使用Git，发现使用github+SSH的方式会提示找不到github</div><div class=\"line\">  repository: https://github.com/SLPowerCoder/SLPowerCoder.github.io  #部署的仓库url,采用https的,发现使用github+SSH的方式会提示找不到github</div><div class=\"line\">  branch: master   #部署分支,一般使用master主分支</div></pre></td></tr></table></figure>\n<h3 id=\"hexo的使用（下面的命令如果报错，请用sudo权限执行）\"><a href=\"#hexo的使用（下面的命令如果报错，请用sudo权限执行）\" class=\"headerlink\" title=\"hexo的使用（下面的命令如果报错，请用sudo权限执行）\"></a>hexo的使用（下面的命令如果报错，请用sudo权限执行）</h3><p><strong>1.创建文章（也可以把创建好的md文件直接放到根目录source/_posts目录中）</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p><strong>2.清楚缓存的静态页面</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure>\n<p><strong>3.生成静态页面</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p><strong>4.运行本地服务器查看效果</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p><strong>5.部署到远程站点</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">hexo官网</a></p>\n","excerpt":"","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h4 id=\"1-安装node-js传送\"><a href=\"#1-安装node-js传送\" class=\"headerlink\" title=\"1. 安装node.js传送\"></a>1. 安装node.js<a href=\"https://nodejs.org/en/\">传送</a></h4><p>下载node的pkg包，点击直接安装，安装的过程下一步下一步就行了，新版的node.js包含有npm（npm用来安装hexo）</p>\n<h4 id=\"2-安装hexo\"><a href=\"#2-安装hexo\" class=\"headerlink\" title=\"2. 安装hexo\"></a>2. 安装hexo</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong>如果没有用sudo来执行命令可能会出现错误</p>\n<h4 id=\"3-建立本地站点\"><a href=\"#3-建立本地站点\" class=\"headerlink\" title=\"3. 建立本地站点\"></a>3. 建立本地站点</h4><p>现在本地创建一个文件夹，作为本地站点的根目录，例如建立一个HexoBlog文件夹，<strong>cd到HexoBlog的上一级目录执行以下命令</strong></p>\n<p><strong>1.初始化一个本地站点</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init HexoB<span class=\"built_in\">log</span></div></pre></td></tr></table></figure>\n<p><strong>2.进入站点根目录然后进行安装本地站点</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> HexoB<span class=\"built_in\">log</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div></pre></td></tr></table></figure>\n<p><strong>3.生成静态页面</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div></pre></td></tr></table></figure>\n<p><strong>4.启动本地站点服务器查看效果，执行本命令之后会提示出一个URL，将URL放入浏览器查看效果，按Ctrl+c关闭本地站点服务器</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><h4 id=\"1-基本配置\"><a href=\"#1-基本配置\" class=\"headerlink\" title=\"1. 基本配置\"></a>1. 基本配置</h4><p><strong>1.在github上创建一个仓库，仓库的名字必须为”github用户名.github.io”</strong></p>\n<p><strong>2.如果你使用过github，我猜你已经配置好了SSH key,这里我就不多说了，不过即使没有配置SSH key也没关系，只是以后每次提交的时候会提示要求输入密码</strong></p>\n<p><strong>3.修改站点_config.xml文件，如下：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\"># Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git    #部署类型, 本文使用Git，发现使用github+SSH的方式会提示找不到github</div><div class=\"line\">  repository: https://github.com/SLPowerCoder/SLPowerCoder.github.io  #部署的仓库url,发现使用github+SSH的方式会提示找不到github</div><div class=\"line\">  branch: master   #部署分支,一般使用master主分支</div></pre></td></tr></table></figure>\n<p><strong>4.这些基本的配置完成之后就可以执行命令部署到github上了</strong></p>\n<p>执行下面的命令，安装git部署插件，不然执行了 hexo deploy之后会没有反应，也没有任何提示部署失败，其实是失败的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p><strong>5.执行下面命令，用于生成静态文件并部署到远程站点，你也可以分两步写</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g <span class=\"_\">-d</span></div></pre></td></tr></table></figure>\n<p>上述然后在浏览器中输入 github用户名.github.io就可浏览了</p>\n<h4 id=\"2-博客主题配置\"><a href=\"#2-博客主题配置\" class=\"headerlink\" title=\"2. 博客主题配置\"></a>2. 博客主题配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site</div><div class=\"line\">title: 枫叶</div><div class=\"line\">subtitle: 枫叶</div><div class=\"line\">description: 坐看云起时</div><div class=\"line\">author: 枫叶</div><div class=\"line\">language: zh-Hans </div><div class=\"line\">timezone:</div><div class=\"line\">email: sunlei_1030@126.com  # 邮箱</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: https://slpowercoder.github.io</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source</div><div class=\"line\">public_dir: public</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: false</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight:</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Disqus  disqus评论,  与多说类似, 国内一般使用多说</div><div class=\"line\"># disqus_shortname: </div><div class=\"line\">duoshuo_shortname: fengye1030   # 这里添加多说评论</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: yelee  #默认是landscape 还有yelee,yilia等等</div><div class=\"line\"></div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git    #部署类型, 本文使用Git，发现使用github+SSH的方式会提示找不到github</div><div class=\"line\">  repository: https://github.com/SLPowerCoder/SLPowerCoder.github.io  #部署的仓库url,采用https的,发现使用github+SSH的方式会提示找不到github</div><div class=\"line\">  branch: master   #部署分支,一般使用master主分支</div></pre></td></tr></table></figure>\n<h3 id=\"hexo的使用（下面的命令如果报错，请用sudo权限执行）\"><a href=\"#hexo的使用（下面的命令如果报错，请用sudo权限执行）\" class=\"headerlink\" title=\"hexo的使用（下面的命令如果报错，请用sudo权限执行）\"></a>hexo的使用（下面的命令如果报错，请用sudo权限执行）</h3><p><strong>1.创建文章（也可以把创建好的md文件直接放到根目录source/_posts目录中）</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p><strong>2.清楚缓存的静态页面</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div></pre></td></tr></table></figure>\n<p><strong>3.生成静态页面</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p><strong>4.运行本地服务器查看效果</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p><strong>5.部署到远程站点</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><p><a href=\"https://hexo.io/\">hexo官网</a></p>\n"},{"title":"iOS 深拷贝和浅拷贝","_content":"\n**浅拷贝**只是增加了一个对被引用对象的一个指向，拷贝出的对象与原对象共用一块内存区域。\nretain：只是retainCount加一，实际上还是共用一块内存\ncopy：不论拷贝的是不是集合对象，只要被拷贝的对象是不可变的，那就是浅拷贝，仅仅retainCount加一\n\n**深拷贝**会分配出一块内存，然后将引用的内容拷贝进去，也就是说拷贝出来的对象与原对象是独立的。\ncopy：拷贝可变对象则是深拷贝\nmutableCopy：不论被拷贝的是不是集合对象，是可变的还是不可变的，都是深拷贝\n\n**注意：**如果mutableCopy的是集合对象，深拷贝的是该集合对象，不是指该集合对象里面的元素，称之为**单层深拷贝**，对于集合对象内的元素依然是指针拷贝\n\n**总结**\ncopy：只要copy的是**不可变**对象，都是浅拷贝，copy**可变集合**象则是单层深拷贝，拷贝**可变非集合**对象则是深拷贝\nmutableCopy：拷贝**集合**象则是单层深拷贝，拷贝**非集**合对象则是深拷贝\n","source":"_posts/iOS 深拷贝和浅拷贝.md","raw":"---\ntitle: iOS 深拷贝和浅拷贝\ncategories: iOS\ntags: [深拷贝,浅拷贝]\n\n---\n\n**浅拷贝**只是增加了一个对被引用对象的一个指向，拷贝出的对象与原对象共用一块内存区域。\nretain：只是retainCount加一，实际上还是共用一块内存\ncopy：不论拷贝的是不是集合对象，只要被拷贝的对象是不可变的，那就是浅拷贝，仅仅retainCount加一\n\n**深拷贝**会分配出一块内存，然后将引用的内容拷贝进去，也就是说拷贝出来的对象与原对象是独立的。\ncopy：拷贝可变对象则是深拷贝\nmutableCopy：不论被拷贝的是不是集合对象，是可变的还是不可变的，都是深拷贝\n\n**注意：**如果mutableCopy的是集合对象，深拷贝的是该集合对象，不是指该集合对象里面的元素，称之为**单层深拷贝**，对于集合对象内的元素依然是指针拷贝\n\n**总结**\ncopy：只要copy的是**不可变**对象，都是浅拷贝，copy**可变集合**象则是单层深拷贝，拷贝**可变非集合**对象则是深拷贝\nmutableCopy：拷贝**集合**象则是单层深拷贝，拷贝**非集**合对象则是深拷贝\n","slug":"iOS 深拷贝和浅拷贝","published":1,"date":"2017-02-11T15:44:10.000Z","updated":"2017-02-28T09:56:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmeouv00009v8tjahvnez4h","content":"<p><strong>浅拷贝</strong>只是增加了一个对被引用对象的一个指向，拷贝出的对象与原对象共用一块内存区域。<br>retain：只是retainCount加一，实际上还是共用一块内存<br>copy：不论拷贝的是不是集合对象，只要被拷贝的对象是不可变的，那就是浅拷贝，仅仅retainCount加一</p>\n<p><strong>深拷贝</strong>会分配出一块内存，然后将引用的内容拷贝进去，也就是说拷贝出来的对象与原对象是独立的。<br>copy：拷贝可变对象则是深拷贝<br>mutableCopy：不论被拷贝的是不是集合对象，是可变的还是不可变的，都是深拷贝</p>\n<p><strong>注意：</strong>如果mutableCopy的是集合对象，深拷贝的是该集合对象，不是指该集合对象里面的元素，称之为<strong>单层深拷贝</strong>，对于集合对象内的元素依然是指针拷贝</p>\n<p><strong>总结</strong><br>copy：只要copy的是<strong>不可变</strong>对象，都是浅拷贝，copy<strong>可变集合</strong>象则是单层深拷贝，拷贝<strong>可变非集合</strong>对象则是深拷贝<br>mutableCopy：拷贝<strong>集合</strong>象则是单层深拷贝，拷贝<strong>非集</strong>合对象则是深拷贝</p>\n","excerpt":"","more":"<p><strong>浅拷贝</strong>只是增加了一个对被引用对象的一个指向，拷贝出的对象与原对象共用一块内存区域。<br>retain：只是retainCount加一，实际上还是共用一块内存<br>copy：不论拷贝的是不是集合对象，只要被拷贝的对象是不可变的，那就是浅拷贝，仅仅retainCount加一</p>\n<p><strong>深拷贝</strong>会分配出一块内存，然后将引用的内容拷贝进去，也就是说拷贝出来的对象与原对象是独立的。<br>copy：拷贝可变对象则是深拷贝<br>mutableCopy：不论被拷贝的是不是集合对象，是可变的还是不可变的，都是深拷贝</p>\n<p><strong>注意：</strong>如果mutableCopy的是集合对象，深拷贝的是该集合对象，不是指该集合对象里面的元素，称之为<strong>单层深拷贝</strong>，对于集合对象内的元素依然是指针拷贝</p>\n<p><strong>总结</strong><br>copy：只要copy的是<strong>不可变</strong>对象，都是浅拷贝，copy<strong>可变集合</strong>象则是单层深拷贝，拷贝<strong>可变非集合</strong>对象则是深拷贝<br>mutableCopy：拷贝<strong>集合</strong>象则是单层深拷贝，拷贝<strong>非集</strong>合对象则是深拷贝</p>\n"},{"title":"iOS中为什么非要用runtime才能在分类中扩展属性呢","_content":"想必大家都知道在分类中能扩展属性，而对于能不能扩展属性，能不能扩展成员变量是不是有点模糊，今天元宵节，我就清清嗓子说上两句吧\n\n##### 论点\n1.分类中是能扩展属性的\n2.分类是不能给一个类扩展成员变量的\n\n##### 先唠唠嗑\n强调一下，分类不是类，它只是对类的一个扩展，没有ISA指针，我们知道我们可以通过runtime在不影响原来模块的情况下给模块扩展方法，有没有感觉这一句话好像也可以描述分类，*所以你可以认为分类是实现这一功能的捷径*，不然你觉得是用分类扩展方法容易还是用runtime来实现容易啊（正值年轻，说话有点冲~_~ !!）。\n##### 论据\n先说说属性，属性是对成员变量的一个封装，当我们声明一个属性的时候，Xcode会给我们默认创建一个 **_属性名** 的成员变量，也会给我们自动创建getter和setter方法。当然我们也可以用@synthesize指定其关联的变量\n例如给属性name指定其关联的变量`@synthesize name = xxx；self.name`其实是操作的实例变量xxx，而不是_name了。\n窝草，扯远了，回归正传。。\n所以我们要添加一个属相得有三样东西，setter、getter以及关联的成员变量。\n在分类中Xcode不会为我们自动创建setter、getter方法，我们可以手动实现，但是如何把一个变量关联到属性上呢，直接声明一个全局变量然后不行吗，事实证明不太行，对于getter方法还好说，直接返回一个变量就行，可是setter方法却不行，因为你要找到该属性关联的变量你才能给人家赋值啊，怎么办？怎么办？？这只能用runtime的对象关联来实现了\n\n```OC \n.m文件中\n// 定义关联的key\nstatic const char *key = \"name\";\n\n@implementation NSObject (Property)\n\n- (NSString *)name\n{\n  // 根据关联的key，获取关联的值。\n  return objc_getAssociatedObject(self, key);\n}\n\n- (void)setName:(NSString *)name\n{\n  // 参数一：目标对象\n  // 参数二：关联的key，可以通过这个key获取\n  // 参数三：关联的value\n  // 参数四：关联的策略\n  objc_setAssociatedObject(self, key, name, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n@end\n```\n看到这里你也许就会说，这TMD不是把变量给添加上去了吗？我表示默默一笑，如果你打印IVarList你就会发现并没有这个变量，只能打印出添加的属性。\n其实**对象关联**只是关联上去了，并没有把变量添加进去，说了这么多这回你该信了吧。\n***原因就是分类不是类，他没有ISA指针，下面是ISA指针，可以看出他本质上是一个结构体（只是换了个马甲被称之为Class类型，怕你迷糊，再说明白一点，ISA指针就是Class类型），通过ISA指针才能找指向变量的ivars，也就是说你都不知道变量的家，你怎么去给它生猴子啊，但是奇怪了，ISA指针里没有指向属性数组的指针，没有是对的，要不然这一段的解释就废了，可是讲真，属性指针在哪啊？？？有知道的小伙伴请告诉我一下 >_< !!!***\n\n```OC\nstruct objc_class {\n    Class isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class super_class                                        OBJC2_UNAVAILABLE;\n    const char *name                                         OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;\n    struct objc_method_list **methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache *cache                                 OBJC2_UNAVAILABLE;\n    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;\n#endif\n\n} OBJC2_UNAVAILABLE;\n/* Use Class instead of `struct objc_class *` */\n```\n##### 结论\n分类中可以给一个对象（类也是对象）添加属性，但是不能添加成员变量，只能**关联**上去。\n**注意：**如果不信，你可以自己再打印一遍吧，会发现只能打印出添加的属性，打印不出变量。\n","source":"_posts/iOS中为什么非要用runtime才能在分类中扩展属性呢.md","raw":"---\ntitle: iOS中为什么非要用runtime才能在分类中扩展属性呢\ncategories: iOS\ntags: [runtime,category]\n\n---\n想必大家都知道在分类中能扩展属性，而对于能不能扩展属性，能不能扩展成员变量是不是有点模糊，今天元宵节，我就清清嗓子说上两句吧\n\n##### 论点\n1.分类中是能扩展属性的\n2.分类是不能给一个类扩展成员变量的\n\n##### 先唠唠嗑\n强调一下，分类不是类，它只是对类的一个扩展，没有ISA指针，我们知道我们可以通过runtime在不影响原来模块的情况下给模块扩展方法，有没有感觉这一句话好像也可以描述分类，*所以你可以认为分类是实现这一功能的捷径*，不然你觉得是用分类扩展方法容易还是用runtime来实现容易啊（正值年轻，说话有点冲~_~ !!）。\n##### 论据\n先说说属性，属性是对成员变量的一个封装，当我们声明一个属性的时候，Xcode会给我们默认创建一个 **_属性名** 的成员变量，也会给我们自动创建getter和setter方法。当然我们也可以用@synthesize指定其关联的变量\n例如给属性name指定其关联的变量`@synthesize name = xxx；self.name`其实是操作的实例变量xxx，而不是_name了。\n窝草，扯远了，回归正传。。\n所以我们要添加一个属相得有三样东西，setter、getter以及关联的成员变量。\n在分类中Xcode不会为我们自动创建setter、getter方法，我们可以手动实现，但是如何把一个变量关联到属性上呢，直接声明一个全局变量然后不行吗，事实证明不太行，对于getter方法还好说，直接返回一个变量就行，可是setter方法却不行，因为你要找到该属性关联的变量你才能给人家赋值啊，怎么办？怎么办？？这只能用runtime的对象关联来实现了\n\n```OC \n.m文件中\n// 定义关联的key\nstatic const char *key = \"name\";\n\n@implementation NSObject (Property)\n\n- (NSString *)name\n{\n  // 根据关联的key，获取关联的值。\n  return objc_getAssociatedObject(self, key);\n}\n\n- (void)setName:(NSString *)name\n{\n  // 参数一：目标对象\n  // 参数二：关联的key，可以通过这个key获取\n  // 参数三：关联的value\n  // 参数四：关联的策略\n  objc_setAssociatedObject(self, key, name, OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n@end\n```\n看到这里你也许就会说，这TMD不是把变量给添加上去了吗？我表示默默一笑，如果你打印IVarList你就会发现并没有这个变量，只能打印出添加的属性。\n其实**对象关联**只是关联上去了，并没有把变量添加进去，说了这么多这回你该信了吧。\n***原因就是分类不是类，他没有ISA指针，下面是ISA指针，可以看出他本质上是一个结构体（只是换了个马甲被称之为Class类型，怕你迷糊，再说明白一点，ISA指针就是Class类型），通过ISA指针才能找指向变量的ivars，也就是说你都不知道变量的家，你怎么去给它生猴子啊，但是奇怪了，ISA指针里没有指向属性数组的指针，没有是对的，要不然这一段的解释就废了，可是讲真，属性指针在哪啊？？？有知道的小伙伴请告诉我一下 >_< !!!***\n\n```OC\nstruct objc_class {\n    Class isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class super_class                                        OBJC2_UNAVAILABLE;\n    const char *name                                         OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;\n    struct objc_method_list **methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache *cache                                 OBJC2_UNAVAILABLE;\n    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;\n#endif\n\n} OBJC2_UNAVAILABLE;\n/* Use Class instead of `struct objc_class *` */\n```\n##### 结论\n分类中可以给一个对象（类也是对象）添加属性，但是不能添加成员变量，只能**关联**上去。\n**注意：**如果不信，你可以自己再打印一遍吧，会发现只能打印出添加的属性，打印不出变量。\n","slug":"iOS中为什么非要用runtime才能在分类中扩展属性呢","published":1,"date":"2017-02-11T15:36:36.000Z","updated":"2017-03-13T05:04:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmeouv2000cv8tjsbh9368p","content":"<p>想必大家都知道在分类中能扩展属性，而对于能不能扩展属性，能不能扩展成员变量是不是有点模糊，今天元宵节，我就清清嗓子说上两句吧</p>\n<h5 id=\"论点\"><a href=\"#论点\" class=\"headerlink\" title=\"论点\"></a>论点</h5><p>1.分类中是能扩展属性的<br>2.分类是不能给一个类扩展成员变量的</p>\n<h5 id=\"先唠唠嗑\"><a href=\"#先唠唠嗑\" class=\"headerlink\" title=\"先唠唠嗑\"></a>先唠唠嗑</h5><p>强调一下，分类不是类，它只是对类的一个扩展，没有ISA指针，我们知道我们可以通过runtime在不影响原来模块的情况下给模块扩展方法，有没有感觉这一句话好像也可以描述分类，<em>所以你可以认为分类是实现这一功能的捷径</em>，不然你觉得是用分类扩展方法容易还是用runtime来实现容易啊（正值年轻，说话有点冲~_~ !!）。</p>\n<h5 id=\"论据\"><a href=\"#论据\" class=\"headerlink\" title=\"论据\"></a>论据</h5><p>先说说属性，属性是对成员变量的一个封装，当我们声明一个属性的时候，Xcode会给我们默认创建一个 <strong>_属性名</strong> 的成员变量，也会给我们自动创建getter和setter方法。当然我们也可以用@synthesize指定其关联的变量<br>例如给属性name指定其关联的变量<code>@synthesize name = xxx；self.name</code>其实是操作的实例变量xxx，而不是_name了。<br>窝草，扯远了，回归正传。。<br>所以我们要添加一个属相得有三样东西，setter、getter以及关联的成员变量。<br>在分类中Xcode不会为我们自动创建setter、getter方法，我们可以手动实现，但是如何把一个变量关联到属性上呢，直接声明一个全局变量然后不行吗，事实证明不太行，对于getter方法还好说，直接返回一个变量就行，可是setter方法却不行，因为你要找到该属性关联的变量你才能给人家赋值啊，怎么办？怎么办？？这只能用runtime的对象关联来实现了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">.m文件中</div><div class=\"line\">// 定义关联的key</div><div class=\"line\">static const char *key = &quot;name&quot;;</div><div class=\"line\"></div><div class=\"line\">@implementation NSObject (Property)</div><div class=\"line\"></div><div class=\"line\">- (NSString *)name</div><div class=\"line\">&#123;</div><div class=\"line\">  // 根据关联的key，获取关联的值。</div><div class=\"line\">  return objc_getAssociatedObject(self, key);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setName:(NSString *)name</div><div class=\"line\">&#123;</div><div class=\"line\">  // 参数一：目标对象</div><div class=\"line\">  // 参数二：关联的key，可以通过这个key获取</div><div class=\"line\">  // 参数三：关联的value</div><div class=\"line\">  // 参数四：关联的策略</div><div class=\"line\">  objc_setAssociatedObject(self, key, name, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>看到这里你也许就会说，这TMD不是把变量给添加上去了吗？我表示默默一笑，如果你打印IVarList你就会发现并没有这个变量，只能打印出添加的属性。<br>其实<strong>对象关联</strong>只是关联上去了，并没有把变量添加进去，说了这么多这回你该信了吧。<br><strong><em>原因就是分类不是类，他没有ISA指针，下面是ISA指针，可以看出他本质上是一个结构体（只是换了个马甲被称之为Class类型，怕你迷糊，再说明白一点，ISA指针就是Class类型），通过ISA指针才能找指向变量的ivars，也就是说你都不知道变量的家，你怎么去给它生猴子啊，但是奇怪了，ISA指针里没有指向属性数组的指针，没有是对的，要不然这一段的解释就废了，可是讲真，属性指针在哪啊？？？有知道的小伙伴请告诉我一下 &gt;_&lt; !!!</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct objc_class &#123;</div><div class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class=\"line\"></div><div class=\"line\">#if !__OBJC2__</div><div class=\"line\">    Class super_class                                        OBJC2_UNAVAILABLE;</div><div class=\"line\">    const char *name                                         OBJC2_UNAVAILABLE;</div><div class=\"line\">    long version                                             OBJC2_UNAVAILABLE;</div><div class=\"line\">    long info                                                OBJC2_UNAVAILABLE;</div><div class=\"line\">    long instance_size                                       OBJC2_UNAVAILABLE;</div><div class=\"line\">    struct objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;</div><div class=\"line\">    struct objc_method_list **methodLists                    OBJC2_UNAVAILABLE;</div><div class=\"line\">    struct objc_cache *cache                                 OBJC2_UNAVAILABLE;</div><div class=\"line\">    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;</div><div class=\"line\">#endif</div><div class=\"line\"></div><div class=\"line\">&#125; OBJC2_UNAVAILABLE;</div><div class=\"line\">/* Use Class instead of `struct objc_class *` */</div></pre></td></tr></table></figure>\n<h5 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h5><p>分类中可以给一个对象（类也是对象）添加属性，但是不能添加成员变量，只能<strong>关联</strong>上去。<br><strong>注意：</strong>如果不信，你可以自己再打印一遍吧，会发现只能打印出添加的属性，打印不出变量。</p>\n","excerpt":"","more":"<p>想必大家都知道在分类中能扩展属性，而对于能不能扩展属性，能不能扩展成员变量是不是有点模糊，今天元宵节，我就清清嗓子说上两句吧</p>\n<h5 id=\"论点\"><a href=\"#论点\" class=\"headerlink\" title=\"论点\"></a>论点</h5><p>1.分类中是能扩展属性的<br>2.分类是不能给一个类扩展成员变量的</p>\n<h5 id=\"先唠唠嗑\"><a href=\"#先唠唠嗑\" class=\"headerlink\" title=\"先唠唠嗑\"></a>先唠唠嗑</h5><p>强调一下，分类不是类，它只是对类的一个扩展，没有ISA指针，我们知道我们可以通过runtime在不影响原来模块的情况下给模块扩展方法，有没有感觉这一句话好像也可以描述分类，<em>所以你可以认为分类是实现这一功能的捷径</em>，不然你觉得是用分类扩展方法容易还是用runtime来实现容易啊（正值年轻，说话有点冲~_~ !!）。</p>\n<h5 id=\"论据\"><a href=\"#论据\" class=\"headerlink\" title=\"论据\"></a>论据</h5><p>先说说属性，属性是对成员变量的一个封装，当我们声明一个属性的时候，Xcode会给我们默认创建一个 <strong>_属性名</strong> 的成员变量，也会给我们自动创建getter和setter方法。当然我们也可以用@synthesize指定其关联的变量<br>例如给属性name指定其关联的变量<code>@synthesize name = xxx；self.name</code>其实是操作的实例变量xxx，而不是_name了。<br>窝草，扯远了，回归正传。。<br>所以我们要添加一个属相得有三样东西，setter、getter以及关联的成员变量。<br>在分类中Xcode不会为我们自动创建setter、getter方法，我们可以手动实现，但是如何把一个变量关联到属性上呢，直接声明一个全局变量然后不行吗，事实证明不太行，对于getter方法还好说，直接返回一个变量就行，可是setter方法却不行，因为你要找到该属性关联的变量你才能给人家赋值啊，怎么办？怎么办？？这只能用runtime的对象关联来实现了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">.m文件中</div><div class=\"line\">// 定义关联的key</div><div class=\"line\">static const char *key = &quot;name&quot;;</div><div class=\"line\"></div><div class=\"line\">@implementation NSObject (Property)</div><div class=\"line\"></div><div class=\"line\">- (NSString *)name</div><div class=\"line\">&#123;</div><div class=\"line\">  // 根据关联的key，获取关联的值。</div><div class=\"line\">  return objc_getAssociatedObject(self, key);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)setName:(NSString *)name</div><div class=\"line\">&#123;</div><div class=\"line\">  // 参数一：目标对象</div><div class=\"line\">  // 参数二：关联的key，可以通过这个key获取</div><div class=\"line\">  // 参数三：关联的value</div><div class=\"line\">  // 参数四：关联的策略</div><div class=\"line\">  objc_setAssociatedObject(self, key, name, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n<p>看到这里你也许就会说，这TMD不是把变量给添加上去了吗？我表示默默一笑，如果你打印IVarList你就会发现并没有这个变量，只能打印出添加的属性。<br>其实<strong>对象关联</strong>只是关联上去了，并没有把变量添加进去，说了这么多这回你该信了吧。<br><strong><em>原因就是分类不是类，他没有ISA指针，下面是ISA指针，可以看出他本质上是一个结构体（只是换了个马甲被称之为Class类型，怕你迷糊，再说明白一点，ISA指针就是Class类型），通过ISA指针才能找指向变量的ivars，也就是说你都不知道变量的家，你怎么去给它生猴子啊，但是奇怪了，ISA指针里没有指向属性数组的指针，没有是对的，要不然这一段的解释就废了，可是讲真，属性指针在哪啊？？？有知道的小伙伴请告诉我一下 &gt;_&lt; !!!</em></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct objc_class &#123;</div><div class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class=\"line\"></div><div class=\"line\">#if !__OBJC2__</div><div class=\"line\">    Class super_class                                        OBJC2_UNAVAILABLE;</div><div class=\"line\">    const char *name                                         OBJC2_UNAVAILABLE;</div><div class=\"line\">    long version                                             OBJC2_UNAVAILABLE;</div><div class=\"line\">    long info                                                OBJC2_UNAVAILABLE;</div><div class=\"line\">    long instance_size                                       OBJC2_UNAVAILABLE;</div><div class=\"line\">    struct objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;</div><div class=\"line\">    struct objc_method_list **methodLists                    OBJC2_UNAVAILABLE;</div><div class=\"line\">    struct objc_cache *cache                                 OBJC2_UNAVAILABLE;</div><div class=\"line\">    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;</div><div class=\"line\">#endif</div><div class=\"line\"></div><div class=\"line\">&#125; OBJC2_UNAVAILABLE;</div><div class=\"line\">/* Use Class instead of `struct objc_class *` */</div></pre></td></tr></table></figure>\n<h5 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h5><p>分类中可以给一个对象（类也是对象）添加属性，但是不能添加成员变量，只能<strong>关联</strong>上去。<br><strong>注意：</strong>如果不信，你可以自己再打印一遍吧，会发现只能打印出添加的属性，打印不出变量。</p>\n"},{"title":"iOS中assign与weak，retain与strong的区别","_content":"以前在没有ARC的时候我们使用assign与retain来修饰属性，后来引入了更安全的weak和strong来修饰属性\n\n### assign与weak\n两者都是弱引用，assign通常用于普通类型属性（如int,NSInteger），还有代理属性的修饰，基本上来说两者是可以通用的。\n只是后者比前者多了一个功能，后者会在引用的对象被释放的时候将该属性置为nil，而前者依然会指向原来的位置，这样就会变成野指针。在oc中你给你一个nil对象发送消息不会crash，但是给一个对象（野指针）发送他不能解析的消息是会crash的，所以总的来说weak要比assign安全一些。\n像delegate属性建议用weak修饰而不是assign。\n### retain和strong\n他俩都是强引用，除了某些情况下不一样，其他的时候也是可以通用的。\n\n在修饰block属性的时候，相信大家都知道要用copy，如果不copy的话，他的生命周期会随着函数的结束而结束，copy之后会放在堆里面，延长block的生命周期。\nstrong在修饰block的时候就相当于copy，而retain修饰栈block的时候就相当于assign，这样block会出现提前被释放掉的危险。\n","source":"_posts/iOS中assign与weak，retain与strong的区别.md","raw":"---\ntitle: iOS中assign与weak，retain与strong的区别\ncategories: iOS\ntags: [assign,weak,retain,strong]\n\n---\n以前在没有ARC的时候我们使用assign与retain来修饰属性，后来引入了更安全的weak和strong来修饰属性\n\n### assign与weak\n两者都是弱引用，assign通常用于普通类型属性（如int,NSInteger），还有代理属性的修饰，基本上来说两者是可以通用的。\n只是后者比前者多了一个功能，后者会在引用的对象被释放的时候将该属性置为nil，而前者依然会指向原来的位置，这样就会变成野指针。在oc中你给你一个nil对象发送消息不会crash，但是给一个对象（野指针）发送他不能解析的消息是会crash的，所以总的来说weak要比assign安全一些。\n像delegate属性建议用weak修饰而不是assign。\n### retain和strong\n他俩都是强引用，除了某些情况下不一样，其他的时候也是可以通用的。\n\n在修饰block属性的时候，相信大家都知道要用copy，如果不copy的话，他的生命周期会随着函数的结束而结束，copy之后会放在堆里面，延长block的生命周期。\nstrong在修饰block的时候就相当于copy，而retain修饰栈block的时候就相当于assign，这样block会出现提前被释放掉的危险。\n","slug":"iOS中assign与weak，retain与strong的区别","published":1,"date":"2017-02-11T15:41:29.000Z","updated":"2017-03-25T05:24:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmeouv3000ev8tj4aze4uf7","content":"<p>以前在没有ARC的时候我们使用assign与retain来修饰属性，后来引入了更安全的weak和strong来修饰属性</p>\n<h3 id=\"assign与weak\"><a href=\"#assign与weak\" class=\"headerlink\" title=\"assign与weak\"></a>assign与weak</h3><p>两者都是弱引用，assign通常用于普通类型属性（如int,NSInteger），还有代理属性的修饰，基本上来说两者是可以通用的。<br>只是后者比前者多了一个功能，后者会在引用的对象被释放的时候将该属性置为nil，而前者依然会指向原来的位置，这样就会变成野指针。在oc中你给你一个nil对象发送消息不会crash，但是给一个对象（野指针）发送他不能解析的消息是会crash的，所以总的来说weak要比assign安全一些。<br>像delegate属性建议用weak修饰而不是assign。</p>\n<h3 id=\"retain和strong\"><a href=\"#retain和strong\" class=\"headerlink\" title=\"retain和strong\"></a>retain和strong</h3><p>他俩都是强引用，除了某些情况下不一样，其他的时候也是可以通用的。</p>\n<p>在修饰block属性的时候，相信大家都知道要用copy，如果不copy的话，他的生命周期会随着函数的结束而结束，copy之后会放在堆里面，延长block的生命周期。<br>strong在修饰block的时候就相当于copy，而retain修饰栈block的时候就相当于assign，这样block会出现提前被释放掉的危险。</p>\n","excerpt":"","more":"<p>以前在没有ARC的时候我们使用assign与retain来修饰属性，后来引入了更安全的weak和strong来修饰属性</p>\n<h3 id=\"assign与weak\"><a href=\"#assign与weak\" class=\"headerlink\" title=\"assign与weak\"></a>assign与weak</h3><p>两者都是弱引用，assign通常用于普通类型属性（如int,NSInteger），还有代理属性的修饰，基本上来说两者是可以通用的。<br>只是后者比前者多了一个功能，后者会在引用的对象被释放的时候将该属性置为nil，而前者依然会指向原来的位置，这样就会变成野指针。在oc中你给你一个nil对象发送消息不会crash，但是给一个对象（野指针）发送他不能解析的消息是会crash的，所以总的来说weak要比assign安全一些。<br>像delegate属性建议用weak修饰而不是assign。</p>\n<h3 id=\"retain和strong\"><a href=\"#retain和strong\" class=\"headerlink\" title=\"retain和strong\"></a>retain和strong</h3><p>他俩都是强引用，除了某些情况下不一样，其他的时候也是可以通用的。</p>\n<p>在修饰block属性的时候，相信大家都知道要用copy，如果不copy的话，他的生命周期会随着函数的结束而结束，copy之后会放在堆里面，延长block的生命周期。<br>strong在修饰block的时候就相当于copy，而retain修饰栈block的时候就相当于assign，这样block会出现提前被释放掉的危险。</p>\n"},{"title":"iOS小知识","_content":"\n原文https://slpowercoder.github.io/\n\n1. 去掉按钮的高亮黑\n```\n[funcImgBtn setAdjustsImageWhenHighlighted:NO];\n```\n\n2. 设置视图属性防止背景图片变形\n关于UIViewContentMode的详解\nhttp://blog.csdn.net/iunion/article/details/7494511\n```\n//对于UIButton需要设置button中的imageView的contentMode属性\nbutton.imageView.contentMode = UIViewContentModeScaleAspectFill;\n//\n视图.contentMode = UIViewContentModeScaleAspectFill;\n视图.clipsToBounds = YES;\n```\n3. 当一个页面有多个scrollView（或继承自scrollVIew）的时候，点击状态栏不会回到顶部，可以将非当前显示页的scrollVIew. scrollToTop设置为NO。\n4. 去掉在UITableViewStylePlain 样式的时候多余的默认cell\n```\n_tableView.tableFooterView = [[UIView alloc]init];\n```\n5. 去掉在UITableViewStyleGrouped 样式的时候默认的组脚高度\n```\n-(CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section{\nreturn 0.001; //越小越好，不能设置为0\n}\n```\n6. 自定义导航栏的返回按钮而造成返回手势的失效的解决办法，对于最顶层的VC我们需要设置enabled = NO，因为最外面一层是不需要该手势的\n```\nself.navigationController.interactivePopGestureRecognizer.delegate = self;\nself.navigationController.interactivePopGestureRecognizer.enabled = YES;\n```\n7. 根据十六进制色值返回一个UIColor对象的宏\n```\n#define USERCOLOR(string) [UIColor colorWithRed:((float)((string & 0xFF0000) >> 16))/255.0 green:((float)((string & 0xFF00) >> 8))/255.0 blue:((float)(string & 0xFF))/255.0 alpha:1.0]\n```\n8. 控制屏幕是否锁屏\n```\n//值为yes的时候可以防止屏幕黑屏，注意在程序结束点时候要设置为no\n[[UIApplication sharedApplication] setIdleTimerDisabled:YES];\n```\n9. 防止自定义导航栏返回按钮时，返回手势失效\n```\nself.navigationController.interactivePopGestureRecognizer.enabled = YES;\n```\n10. 打印函数，可以打印所在的函数，行数，以及你要打印的值\n```\n#define DLog(fmt, ...) NSLog((@\"%s [Line %d] \" fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);\n```\n\n11. UISwitch的大小直接设置frame是没有用的，可以通过CGAffineTransformMakeScale缩放来设置\n\n12.  load和initialize\n```\n//程序在加载类文件时候会调用load，无论实现该方法的类有没有被引用（只要程序运行的时候就会加载该类文件）\n+(void)load\n//在类被初始化之前会调用一次\n+(void)initialize\n```\n13. iPad使用UIAlertController会crash\nhttp://stackoverflow.com/questions/31577140/uialertcontroller-is-crashed-ipad\n","source":"_posts/iOS你可能不知道的小技巧.md","raw":"---\ntitle: iOS小知识\ncategories: iOS\ntags: [iOS]\n\n---\n\n原文https://slpowercoder.github.io/\n\n1. 去掉按钮的高亮黑\n```\n[funcImgBtn setAdjustsImageWhenHighlighted:NO];\n```\n\n2. 设置视图属性防止背景图片变形\n关于UIViewContentMode的详解\nhttp://blog.csdn.net/iunion/article/details/7494511\n```\n//对于UIButton需要设置button中的imageView的contentMode属性\nbutton.imageView.contentMode = UIViewContentModeScaleAspectFill;\n//\n视图.contentMode = UIViewContentModeScaleAspectFill;\n视图.clipsToBounds = YES;\n```\n3. 当一个页面有多个scrollView（或继承自scrollVIew）的时候，点击状态栏不会回到顶部，可以将非当前显示页的scrollVIew. scrollToTop设置为NO。\n4. 去掉在UITableViewStylePlain 样式的时候多余的默认cell\n```\n_tableView.tableFooterView = [[UIView alloc]init];\n```\n5. 去掉在UITableViewStyleGrouped 样式的时候默认的组脚高度\n```\n-(CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section{\nreturn 0.001; //越小越好，不能设置为0\n}\n```\n6. 自定义导航栏的返回按钮而造成返回手势的失效的解决办法，对于最顶层的VC我们需要设置enabled = NO，因为最外面一层是不需要该手势的\n```\nself.navigationController.interactivePopGestureRecognizer.delegate = self;\nself.navigationController.interactivePopGestureRecognizer.enabled = YES;\n```\n7. 根据十六进制色值返回一个UIColor对象的宏\n```\n#define USERCOLOR(string) [UIColor colorWithRed:((float)((string & 0xFF0000) >> 16))/255.0 green:((float)((string & 0xFF00) >> 8))/255.0 blue:((float)(string & 0xFF))/255.0 alpha:1.0]\n```\n8. 控制屏幕是否锁屏\n```\n//值为yes的时候可以防止屏幕黑屏，注意在程序结束点时候要设置为no\n[[UIApplication sharedApplication] setIdleTimerDisabled:YES];\n```\n9. 防止自定义导航栏返回按钮时，返回手势失效\n```\nself.navigationController.interactivePopGestureRecognizer.enabled = YES;\n```\n10. 打印函数，可以打印所在的函数，行数，以及你要打印的值\n```\n#define DLog(fmt, ...) NSLog((@\"%s [Line %d] \" fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);\n```\n\n11. UISwitch的大小直接设置frame是没有用的，可以通过CGAffineTransformMakeScale缩放来设置\n\n12.  load和initialize\n```\n//程序在加载类文件时候会调用load，无论实现该方法的类有没有被引用（只要程序运行的时候就会加载该类文件）\n+(void)load\n//在类被初始化之前会调用一次\n+(void)initialize\n```\n13. iPad使用UIAlertController会crash\nhttp://stackoverflow.com/questions/31577140/uialertcontroller-is-crashed-ipad\n","slug":"iOS你可能不知道的小技巧","published":1,"date":"2016-09-02T09:48:56.000Z","updated":"2017-03-13T05:03:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmeouv6000jv8tj0ll0cczh","content":"<p>原文<a href=\"https://slpowercoder.github.io/\">https://slpowercoder.github.io/</a></p>\n<ol>\n<li><p>去掉按钮的高亮黑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[funcImgBtn setAdjustsImageWhenHighlighted:NO];</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置视图属性防止背景图片变形<br>关于UIViewContentMode的详解<br><a href=\"http://blog.csdn.net/iunion/article/details/7494511\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/iunion/article/details/7494511</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//对于UIButton需要设置button中的imageView的contentMode属性</div><div class=\"line\">button.imageView.contentMode = UIViewContentModeScaleAspectFill;</div><div class=\"line\">//</div><div class=\"line\">视图.contentMode = UIViewContentModeScaleAspectFill;</div><div class=\"line\">视图.clipsToBounds = YES;</div></pre></td></tr></table></figure>\n</li>\n<li><p>当一个页面有多个scrollView（或继承自scrollVIew）的时候，点击状态栏不会回到顶部，可以将非当前显示页的scrollVIew. scrollToTop设置为NO。</p>\n</li>\n<li><p>去掉在UITableViewStylePlain 样式的时候多余的默认cell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">_tableView.tableFooterView = [[UIView alloc]init];</div></pre></td></tr></table></figure>\n</li>\n<li><p>去掉在UITableViewStyleGrouped 样式的时候默认的组脚高度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section&#123;</div><div class=\"line\">return 0.001; //越小越好，不能设置为0</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>自定义导航栏的返回按钮而造成返回手势的失效的解决办法，对于最顶层的VC我们需要设置enabled = NO，因为最外面一层是不需要该手势的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.navigationController.interactivePopGestureRecognizer.delegate = self;</div><div class=\"line\">self.navigationController.interactivePopGestureRecognizer.enabled = YES;</div></pre></td></tr></table></figure>\n</li>\n<li><p>根据十六进制色值返回一个UIColor对象的宏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#define USERCOLOR(string) [UIColor colorWithRed:((float)((string &amp; 0xFF0000) &gt;&gt; 16))/255.0 green:((float)((string &amp; 0xFF00) &gt;&gt; 8))/255.0 blue:((float)(string &amp; 0xFF))/255.0 alpha:1.0]</div></pre></td></tr></table></figure>\n</li>\n<li><p>控制屏幕是否锁屏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//值为yes的时候可以防止屏幕黑屏，注意在程序结束点时候要设置为no</div><div class=\"line\">[[UIApplication sharedApplication] setIdleTimerDisabled:YES];</div></pre></td></tr></table></figure>\n</li>\n<li><p>防止自定义导航栏返回按钮时，返回手势失效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.navigationController.interactivePopGestureRecognizer.enabled = YES;</div></pre></td></tr></table></figure>\n</li>\n<li><p>打印函数，可以打印所在的函数，行数，以及你要打印的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#define DLog(fmt, ...) NSLog((@&quot;%s [Line %d] &quot; fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);</div></pre></td></tr></table></figure>\n</li>\n<li><p>UISwitch的大小直接设置frame是没有用的，可以通过CGAffineTransformMakeScale缩放来设置</p>\n</li>\n<li><p>load和initialize</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//程序在加载类文件时候会调用load，无论实现该方法的类有没有被引用（只要程序运行的时候就会加载该类文件）</div><div class=\"line\">+(void)load</div><div class=\"line\">//在类被初始化之前会调用一次</div><div class=\"line\">+(void)initialize</div></pre></td></tr></table></figure>\n</li>\n<li><p>iPad使用UIAlertController会crash<br><a href=\"http://stackoverflow.com/questions/31577140/uialertcontroller-is-crashed-ipad\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/31577140/uialertcontroller-is-crashed-ipad</a></p>\n</li>\n</ol>\n","excerpt":"","more":"<p>原文<a href=\"https://slpowercoder.github.io/\">https://slpowercoder.github.io/</a></p>\n<ol>\n<li><p>去掉按钮的高亮黑</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[funcImgBtn setAdjustsImageWhenHighlighted:NO];</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置视图属性防止背景图片变形<br>关于UIViewContentMode的详解<br><a href=\"http://blog.csdn.net/iunion/article/details/7494511\">http://blog.csdn.net/iunion/article/details/7494511</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//对于UIButton需要设置button中的imageView的contentMode属性</div><div class=\"line\">button.imageView.contentMode = UIViewContentModeScaleAspectFill;</div><div class=\"line\">//</div><div class=\"line\">视图.contentMode = UIViewContentModeScaleAspectFill;</div><div class=\"line\">视图.clipsToBounds = YES;</div></pre></td></tr></table></figure>\n</li>\n<li><p>当一个页面有多个scrollView（或继承自scrollVIew）的时候，点击状态栏不会回到顶部，可以将非当前显示页的scrollVIew. scrollToTop设置为NO。</p>\n</li>\n<li><p>去掉在UITableViewStylePlain 样式的时候多余的默认cell</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">_tableView.tableFooterView = [[UIView alloc]init];</div></pre></td></tr></table></figure>\n</li>\n<li><p>去掉在UITableViewStyleGrouped 样式的时候默认的组脚高度</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-(CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section&#123;</div><div class=\"line\">return 0.001; //越小越好，不能设置为0</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>自定义导航栏的返回按钮而造成返回手势的失效的解决办法，对于最顶层的VC我们需要设置enabled = NO，因为最外面一层是不需要该手势的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.navigationController.interactivePopGestureRecognizer.delegate = self;</div><div class=\"line\">self.navigationController.interactivePopGestureRecognizer.enabled = YES;</div></pre></td></tr></table></figure>\n</li>\n<li><p>根据十六进制色值返回一个UIColor对象的宏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#define USERCOLOR(string) [UIColor colorWithRed:((float)((string &amp; 0xFF0000) &gt;&gt; 16))/255.0 green:((float)((string &amp; 0xFF00) &gt;&gt; 8))/255.0 blue:((float)(string &amp; 0xFF))/255.0 alpha:1.0]</div></pre></td></tr></table></figure>\n</li>\n<li><p>控制屏幕是否锁屏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//值为yes的时候可以防止屏幕黑屏，注意在程序结束点时候要设置为no</div><div class=\"line\">[[UIApplication sharedApplication] setIdleTimerDisabled:YES];</div></pre></td></tr></table></figure>\n</li>\n<li><p>防止自定义导航栏返回按钮时，返回手势失效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.navigationController.interactivePopGestureRecognizer.enabled = YES;</div></pre></td></tr></table></figure>\n</li>\n<li><p>打印函数，可以打印所在的函数，行数，以及你要打印的值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#define DLog(fmt, ...) NSLog((@&quot;%s [Line %d] &quot; fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);</div></pre></td></tr></table></figure>\n</li>\n<li><p>UISwitch的大小直接设置frame是没有用的，可以通过CGAffineTransformMakeScale缩放来设置</p>\n</li>\n<li><p>load和initialize</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//程序在加载类文件时候会调用load，无论实现该方法的类有没有被引用（只要程序运行的时候就会加载该类文件）</div><div class=\"line\">+(void)load</div><div class=\"line\">//在类被初始化之前会调用一次</div><div class=\"line\">+(void)initialize</div></pre></td></tr></table></figure>\n</li>\n<li><p>iPad使用UIAlertController会crash<br><a href=\"http://stackoverflow.com/questions/31577140/uialertcontroller-is-crashed-ipad\">http://stackoverflow.com/questions/31577140/uialertcontroller-is-crashed-ipad</a></p>\n</li>\n</ol>\n"},{"title":"iOS音频的播放以及录制","date":"2017-03-10T09:39:03.000Z","_content":"\niOS中的音频包括两种类型，一种是时间比较短无需监听播放时间等属性的音效，一种是时间比较长的音乐\n\n","source":"_posts/iOS音频的播放以及录制.md","raw":"---\ntitle: iOS音频的播放以及录制\ndate: 2017-03-10 17:39:03\ncategories: iOS\ntags: [audio]\n---\n\niOS中的音频包括两种类型，一种是时间比较短无需监听播放时间等属性的音效，一种是时间比较长的音乐\n\n","slug":"iOS音频的播放以及录制","published":1,"updated":"2017-03-10T09:46:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmeouv7000lv8tjpn0ybbn3","content":"<p>iOS中的音频包括两种类型，一种是时间比较短无需监听播放时间等属性的音效，一种是时间比较长的音乐</p>\n","excerpt":"","more":"<p>iOS中的音频包括两种类型，一种是时间比较短无需监听播放时间等属性的音效，一种是时间比较长的音乐</p>\n"},{"title":"react native集成到原有的项目中(iOS)","date":"2017-05-01T16:44:35.000Z","_content":"接触RN也有一段时间了，基本上来说算是入门了，到目前RN的应用还没有达到期望的广泛度，大部分还是以原生+RN的方式进行混合开发，今天抽空写一下关于RN嵌入到iOS原生项目中的知识点。\n\n### 前期准备\n现在大部分嵌入方式都是采用cocoapods的方式引入RN依赖库到原生项目中，当然你也可以选择手动方式，不过很麻烦，本文采用的cocoapods来管理依赖。\nRN所需要的环境也要装好，[中文网有](http://reactnative.cn/docs/0.43/getting-started.html#content)，具体我就不说了\n\n### 集成\n用Xcode创建一个项目，然后在项目中创建一个目录，把RN相关的都放在里面，如下图，我创建了一个js目录（这个目录你也可以放到iOS项目的根目录，任意）。\n![示例.png](http://upload-images.jianshu.io/upload_images/1229960-a6e617a8586a6cfa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n然后cd到刚刚创建的js目录中，执行`npm init`，这时js目录中会多出一个package.json文件，这个文件和iOS中的Podfile类似，是用来记录着RN工程中要安装的依赖，目前你只需要关注dependencies这一项(把下面的内容覆盖到你生成的package.json文件中)，该项中记录着RN项目要安装的依赖库。\n\n```javascript\n{\n  \"name\": \"MixRNAndIOS\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node node_modules/react-native/local-cli/cli.js start\",\n    \"test\": \"jest\"\n  },\n  \"dependencies\": {\n    \"react\": \"15.3.2\",\n    \"react-native\": \"^0.36.1\"\n  },\n  \"jest\": {\n    \"preset\": \"jest-react-native\"\n  },\n  \"devDependencies\": {\n    \"babel-jest\": \"16.0.0\",\n    \"babel-preset-react-native\": \"1.9.0\",\n    \"jest\": \"16.0.2\",\n    \"jest-react-native\": \"16.0.0\",\n    \"react-test-renderer\": \"15.3.2\"\n  }\n}\n\n```\n紧接着我们用npm包管理器来安装RN的依赖库，还是在js目录执行`npm install`,安装完毕之后，js目录会多出一个名为node_modules文件夹，RN所必须依赖的库都在这里面，然后我们创建一个index.ios.js作为RN项目的入口文件（名字可以任意起），然后我们就可以在入口文件中愉快的写RN代码了。\n\n上面的步骤顺利执行完之后，RN项目已经完成了，现在我们要把RN集成到iOS原生项目中。\n\n在项目根目录创建一个Podfile文件，如下所示，在项目的根目录执行pod install 来安装Podfile中指定的依赖库。\n\n```Objective-c\n# The target name is most likely the name of your project.\ntarget 'MixRNAndIOS' do\n\n  # Your 'node_modules' directory is probably in the root of your project,\n  # but if not, adjust the `:path` accordingly\n  pod 'React', :path => ‘./MixRNAndIOS/js/node_modules/react-native', :subspecs => [\n    'Core',\n    'RCTText',\n    'RCTNetwork',\n    'RCTWebSocket', # needed for debugging\n    # Add any other subspecs you want to use in your project\n    'RCTImage',\n  ]\n\nend\n```\n\n**注意：**Podfile文件中的path路径\n用pod安装完iOS所依赖的RN库之后我们就可以着手集成RN了。\n\nRN为我们在iOS平台上提供了一个RCTRootView，RCTRootView是继承自iOS中UIView类，所以你可以像使用UIView一样使用RCTRootView，RN与iOS的交互都要在RCTRootView中进行，本篇文章先不讲交互的事，只讲集成，先把代码贴上，如下所示：\n\n\n``` Objective-c\nimport \"ViewController.h\"\nimport \"RCTRootView.h\"\n\n@interface ViewController ()\n\n@property (nonatomic, strong) NSDictionary *props;\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\n    \n    self.props =   @{ @\"param\" : @[\n                                @{\n                                  @\"name\" : @\"Alex\",\n                                  @\"des\": @\"hello，我是从原生传递给RN界面的参数\"\n                                  }\n                              ]\n                      };\n    \n    \n    UIButton *btn = [[UIButton alloc]initWithFrame:CGRectMake((self.view.bounds.size.width - 300)/2, 200, 300, 40)];\n    [btn setTitle:@\"点我进入react native界面\" forState:UIControlStateNormal];\n    [btn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];\n    \n    [btn addTarget:self action:@selector(highScoreButtonPressed) forControlEvents:UIControlEventTouchUpInside];\n    [self.view addSubview:btn];\n}\n\n- (void)highScoreButtonPressed{\n    NSURL *jsCodeLocation;\n    \n#ifdef DEBUG\n    //开发的时候用，需要打开本地服务器\n    jsCodeLocation = [NSURL URLWithString:@\"http://localhost:8081/index.ios.bundle?platform=ios\"];\n#else\n    //发布APP的时候用\n    jsCodeLocation = [[NSBundle mainBundle] URLForResource:@\"index.ios\" withExtension:@\"jsbundle\"];\n#endif\n    \n    RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL : jsCodeLocation\n                                                 moduleName        : @\"RNHighScores\"\n                                                 initialProperties : self.props  //将native数据传送到RN中\n                                                 launchOptions     : nil];\n    \n    rootView.frame = [UIScreen mainScreen].bounds;\n    UIViewController *vc = [[UIViewController alloc] init];\n    vc.view.backgroundColor = [UIColor redColor];\n    [vc.view addSubview:rootView];\n    [self presentViewController:vc animated:YES completion:nil];\n}\n```\n创建RCTRootView，将RCTRootView添加到VC中的view上就OK了\n`jsCodeLocation = [[NSBundle mainBundle] URLForResource:@\"index.ios\" withExtension:@\"jsbundle\"];`\n这一行你先忽略，后面会说。\n然后cd到js目录，执行`react-native start`或者执行`npm start`，来启动本地node服务器，如果没有错误的话我们就只需最后一步了，用Xcode打开项目，运行项目，大功告成。\n\n#### 打RN离线包\n此时我们的项目是依赖于刚刚启动的本地服务器的，要是上线怎么办，所以我们需要打个RN离线包，这样就可以摆脱本地服务器了。\n进入js目录，创建一个bundle目录，这里面存放打包后的RN资源，包括RN代码和图片等静态资源，在js目录里执行下面的打包命令，\n```\nreact-native bundle --entry-file ./index.ios.js --bundle-output ./bundle/index.ios.jsbundle --platform ios --assets-dest ./bundle --dev false\n```\n如果成功的话，在bundle目录下会生成存放RN静态资源的assert目录和RN的index.ios.jsbundle代码文件，将这俩家伙拖进Xcode中\n\n![拖.png](http://upload-images.jianshu.io/upload_images/1229960-9acc384414a84b12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**注意：**要以引用的方式拖进Xcode中。\n\n在文章的集成部分我粘贴了一大段代码，源代码中有两句代码用来生成RN资源的URL，第一句是依赖本地服务器的，一般调试RN代码时用，第二句是引入打包后的RN资源的URL，发布APP的时候用的，我用宏来进行控制。\n```\njsCodeLocation = [[NSBundle mainBundle] URLForResource:@\"index.ios\" withExtension:@\"jsbundle\"];\n```\n\n**注意：**假如我们把第一种获取URL的方式注释掉，宏也注释掉，如果iOS项目是DEBUG模式，而我们加载的明明是RN的离线包，你会发现从原生页面跳转到RN页面的时候，顶部的statusBar会有加载资源的进度显示，不要纠结，运行项目的时候改成release模式就好了，来张效果图。\n\n友情提示，在RN中想引入iOS中Assets.xcassets里面的图片的话可以直接写图片的文件名，如下面这样。\n```\n<Image source={{uri:'happiness.jpg'}} style={styles.happy}/>\n```\n![ReactNativeDemo.gif](http://upload-images.jianshu.io/upload_images/1229960-b6bb0e112ce45465.gif?imageMogr2/auto-orient/strip)\n","source":"_posts/react native集成到原有的项目中(iOS).md","raw":"---\ntitle: react native集成到原有的项目中(iOS)\ndate: 2017-05-02 00:44:35\ncategories: react-native\ntags: [react-native]\n\n---\n接触RN也有一段时间了，基本上来说算是入门了，到目前RN的应用还没有达到期望的广泛度，大部分还是以原生+RN的方式进行混合开发，今天抽空写一下关于RN嵌入到iOS原生项目中的知识点。\n\n### 前期准备\n现在大部分嵌入方式都是采用cocoapods的方式引入RN依赖库到原生项目中，当然你也可以选择手动方式，不过很麻烦，本文采用的cocoapods来管理依赖。\nRN所需要的环境也要装好，[中文网有](http://reactnative.cn/docs/0.43/getting-started.html#content)，具体我就不说了\n\n### 集成\n用Xcode创建一个项目，然后在项目中创建一个目录，把RN相关的都放在里面，如下图，我创建了一个js目录（这个目录你也可以放到iOS项目的根目录，任意）。\n![示例.png](http://upload-images.jianshu.io/upload_images/1229960-a6e617a8586a6cfa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n然后cd到刚刚创建的js目录中，执行`npm init`，这时js目录中会多出一个package.json文件，这个文件和iOS中的Podfile类似，是用来记录着RN工程中要安装的依赖，目前你只需要关注dependencies这一项(把下面的内容覆盖到你生成的package.json文件中)，该项中记录着RN项目要安装的依赖库。\n\n```javascript\n{\n  \"name\": \"MixRNAndIOS\",\n  \"version\": \"0.0.1\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node node_modules/react-native/local-cli/cli.js start\",\n    \"test\": \"jest\"\n  },\n  \"dependencies\": {\n    \"react\": \"15.3.2\",\n    \"react-native\": \"^0.36.1\"\n  },\n  \"jest\": {\n    \"preset\": \"jest-react-native\"\n  },\n  \"devDependencies\": {\n    \"babel-jest\": \"16.0.0\",\n    \"babel-preset-react-native\": \"1.9.0\",\n    \"jest\": \"16.0.2\",\n    \"jest-react-native\": \"16.0.0\",\n    \"react-test-renderer\": \"15.3.2\"\n  }\n}\n\n```\n紧接着我们用npm包管理器来安装RN的依赖库，还是在js目录执行`npm install`,安装完毕之后，js目录会多出一个名为node_modules文件夹，RN所必须依赖的库都在这里面，然后我们创建一个index.ios.js作为RN项目的入口文件（名字可以任意起），然后我们就可以在入口文件中愉快的写RN代码了。\n\n上面的步骤顺利执行完之后，RN项目已经完成了，现在我们要把RN集成到iOS原生项目中。\n\n在项目根目录创建一个Podfile文件，如下所示，在项目的根目录执行pod install 来安装Podfile中指定的依赖库。\n\n```Objective-c\n# The target name is most likely the name of your project.\ntarget 'MixRNAndIOS' do\n\n  # Your 'node_modules' directory is probably in the root of your project,\n  # but if not, adjust the `:path` accordingly\n  pod 'React', :path => ‘./MixRNAndIOS/js/node_modules/react-native', :subspecs => [\n    'Core',\n    'RCTText',\n    'RCTNetwork',\n    'RCTWebSocket', # needed for debugging\n    # Add any other subspecs you want to use in your project\n    'RCTImage',\n  ]\n\nend\n```\n\n**注意：**Podfile文件中的path路径\n用pod安装完iOS所依赖的RN库之后我们就可以着手集成RN了。\n\nRN为我们在iOS平台上提供了一个RCTRootView，RCTRootView是继承自iOS中UIView类，所以你可以像使用UIView一样使用RCTRootView，RN与iOS的交互都要在RCTRootView中进行，本篇文章先不讲交互的事，只讲集成，先把代码贴上，如下所示：\n\n\n``` Objective-c\nimport \"ViewController.h\"\nimport \"RCTRootView.h\"\n\n@interface ViewController ()\n\n@property (nonatomic, strong) NSDictionary *props;\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    // Do any additional setup after loading the view, typically from a nib.\n    \n    self.props =   @{ @\"param\" : @[\n                                @{\n                                  @\"name\" : @\"Alex\",\n                                  @\"des\": @\"hello，我是从原生传递给RN界面的参数\"\n                                  }\n                              ]\n                      };\n    \n    \n    UIButton *btn = [[UIButton alloc]initWithFrame:CGRectMake((self.view.bounds.size.width - 300)/2, 200, 300, 40)];\n    [btn setTitle:@\"点我进入react native界面\" forState:UIControlStateNormal];\n    [btn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];\n    \n    [btn addTarget:self action:@selector(highScoreButtonPressed) forControlEvents:UIControlEventTouchUpInside];\n    [self.view addSubview:btn];\n}\n\n- (void)highScoreButtonPressed{\n    NSURL *jsCodeLocation;\n    \n#ifdef DEBUG\n    //开发的时候用，需要打开本地服务器\n    jsCodeLocation = [NSURL URLWithString:@\"http://localhost:8081/index.ios.bundle?platform=ios\"];\n#else\n    //发布APP的时候用\n    jsCodeLocation = [[NSBundle mainBundle] URLForResource:@\"index.ios\" withExtension:@\"jsbundle\"];\n#endif\n    \n    RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL : jsCodeLocation\n                                                 moduleName        : @\"RNHighScores\"\n                                                 initialProperties : self.props  //将native数据传送到RN中\n                                                 launchOptions     : nil];\n    \n    rootView.frame = [UIScreen mainScreen].bounds;\n    UIViewController *vc = [[UIViewController alloc] init];\n    vc.view.backgroundColor = [UIColor redColor];\n    [vc.view addSubview:rootView];\n    [self presentViewController:vc animated:YES completion:nil];\n}\n```\n创建RCTRootView，将RCTRootView添加到VC中的view上就OK了\n`jsCodeLocation = [[NSBundle mainBundle] URLForResource:@\"index.ios\" withExtension:@\"jsbundle\"];`\n这一行你先忽略，后面会说。\n然后cd到js目录，执行`react-native start`或者执行`npm start`，来启动本地node服务器，如果没有错误的话我们就只需最后一步了，用Xcode打开项目，运行项目，大功告成。\n\n#### 打RN离线包\n此时我们的项目是依赖于刚刚启动的本地服务器的，要是上线怎么办，所以我们需要打个RN离线包，这样就可以摆脱本地服务器了。\n进入js目录，创建一个bundle目录，这里面存放打包后的RN资源，包括RN代码和图片等静态资源，在js目录里执行下面的打包命令，\n```\nreact-native bundle --entry-file ./index.ios.js --bundle-output ./bundle/index.ios.jsbundle --platform ios --assets-dest ./bundle --dev false\n```\n如果成功的话，在bundle目录下会生成存放RN静态资源的assert目录和RN的index.ios.jsbundle代码文件，将这俩家伙拖进Xcode中\n\n![拖.png](http://upload-images.jianshu.io/upload_images/1229960-9acc384414a84b12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n**注意：**要以引用的方式拖进Xcode中。\n\n在文章的集成部分我粘贴了一大段代码，源代码中有两句代码用来生成RN资源的URL，第一句是依赖本地服务器的，一般调试RN代码时用，第二句是引入打包后的RN资源的URL，发布APP的时候用的，我用宏来进行控制。\n```\njsCodeLocation = [[NSBundle mainBundle] URLForResource:@\"index.ios\" withExtension:@\"jsbundle\"];\n```\n\n**注意：**假如我们把第一种获取URL的方式注释掉，宏也注释掉，如果iOS项目是DEBUG模式，而我们加载的明明是RN的离线包，你会发现从原生页面跳转到RN页面的时候，顶部的statusBar会有加载资源的进度显示，不要纠结，运行项目的时候改成release模式就好了，来张效果图。\n\n友情提示，在RN中想引入iOS中Assets.xcassets里面的图片的话可以直接写图片的文件名，如下面这样。\n```\n<Image source={{uri:'happiness.jpg'}} style={styles.happy}/>\n```\n![ReactNativeDemo.gif](http://upload-images.jianshu.io/upload_images/1229960-b6bb0e112ce45465.gif?imageMogr2/auto-orient/strip)\n","slug":"react native集成到原有的项目中(iOS)","published":1,"updated":"2017-05-01T17:19:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmeouv9000qv8tjk9it2q9o","content":"<p>接触RN也有一段时间了，基本上来说算是入门了，到目前RN的应用还没有达到期望的广泛度，大部分还是以原生+RN的方式进行混合开发，今天抽空写一下关于RN嵌入到iOS原生项目中的知识点。</p>\n<h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><p>现在大部分嵌入方式都是采用cocoapods的方式引入RN依赖库到原生项目中，当然你也可以选择手动方式，不过很麻烦，本文采用的cocoapods来管理依赖。<br>RN所需要的环境也要装好，<a href=\"http://reactnative.cn/docs/0.43/getting-started.html#content\" target=\"_blank\" rel=\"external\">中文网有</a>，具体我就不说了</p>\n<h3 id=\"集成\"><a href=\"#集成\" class=\"headerlink\" title=\"集成\"></a>集成</h3><p>用Xcode创建一个项目，然后在项目中创建一个目录，把RN相关的都放在里面，如下图，我创建了一个js目录（这个目录你也可以放到iOS项目的根目录，任意）。<br><img src=\"http://upload-images.jianshu.io/upload_images/1229960-a6e617a8586a6cfa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"示例.png\"><br>然后cd到刚刚创建的js目录中，执行<code>npm init</code>，这时js目录中会多出一个package.json文件，这个文件和iOS中的Podfile类似，是用来记录着RN工程中要安装的依赖，目前你只需要关注dependencies这一项(把下面的内容覆盖到你生成的package.json文件中)，该项中记录着RN项目要安装的依赖库。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"MixRNAndIOS\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</div><div class=\"line\">  <span class=\"string\">\"private\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"node node_modules/react-native/local-cli/cli.js start\"</span>,</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"jest\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"react\"</span>: <span class=\"string\">\"15.3.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"react-native\"</span>: <span class=\"string\">\"^0.36.1\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"jest\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"preset\"</span>: <span class=\"string\">\"jest-react-native\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"babel-jest\"</span>: <span class=\"string\">\"16.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-preset-react-native\"</span>: <span class=\"string\">\"1.9.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"jest\"</span>: <span class=\"string\">\"16.0.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"jest-react-native\"</span>: <span class=\"string\">\"16.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"react-test-renderer\"</span>: <span class=\"string\">\"15.3.2\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>紧接着我们用npm包管理器来安装RN的依赖库，还是在js目录执行<code>npm install</code>,安装完毕之后，js目录会多出一个名为node_modules文件夹，RN所必须依赖的库都在这里面，然后我们创建一个index.ios.js作为RN项目的入口文件（名字可以任意起），然后我们就可以在入口文件中愉快的写RN代码了。</p>\n<p>上面的步骤顺利执行完之后，RN项目已经完成了，现在我们要把RN集成到iOS原生项目中。</p>\n<p>在项目根目录创建一个Podfile文件，如下所示，在项目的根目录执行pod install 来安装Podfile中指定的依赖库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"># The target name is most likely the name of your project.</div><div class=\"line\">target &apos;MixRNAndIOS&apos; do</div><div class=\"line\"></div><div class=\"line\">  # Your &apos;node_modules&apos; directory is probably in the root of your project,</div><div class=\"line\">  # but if not, adjust the `:path` accordingly</div><div class=\"line\">  pod &apos;React&apos;, :path =&gt; ‘./MixRNAndIOS/js/node_modules/react-native&apos;, :subspecs =&gt; [</div><div class=\"line\">    &apos;Core&apos;,</div><div class=\"line\">    &apos;RCTText&apos;,</div><div class=\"line\">    &apos;RCTNetwork&apos;,</div><div class=\"line\">    &apos;RCTWebSocket&apos;, # needed for debugging</div><div class=\"line\">    # Add any other subspecs you want to use in your project</div><div class=\"line\">    &apos;RCTImage&apos;,</div><div class=\"line\">  ]</div><div class=\"line\"></div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong>Podfile文件中的path路径<br>用pod安装完iOS所依赖的RN库之后我们就可以着手集成RN了。</p>\n<p>RN为我们在iOS平台上提供了一个RCTRootView，RCTRootView是继承自iOS中UIView类，所以你可以像使用UIView一样使用RCTRootView，RN与iOS的交互都要在RCTRootView中进行，本篇文章先不讲交互的事，只讲集成，先把代码贴上，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &quot;ViewController.h&quot;</div><div class=\"line\">import &quot;RCTRootView.h&quot;</div><div class=\"line\"></div><div class=\"line\">@interface ViewController ()</div><div class=\"line\"></div><div class=\"line\">@property (nonatomic, strong) NSDictionary *props;</div><div class=\"line\"></div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\">@implementation ViewController</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    // Do any additional setup after loading the view, typically from a nib.</div><div class=\"line\">    </div><div class=\"line\">    self.props =   @&#123; @&quot;param&quot; : @[</div><div class=\"line\">                                @&#123;</div><div class=\"line\">                                  @&quot;name&quot; : @&quot;Alex&quot;,</div><div class=\"line\">                                  @&quot;des&quot;: @&quot;hello，我是从原生传递给RN界面的参数&quot;</div><div class=\"line\">                                  &#125;</div><div class=\"line\">                              ]</div><div class=\"line\">                      &#125;;</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    UIButton *btn = [[UIButton alloc]initWithFrame:CGRectMake((self.view.bounds.size.width - 300)/2, 200, 300, 40)];</div><div class=\"line\">    [btn setTitle:@&quot;点我进入react native界面&quot; forState:UIControlStateNormal];</div><div class=\"line\">    [btn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];</div><div class=\"line\">    </div><div class=\"line\">    [btn addTarget:self action:@selector(highScoreButtonPressed) forControlEvents:UIControlEventTouchUpInside];</div><div class=\"line\">    [self.view addSubview:btn];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)highScoreButtonPressed&#123;</div><div class=\"line\">    NSURL *jsCodeLocation;</div><div class=\"line\">    </div><div class=\"line\">#ifdef DEBUG</div><div class=\"line\">    //开发的时候用，需要打开本地服务器</div><div class=\"line\">    jsCodeLocation = [NSURL URLWithString:@&quot;http://localhost:8081/index.ios.bundle?platform=ios&quot;];</div><div class=\"line\">#else</div><div class=\"line\">    //发布APP的时候用</div><div class=\"line\">    jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;index.ios&quot; withExtension:@&quot;jsbundle&quot;];</div><div class=\"line\">#endif</div><div class=\"line\">    </div><div class=\"line\">    RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL : jsCodeLocation</div><div class=\"line\">                                                 moduleName        : @&quot;RNHighScores&quot;</div><div class=\"line\">                                                 initialProperties : self.props  //将native数据传送到RN中</div><div class=\"line\">                                                 launchOptions     : nil];</div><div class=\"line\">    </div><div class=\"line\">    rootView.frame = [UIScreen mainScreen].bounds;</div><div class=\"line\">    UIViewController *vc = [[UIViewController alloc] init];</div><div class=\"line\">    vc.view.backgroundColor = [UIColor redColor];</div><div class=\"line\">    [vc.view addSubview:rootView];</div><div class=\"line\">    [self presentViewController:vc animated:YES completion:nil];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建RCTRootView，将RCTRootView添加到VC中的view上就OK了<br><code>jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;index.ios&quot; withExtension:@&quot;jsbundle&quot;];</code><br>这一行你先忽略，后面会说。<br>然后cd到js目录，执行<code>react-native start</code>或者执行<code>npm start</code>，来启动本地node服务器，如果没有错误的话我们就只需最后一步了，用Xcode打开项目，运行项目，大功告成。</p>\n<h4 id=\"打RN离线包\"><a href=\"#打RN离线包\" class=\"headerlink\" title=\"打RN离线包\"></a>打RN离线包</h4><p>此时我们的项目是依赖于刚刚启动的本地服务器的，要是上线怎么办，所以我们需要打个RN离线包，这样就可以摆脱本地服务器了。<br>进入js目录，创建一个bundle目录，这里面存放打包后的RN资源，包括RN代码和图片等静态资源，在js目录里执行下面的打包命令，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-native bundle --entry-file ./index.ios.js --bundle-output ./bundle/index.ios.jsbundle --platform ios --assets-dest ./bundle --dev false</div></pre></td></tr></table></figure></p>\n<p>如果成功的话，在bundle目录下会生成存放RN静态资源的assert目录和RN的index.ios.jsbundle代码文件，将这俩家伙拖进Xcode中</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1229960-9acc384414a84b12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"拖.png\"><br><strong>注意：</strong>要以引用的方式拖进Xcode中。</p>\n<p>在文章的集成部分我粘贴了一大段代码，源代码中有两句代码用来生成RN资源的URL，第一句是依赖本地服务器的，一般调试RN代码时用，第二句是引入打包后的RN资源的URL，发布APP的时候用的，我用宏来进行控制。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;index.ios&quot; withExtension:@&quot;jsbundle&quot;];</div></pre></td></tr></table></figure></p>\n<p><strong>注意：</strong>假如我们把第一种获取URL的方式注释掉，宏也注释掉，如果iOS项目是DEBUG模式，而我们加载的明明是RN的离线包，你会发现从原生页面跳转到RN页面的时候，顶部的statusBar会有加载资源的进度显示，不要纠结，运行项目的时候改成release模式就好了，来张效果图。</p>\n<p>友情提示，在RN中想引入iOS中Assets.xcassets里面的图片的话可以直接写图片的文件名，如下面这样。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Image source=&#123;&#123;uri:&apos;happiness.jpg&apos;&#125;&#125; style=&#123;styles.happy&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1229960-b6bb0e112ce45465.gif?imageMogr2/auto-orient/strip\" alt=\"ReactNativeDemo.gif\"></p>\n","excerpt":"","more":"<p>接触RN也有一段时间了，基本上来说算是入门了，到目前RN的应用还没有达到期望的广泛度，大部分还是以原生+RN的方式进行混合开发，今天抽空写一下关于RN嵌入到iOS原生项目中的知识点。</p>\n<h3 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h3><p>现在大部分嵌入方式都是采用cocoapods的方式引入RN依赖库到原生项目中，当然你也可以选择手动方式，不过很麻烦，本文采用的cocoapods来管理依赖。<br>RN所需要的环境也要装好，<a href=\"http://reactnative.cn/docs/0.43/getting-started.html#content\">中文网有</a>，具体我就不说了</p>\n<h3 id=\"集成\"><a href=\"#集成\" class=\"headerlink\" title=\"集成\"></a>集成</h3><p>用Xcode创建一个项目，然后在项目中创建一个目录，把RN相关的都放在里面，如下图，我创建了一个js目录（这个目录你也可以放到iOS项目的根目录，任意）。<br><img src=\"http://upload-images.jianshu.io/upload_images/1229960-a6e617a8586a6cfa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"示例.png\"><br>然后cd到刚刚创建的js目录中，执行<code>npm init</code>，这时js目录中会多出一个package.json文件，这个文件和iOS中的Podfile类似，是用来记录着RN工程中要安装的依赖，目前你只需要关注dependencies这一项(把下面的内容覆盖到你生成的package.json文件中)，该项中记录着RN项目要安装的依赖库。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"MixRNAndIOS\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.0.1\"</span>,</div><div class=\"line\">  <span class=\"string\">\"private\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"node node_modules/react-native/local-cli/cli.js start\"</span>,</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"jest\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"react\"</span>: <span class=\"string\">\"15.3.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"react-native\"</span>: <span class=\"string\">\"^0.36.1\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"jest\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"preset\"</span>: <span class=\"string\">\"jest-react-native\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"babel-jest\"</span>: <span class=\"string\">\"16.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"babel-preset-react-native\"</span>: <span class=\"string\">\"1.9.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"jest\"</span>: <span class=\"string\">\"16.0.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"jest-react-native\"</span>: <span class=\"string\">\"16.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"react-test-renderer\"</span>: <span class=\"string\">\"15.3.2\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>紧接着我们用npm包管理器来安装RN的依赖库，还是在js目录执行<code>npm install</code>,安装完毕之后，js目录会多出一个名为node_modules文件夹，RN所必须依赖的库都在这里面，然后我们创建一个index.ios.js作为RN项目的入口文件（名字可以任意起），然后我们就可以在入口文件中愉快的写RN代码了。</p>\n<p>上面的步骤顺利执行完之后，RN项目已经完成了，现在我们要把RN集成到iOS原生项目中。</p>\n<p>在项目根目录创建一个Podfile文件，如下所示，在项目的根目录执行pod install 来安装Podfile中指定的依赖库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"># The target name is most likely the name of your project.</div><div class=\"line\">target &apos;MixRNAndIOS&apos; do</div><div class=\"line\"></div><div class=\"line\">  # Your &apos;node_modules&apos; directory is probably in the root of your project,</div><div class=\"line\">  # but if not, adjust the `:path` accordingly</div><div class=\"line\">  pod &apos;React&apos;, :path =&gt; ‘./MixRNAndIOS/js/node_modules/react-native&apos;, :subspecs =&gt; [</div><div class=\"line\">    &apos;Core&apos;,</div><div class=\"line\">    &apos;RCTText&apos;,</div><div class=\"line\">    &apos;RCTNetwork&apos;,</div><div class=\"line\">    &apos;RCTWebSocket&apos;, # needed for debugging</div><div class=\"line\">    # Add any other subspecs you want to use in your project</div><div class=\"line\">    &apos;RCTImage&apos;,</div><div class=\"line\">  ]</div><div class=\"line\"></div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p><strong>注意：</strong>Podfile文件中的path路径<br>用pod安装完iOS所依赖的RN库之后我们就可以着手集成RN了。</p>\n<p>RN为我们在iOS平台上提供了一个RCTRootView，RCTRootView是继承自iOS中UIView类，所以你可以像使用UIView一样使用RCTRootView，RN与iOS的交互都要在RCTRootView中进行，本篇文章先不讲交互的事，只讲集成，先把代码贴上，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &quot;ViewController.h&quot;</div><div class=\"line\">import &quot;RCTRootView.h&quot;</div><div class=\"line\"></div><div class=\"line\">@interface ViewController ()</div><div class=\"line\"></div><div class=\"line\">@property (nonatomic, strong) NSDictionary *props;</div><div class=\"line\"></div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\">@implementation ViewController</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\">    // Do any additional setup after loading the view, typically from a nib.</div><div class=\"line\">    </div><div class=\"line\">    self.props =   @&#123; @&quot;param&quot; : @[</div><div class=\"line\">                                @&#123;</div><div class=\"line\">                                  @&quot;name&quot; : @&quot;Alex&quot;,</div><div class=\"line\">                                  @&quot;des&quot;: @&quot;hello，我是从原生传递给RN界面的参数&quot;</div><div class=\"line\">                                  &#125;</div><div class=\"line\">                              ]</div><div class=\"line\">                      &#125;;</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    UIButton *btn = [[UIButton alloc]initWithFrame:CGRectMake((self.view.bounds.size.width - 300)/2, 200, 300, 40)];</div><div class=\"line\">    [btn setTitle:@&quot;点我进入react native界面&quot; forState:UIControlStateNormal];</div><div class=\"line\">    [btn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];</div><div class=\"line\">    </div><div class=\"line\">    [btn addTarget:self action:@selector(highScoreButtonPressed) forControlEvents:UIControlEventTouchUpInside];</div><div class=\"line\">    [self.view addSubview:btn];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)highScoreButtonPressed&#123;</div><div class=\"line\">    NSURL *jsCodeLocation;</div><div class=\"line\">    </div><div class=\"line\">#ifdef DEBUG</div><div class=\"line\">    //开发的时候用，需要打开本地服务器</div><div class=\"line\">    jsCodeLocation = [NSURL URLWithString:@&quot;http://localhost:8081/index.ios.bundle?platform=ios&quot;];</div><div class=\"line\">#else</div><div class=\"line\">    //发布APP的时候用</div><div class=\"line\">    jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;index.ios&quot; withExtension:@&quot;jsbundle&quot;];</div><div class=\"line\">#endif</div><div class=\"line\">    </div><div class=\"line\">    RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL : jsCodeLocation</div><div class=\"line\">                                                 moduleName        : @&quot;RNHighScores&quot;</div><div class=\"line\">                                                 initialProperties : self.props  //将native数据传送到RN中</div><div class=\"line\">                                                 launchOptions     : nil];</div><div class=\"line\">    </div><div class=\"line\">    rootView.frame = [UIScreen mainScreen].bounds;</div><div class=\"line\">    UIViewController *vc = [[UIViewController alloc] init];</div><div class=\"line\">    vc.view.backgroundColor = [UIColor redColor];</div><div class=\"line\">    [vc.view addSubview:rootView];</div><div class=\"line\">    [self presentViewController:vc animated:YES completion:nil];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建RCTRootView，将RCTRootView添加到VC中的view上就OK了<br><code>jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;index.ios&quot; withExtension:@&quot;jsbundle&quot;];</code><br>这一行你先忽略，后面会说。<br>然后cd到js目录，执行<code>react-native start</code>或者执行<code>npm start</code>，来启动本地node服务器，如果没有错误的话我们就只需最后一步了，用Xcode打开项目，运行项目，大功告成。</p>\n<h4 id=\"打RN离线包\"><a href=\"#打RN离线包\" class=\"headerlink\" title=\"打RN离线包\"></a>打RN离线包</h4><p>此时我们的项目是依赖于刚刚启动的本地服务器的，要是上线怎么办，所以我们需要打个RN离线包，这样就可以摆脱本地服务器了。<br>进入js目录，创建一个bundle目录，这里面存放打包后的RN资源，包括RN代码和图片等静态资源，在js目录里执行下面的打包命令，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">react-native bundle --entry-file ./index.ios.js --bundle-output ./bundle/index.ios.jsbundle --platform ios --assets-dest ./bundle --dev false</div></pre></td></tr></table></figure></p>\n<p>如果成功的话，在bundle目录下会生成存放RN静态资源的assert目录和RN的index.ios.jsbundle代码文件，将这俩家伙拖进Xcode中</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1229960-9acc384414a84b12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"拖.png\"><br><strong>注意：</strong>要以引用的方式拖进Xcode中。</p>\n<p>在文章的集成部分我粘贴了一大段代码，源代码中有两句代码用来生成RN资源的URL，第一句是依赖本地服务器的，一般调试RN代码时用，第二句是引入打包后的RN资源的URL，发布APP的时候用的，我用宏来进行控制。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;index.ios&quot; withExtension:@&quot;jsbundle&quot;];</div></pre></td></tr></table></figure></p>\n<p><strong>注意：</strong>假如我们把第一种获取URL的方式注释掉，宏也注释掉，如果iOS项目是DEBUG模式，而我们加载的明明是RN的离线包，你会发现从原生页面跳转到RN页面的时候，顶部的statusBar会有加载资源的进度显示，不要纠结，运行项目的时候改成release模式就好了，来张效果图。</p>\n<p>友情提示，在RN中想引入iOS中Assets.xcassets里面的图片的话可以直接写图片的文件名，如下面这样。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;Image source=&#123;&#123;uri:&apos;happiness.jpg&apos;&#125;&#125; style=&#123;styles.happy&#125;/&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1229960-b6bb0e112ce45465.gif?imageMogr2/auto-orient/strip\" alt=\"ReactNativeDemo.gif\"></p>\n"},{"title":"react-native组件间的通信","date":"2018-09-03T14:52:22.000Z","_content":"","source":"_posts/react-native组件间的通信.md","raw":"---\ntitle: react-native组件间的通信\ndate: 2018-09-03 22:52:22\ncategories: react-native\ntags: [通信,react-native]\n---\n","slug":"react-native组件间的通信","published":1,"updated":"2018-09-03T14:54:18.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmeouva000sv8tjhbdzp1ln","content":"","excerpt":"","more":""},{"title":"滴滴面试总结","date":"2018-06-15T14:32:51.000Z","_content":"\n**下面是面试滴滴的经历，总共出了四道技术面试题，说不出的辛酸。。。\n日后有时间在总结答案，先记录下来**\n\n------------\n\n**1、实现一个游戏人物GameRole，包含年龄、性别、装备（可以动态增减），不是Xcode，是一个没有提示的编辑器，徒手写，类名忘写了。。。**\n\n**2、GameRole \\*role = [GameRole alloc] init...]; &nbsp;&nbsp;&nbsp; 问：role的内存大小？**\n\n**3、伪代码如下，这三行代码编译、运行的时候有什么问题，是会出现crash、警告或者出现其他情况，请说明原因**\n\n```\nNSString *obj = [[NSData alloc] init];\nNSInteger length = obj. length;\nNSString  *testStr = [obj stringApendString....];\n```\n\n**4、appdelegate中的didfinishedLanch方法中，伪代码如下:**\n\n```\n-appdelegate：didfinishedLanch ｛\n      dispatch_async(globalqueue,^{\n             [self  testTimer];\n       })\n｝\n\n-testTimer {\n     NSTimer *timer = [NSTimer  scheduleTimerWith:timerActiom];\n}\n\n-timerActiom {\n      NSLog(@“timer action”);\n}\n```\n**上述代码问题吗？有什么问题？怎么解决？**\n\n\n**4、函数指针和block的区别？**\n\n答：block的本质是结构体，使用比函数指针方便，函数指针可以作为方法参数实现回调\n追问：block为什么设计成结构体的方式？\n答：。。。。\n","source":"_posts/滴滴面试总结.md","raw":"---\ntitle: 滴滴面试总结\ndate: 2018-06-15 22:32:51\ncategories: iOS\ntags: [iOS, 面试]\n---\n\n**下面是面试滴滴的经历，总共出了四道技术面试题，说不出的辛酸。。。\n日后有时间在总结答案，先记录下来**\n\n------------\n\n**1、实现一个游戏人物GameRole，包含年龄、性别、装备（可以动态增减），不是Xcode，是一个没有提示的编辑器，徒手写，类名忘写了。。。**\n\n**2、GameRole \\*role = [GameRole alloc] init...]; &nbsp;&nbsp;&nbsp; 问：role的内存大小？**\n\n**3、伪代码如下，这三行代码编译、运行的时候有什么问题，是会出现crash、警告或者出现其他情况，请说明原因**\n\n```\nNSString *obj = [[NSData alloc] init];\nNSInteger length = obj. length;\nNSString  *testStr = [obj stringApendString....];\n```\n\n**4、appdelegate中的didfinishedLanch方法中，伪代码如下:**\n\n```\n-appdelegate：didfinishedLanch ｛\n      dispatch_async(globalqueue,^{\n             [self  testTimer];\n       })\n｝\n\n-testTimer {\n     NSTimer *timer = [NSTimer  scheduleTimerWith:timerActiom];\n}\n\n-timerActiom {\n      NSLog(@“timer action”);\n}\n```\n**上述代码问题吗？有什么问题？怎么解决？**\n\n\n**4、函数指针和block的区别？**\n\n答：block的本质是结构体，使用比函数指针方便，函数指针可以作为方法参数实现回调\n追问：block为什么设计成结构体的方式？\n答：。。。。\n","slug":"滴滴面试总结","published":1,"updated":"2018-06-26T14:40:06.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmeouvb000wv8tj0z6yg4js","content":"<p><strong>下面是面试滴滴的经历，总共出了四道技术面试题，说不出的辛酸。。。<br>日后有时间在总结答案，先记录下来</strong></p>\n<hr>\n<p><strong>1、实现一个游戏人物GameRole，包含年龄、性别、装备（可以动态增减），不是Xcode，是一个没有提示的编辑器，徒手写，类名忘写了。。。</strong></p>\n<p><strong>2、GameRole *role = [GameRole alloc] init…]; &nbsp;&nbsp;&nbsp; 问：role的内存大小？</strong></p>\n<p><strong>3、伪代码如下，这三行代码编译、运行的时候有什么问题，是会出现crash、警告或者出现其他情况，请说明原因</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSString *obj = [[NSData alloc] init];</div><div class=\"line\">NSInteger length = obj. length;</div><div class=\"line\">NSString  *testStr = [obj stringApendString....];</div></pre></td></tr></table></figure>\n<p><strong>4、appdelegate中的didfinishedLanch方法中，伪代码如下:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">-appdelegate：didfinishedLanch ｛</div><div class=\"line\">      dispatch_async(globalqueue,^&#123;</div><div class=\"line\">             [self  testTimer];</div><div class=\"line\">       &#125;)</div><div class=\"line\">｝</div><div class=\"line\"></div><div class=\"line\">-testTimer &#123;</div><div class=\"line\">     NSTimer *timer = [NSTimer  scheduleTimerWith:timerActiom];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-timerActiom &#123;</div><div class=\"line\">      NSLog(@“timer action”);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>上述代码问题吗？有什么问题？怎么解决？</strong></p>\n<p><strong>4、函数指针和block的区别？</strong></p>\n<p>答：block的本质是结构体，使用比函数指针方便，函数指针可以作为方法参数实现回调<br>追问：block为什么设计成结构体的方式？<br>答：。。。。</p>\n","excerpt":"","more":"<p><strong>下面是面试滴滴的经历，总共出了四道技术面试题，说不出的辛酸。。。<br>日后有时间在总结答案，先记录下来</strong></p>\n<hr>\n<p><strong>1、实现一个游戏人物GameRole，包含年龄、性别、装备（可以动态增减），不是Xcode，是一个没有提示的编辑器，徒手写，类名忘写了。。。</strong></p>\n<p><strong>2、GameRole *role = [GameRole alloc] init…]; &nbsp;&nbsp;&nbsp; 问：role的内存大小？</strong></p>\n<p><strong>3、伪代码如下，这三行代码编译、运行的时候有什么问题，是会出现crash、警告或者出现其他情况，请说明原因</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSString *obj = [[NSData alloc] init];</div><div class=\"line\">NSInteger length = obj. length;</div><div class=\"line\">NSString  *testStr = [obj stringApendString....];</div></pre></td></tr></table></figure>\n<p><strong>4、appdelegate中的didfinishedLanch方法中，伪代码如下:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">-appdelegate：didfinishedLanch ｛</div><div class=\"line\">      dispatch_async(globalqueue,^&#123;</div><div class=\"line\">             [self  testTimer];</div><div class=\"line\">       &#125;)</div><div class=\"line\">｝</div><div class=\"line\"></div><div class=\"line\">-testTimer &#123;</div><div class=\"line\">     NSTimer *timer = [NSTimer  scheduleTimerWith:timerActiom];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-timerActiom &#123;</div><div class=\"line\">      NSLog(@“timer action”);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>上述代码问题吗？有什么问题？怎么解决？</strong></p>\n<p><strong>4、函数指针和block的区别？</strong></p>\n<p>答：block的本质是结构体，使用比函数指针方便，函数指针可以作为方法参数实现回调<br>追问：block为什么设计成结构体的方式？<br>答：。。。。</p>\n"},{"title":"运行react native 官方例子出错的解决办法","_content":"\n学习一样新的东西官网文档和官方源码例子无疑是最好的选择，所以今天clone了官方的例子，100多兆，如果网速不好的话会等待很长时间 ~_~!!，然后直接cd到根目录执行了npm install安装了依赖，可是安装的过程中出错了（也有可能安装成功了，但是运行失败了），估计例子上的版本跟我安装的rn版本不兼容吧。\n我目前的RN版本是0.39，命令行的版本是react-native-cli:2.0.1\n\n先上官方运行效果图：\n![官方效果图](http://upload-images.jianshu.io/upload_images/1229960-edb9d9b477259960.gif?imageMogr2/auto-orient/strip)\n### 解决办法：\n情况一：如果npm install安装失败的话<br/>\n1、git checkout 0.xx-stable切换到稳定的分支，我切换的是0.41-stable版本，安装运行成功。<br/>\n2、npm install<br/>\n3、找到Examples，里面有四个例子，可以用Xcode打开运行<br/>\n\n情况二：npm install 安装成功，但运行失败<br/>\n1、git checkout 0.xx-stable切换到稳定的分支<br/>\n2、fm -rf node_modules && npm install<br/>\n3、找到Examples，里面有四个例子，可以用Xcode打开运行<br/>\n","source":"_posts/运行react native 官方例子出错.md","raw":"---\ntitle: 运行react native 官方例子出错的解决办法\ncategories: react-native\ntags: [react-native]\n\n---\n\n学习一样新的东西官网文档和官方源码例子无疑是最好的选择，所以今天clone了官方的例子，100多兆，如果网速不好的话会等待很长时间 ~_~!!，然后直接cd到根目录执行了npm install安装了依赖，可是安装的过程中出错了（也有可能安装成功了，但是运行失败了），估计例子上的版本跟我安装的rn版本不兼容吧。\n我目前的RN版本是0.39，命令行的版本是react-native-cli:2.0.1\n\n先上官方运行效果图：\n![官方效果图](http://upload-images.jianshu.io/upload_images/1229960-edb9d9b477259960.gif?imageMogr2/auto-orient/strip)\n### 解决办法：\n情况一：如果npm install安装失败的话<br/>\n1、git checkout 0.xx-stable切换到稳定的分支，我切换的是0.41-stable版本，安装运行成功。<br/>\n2、npm install<br/>\n3、找到Examples，里面有四个例子，可以用Xcode打开运行<br/>\n\n情况二：npm install 安装成功，但运行失败<br/>\n1、git checkout 0.xx-stable切换到稳定的分支<br/>\n2、fm -rf node_modules && npm install<br/>\n3、找到Examples，里面有四个例子，可以用Xcode打开运行<br/>\n","slug":"运行react native 官方例子出错","published":1,"date":"2017-01-07T12:07:16.000Z","updated":"2017-03-13T05:02:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmeouvb000yv8tj3yjs0vce","content":"<p>学习一样新的东西官网文档和官方源码例子无疑是最好的选择，所以今天clone了官方的例子，100多兆，如果网速不好的话会等待很长时间 ~_~!!，然后直接cd到根目录执行了npm install安装了依赖，可是安装的过程中出错了（也有可能安装成功了，但是运行失败了），估计例子上的版本跟我安装的rn版本不兼容吧。<br>我目前的RN版本是0.39，命令行的版本是react-native-cli:2.0.1</p>\n<p>先上官方运行效果图：<br><img src=\"http://upload-images.jianshu.io/upload_images/1229960-edb9d9b477259960.gif?imageMogr2/auto-orient/strip\" alt=\"官方效果图\"></p>\n<h3 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h3><p>情况一：如果npm install安装失败的话<br><br>1、git checkout 0.xx-stable切换到稳定的分支，我切换的是0.41-stable版本，安装运行成功。<br><br>2、npm install<br><br>3、找到Examples，里面有四个例子，可以用Xcode打开运行<br></p>\n<p>情况二：npm install 安装成功，但运行失败<br><br>1、git checkout 0.xx-stable切换到稳定的分支<br><br>2、fm -rf node_modules &amp;&amp; npm install<br><br>3、找到Examples，里面有四个例子，可以用Xcode打开运行<br></p>\n","excerpt":"","more":"<p>学习一样新的东西官网文档和官方源码例子无疑是最好的选择，所以今天clone了官方的例子，100多兆，如果网速不好的话会等待很长时间 ~_~!!，然后直接cd到根目录执行了npm install安装了依赖，可是安装的过程中出错了（也有可能安装成功了，但是运行失败了），估计例子上的版本跟我安装的rn版本不兼容吧。<br>我目前的RN版本是0.39，命令行的版本是react-native-cli:2.0.1</p>\n<p>先上官方运行效果图：<br><img src=\"http://upload-images.jianshu.io/upload_images/1229960-edb9d9b477259960.gif?imageMogr2/auto-orient/strip\" alt=\"官方效果图\"></p>\n<h3 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h3><p>情况一：如果npm install安装失败的话<br/><br>1、git checkout 0.xx-stable切换到稳定的分支，我切换的是0.41-stable版本，安装运行成功。<br/><br>2、npm install<br/><br>3、找到Examples，里面有四个例子，可以用Xcode打开运行<br/></p>\n<p>情况二：npm install 安装成功，但运行失败<br/><br>1、git checkout 0.xx-stable切换到稳定的分支<br/><br>2、fm -rf node_modules &amp;&amp; npm install<br/><br>3、找到Examples，里面有四个例子，可以用Xcode打开运行<br/></p>\n"},{"title":"Block深入理解","_content":"## block 你应该了解的知识\n为什么不把本部分放到本质部分的下面呢，我以为实用为大，还是先把block的使用及其注意点写在前面吧。\n\n1、为了方便声明block类型的变量，我们一般用typedef `typedef void (^Block)(void)`给block类型起个别名，这样我们就可以直接按如下方式声明block变量了。\n\n```\ntypedef void (^Block)(void);\nint main(int argc, const char * argv[]) {\n//这样声明\nBlock block = ^{};\n//而不是这样\n//void(^block)(void)=^{};\n\nreturn 0;\n}\n```\n2、在非ARC情况下，定义块的时候（无论是全局块还是局部块），其所占的内存区域是分配在栈中的。如下声明了一个block，如下面的代码就有危险，在条件语句实现的两个block都分配在栈内存中，于是这两个块只在对应的条件语句范围内有效，这样写的代码可以编译，但是运行起来却是时而对时儿错，若编译器未复写待执行的块，则程序正常运行，若复写则程序奔溃。\n\n```\nvoid (^block)();\nif(/*some condition*/){\nblock = ^{\nNSLog(@\"Block A\");\n};\n}else{\nblock = ^{\nNSLog(@\"Block B\");\n};\n}\nblock();\n```\n应该按这样的姿势写\n\n```\nvoid (^block)();\nif(/*some condition*/){\nblock = [^{\nNSLog(@\"Block A\");\n} copy];\n}else{\nblock = [^{\nNSLog(@\"Block B\");\n} copy];\n}\nblock();\n```\n\n3、同理2，将block声明为属性的时候，要用copy，还要注意如果你不确定你生命的这个block属性会不会被其他线程修改，你就用atomic加个原子锁，这样就线程安全了\n\n```\n@property (copy) Block block; //属性默认就是atomic\n\n```\n\n4、调用block的时候，有些童鞋的姿势不太对，假如我声明了一个block属性，正确调用姿势如下\n\n```\nBlock block  = self.block;\nif(block){\nblock();\n}\n```\n大部分童鞋会按下面这样写，那些连判断都不做的童鞋我就不批评你了，回去面壁去\n\n```\nif(self.block){\n\n//我是其他线程，我要这里要捣乱\n\nblock();\n}\n\n```\n\n上面的写法为什么不妥呢，因为即使self.block当时存在，如果另一个线程在该线程执行到我注释的那一行的时候把block置空了咋办，你再调用是不是就得到了一个完美的闪退，但是我如果把self.block 赋值给了一个局部变量的话，其他线程修改的是self.block而修改不了这个零时变量，所以上面的那种姿势不太稳妥。如果你看过AF的源码你就会发现，歪果仁就是按着我说的上面的正确姿势写的。\n\n5、为什么用了__block就可以修改所截获的变量了？\n\n因为block的特性，编译器不允许在block内直接修改所捕获的变量，但是我们可以修改`__block`修饰的自动变量，因为用`__block`修饰过之后，原先存储在栈中的变量就变成了存在堆中了，查看用clang过后的cpp文件你会发现在block中多了一个与该变量同名的`__Block_byref_i_0`结构体的指针变量，其中包含了存储在堆中的那个变量，可以通过结构体指针变量来直接更改变量的值，而没有用`__block`修饰的变量，block会把截获的变量copy为自己的一个变量。\n\n6、避免循环引用，如果你把一个block声明成了对象的一个属性，那么该对象就会持有这个block，如果在该对象中要实现block属性的话，用到self的时候要用__weak修饰过的，不然会循环引用。\n\n7、block的存储位置，栈、堆、全局数据区（强调一下如非特殊说明，block都是函数中实现）\nblock是否截获外围变量会影响他的存储区域的。\n\n7.1 下图是ARC模式下执行的代码\n![ARC下的block.png](http://upload-images.jianshu.io/upload_images/1229960-46005086cdd8bc09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000)\n7.2 下图是非ARC模式下执行的代码\n![MRC下的block.png](http://upload-images.jianshu.io/upload_images/1229960-5c079f6944335315.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000)\n\n解释一下上面的结果，学过C的都知道，malloc是分配到堆中了，global是分配到全局数据区了。\n\n7.3.1 MRC下此种写法Xcode会报错，但是如果不引用外围变量的话就没事，如果你仔细看7.1与7.2的介绍，你就知道原因了，不过我还是想说一下。因为在MRC情况下引入外围变量时，此种写法的block存在栈里面，而该函数的却返回了block，return标志着一个函数的结束，所以在return的时候block会被释放而报错，在MRC情况下不引入外围变量的话，此种写法的block存在全局数据区里，所以没问题。\n\n![MRC下此种写法报错.png](http://upload-images.jianshu.io/upload_images/1229960-925bdc8941a771d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800)\n7.3.2 ARC下，无论引不引入外围变量，都没事，不引入返回的block存在全局数据区，引入的话存在堆中。就不截图了。\n\n7.4 下面这种情况，ARC与MRC下block都存储在全局数据区，这种情况不常出现，一般我们都是在函数中来是实现block的。\n\n![ARC与MRC下都存储在全局数据区.png](http://upload-images.jianshu.io/upload_images/1229960-e11c0f8b876f7297.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000)\n\n7.5 总结（强调一下如非特殊说明，block都是函数中实现）：\n\n**ARC模式下：**不论你声明的是局部block还是全局block，它们只要不截获外围变量，它们都会存储在全局数据区的，如果截获外围变量，block就会存储在堆（heap）中。\n\n**非ARC模式下：**不论你声明的是局部block还是全局block，它们只要不截获外围变量，它们都会存储在全局数据区的，如果截获外围变量，block就会存储在栈(stack)中。\n\n**两种模式下的差别：**只要不截获外围变量block一律都存在全局数据区，只有截获了外围变量ARC和MRC才有所区别，而开发中往往我们的block都是后面这么一个情况，现在很少有人使用非ARC了吧，所以还是关注ARC的情况吧，即你只需要记住结论的第一条就好了。\n\n## block 的本质\nblock其本质是一个struct，也可以说是一个含有[自动变量](http://www.cnblogs.com/candyming/archive/2011/11/25/2262826.html)的匿名函数，通过clang编译器转换成C++代码可以看出，执行`clang -rewrite-objc 要转换的OC文件`命令，可以在同级目录下获得一个.cpp文件，里面就是转换后的OC代码，下面我会分三种情况给出OC代码及其对应的cpp代码。\n\n1、只是纯粹的在入口函数中定义了一个block，block中也没有引入外围变量\n\n```\n#import <Foundation/Foundation.h>\n\nint main(int argc, const char * argv[]) {\n\nvoid(^block)(void)=^{\nNSLog(@\"Block!!\");\n};\nblock();\n\nreturn 0;\n}\n```\n下面是转换后的C++代码，为了方便观察，我把文件最下方的有关block的代码摘录如下\n\n``` \n//block的结构体\nstruct __main_block_impl_0 {\n//block的实现\nstruct __block_impl impl;\n//block的描述（包含block的大小以及copy，dispose等）\nstruct __main_block_desc_0* Desc;\n//block的构造函数，对block结构体成员变量的初始化\n__main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags=0) {\nimpl.isa = &_NSConcreteStackBlock;\nimpl.Flags = flags;\nimpl.FuncPtr = fp;\nDesc = desc;\n}\n};\n\n//block内的代码实现部分\nstatic void __main_block_func_0(struct __main_block_impl_0 *__cself) {\n\nNSLog((NSString *)&__NSConstantStringImpl__var_folders_1q_hr0kg_v15rj7ry_618ljfldr0000gn_T_hellow_a5b27a_mi_0);\n}\n\n//block的描述，包含block的大小以及copy，dispose\nstatic struct __main_block_desc_0 {\nsize_t reserved;\nsize_t Block_size;\n} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0)};\n\n//OC中的main函数\nint main(int argc, char * argv[]) {\n\nvoid(*block)(void)=((void (*)())&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA));\n((void (*)(__block_impl *))((__block_impl *)block)->FuncPtr)((__block_impl *)block);\nreturn 0;\n}\n\n```\n2、在入口函数中定义了一个block，并在block中引入外围整型变量i\n\n```\n#import <Foundation/Foundation.h>\n\nint main(int argc, const char * argv[]) {\n\n//自动变量i\nint i = 10;\nvoid(^block)(void)=^{\n\nNSLog(@\"Block!!---%d\",i);\n};\nblock();\n\nreturn 0;\n}\n```\n转换后的cpp代码\n\n```\nstruct __main_block_impl_0 {\nstruct __block_impl impl;\nstruct __main_block_desc_0* Desc;\n//这是block捕获的变量\nint i; \n__main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _i, int flags=0) : i(_i) {\nimpl.isa = &_NSConcreteStackBlock;\nimpl.Flags = flags;\nimpl.FuncPtr = fp;\nDesc = desc;\n}\n};\n\nstatic void __main_block_func_0(struct __main_block_impl_0 *__cself) {\nint i = __cself->i; // bound by copy\nNSLog((NSString *)&__NSConstantStringImpl__var_folders_1q_hr0kg_v15rj7ry_618ljfldr0000gn_T_main_1b12e5_mi_0,i);\n}\n\nstatic struct __main_block_desc_0 {\nsize_t reserved;\nsize_t Block_size;\n} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0)};\n\nint main(int argc, const char * argv[]) {\n\nint i = 10;\nvoid(*block)(void)=((void (*)())&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, i));\n((void (*)(__block_impl *))((__block_impl *)block)->FuncPtr)((__block_impl *)block);\n\nreturn 0;\n}\n```\n3、在入口函数中定义了一个block，并在block中引入外围整型变量i，并且i用__block修饰\n\n```\n\n#import <Foundation/Foundation.h>\n\nint main(int argc, const char * argv[]) {\n\n__block int i = 10;\nvoid(^block)(void)=^{\ni += 1;\nNSLog(@\"Block!!---%d\",i);\n};\nblock();\n\nreturn 0;\n}\n```\n转换后的cpp代码\n\n```\n//存储block截获的外围变量的一个结构体\nstruct __Block_byref_i_0 {\nvoid *__isa;\n__Block_byref_i_0 *__forwarding;\nint __flags;\nint __size;\nint i;\n};\n\nstruct __main_block_impl_0 {\nstruct __block_impl impl;\nstruct __main_block_desc_0* Desc;\n//这是block捕获的变量\n__Block_byref_i_0 *i; // by ref\n__main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_i_0 *_i, int flags=0) : i(_i->__forwarding) {\nimpl.isa = &_NSConcreteStackBlock;\nimpl.Flags = flags;\nimpl.FuncPtr = fp;\nDesc = desc;\n}\n};\n\nstatic void __main_block_func_0(struct __main_block_impl_0 *__cself) {\n__Block_byref_i_0 *i = __cself->i; // bound by ref\n\n(i->__forwarding->i) += 1;\nNSLog((NSString *)&__NSConstantStringImpl__var_folders_1q_hr0kg_v15rj7ry_618ljfldr0000gn_T_main_10e8d1_mi_0,(i->__forwarding->i));\n}\n\n//下面两个指针函数是__main_block_desc_0结构体中的函数指针的实现，前者是要保留block截获的对象，后者则将之释放\n\nstatic void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) {_Block_object_assign((void*)&dst->i, (void*)src->i, 8/*BLOCK_FIELD_IS_BYREF*/);}\n\nstatic void __main_block_dispose_0(struct __main_block_impl_0*src) {_Block_object_dispose((void*)src->i, 8/*BLOCK_FIELD_IS_BYREF*/);}\n\n//block的描述\nstatic struct __main_block_desc_0 {\nsize_t reserved;\nsize_t Block_size;\nvoid (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);\nvoid (*dispose)(struct __main_block_impl_0*);\n} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0};\n\n//主函数\nint main(int argc, const char * argv[]) {\n\n__attribute__((__blocks__(byref))) __Block_byref_i_0 i = {(void*)0,(__Block_byref_i_0 *)&i, 0, sizeof(__Block_byref_i_0), 10};\nvoid(*block)(void)=((void (*)())&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, (__Block_byref_i_0 *)&i, 570425344));\n((void (*)(__block_impl *))((__block_impl *)block)->FuncPtr)((__block_impl *)block);\n\nreturn 0;\n}\n```\n第一种和第二种比较可知，当block截获外围变量时，block会把截获的变量注册成为自己的成员变量，这也是为什么block不能直接修改截获的变量的原因，因为在block内操作的外围变量其实是block的同名的成员变量。\n\n第一种和第三种比较可知，当block截获外围变量时，block会把截获的变量封装成`__Block_byref_i_0`结构体，并把结构体指针变量注册为自己的成员变量。\n\n被`__block`修饰的外围变量会变成堆变量，这样这个外围变量就不会随函数的结束而被释放了，`__Block_byref_i_0`结构体i指针变量中有一个指向自己的`__forwarding`指针，通过`i->__forwarding->i`来修改存在堆中的外围变量。\n","source":"_posts/block.md","raw":"---\ntitle: Block深入理解\ncategories: iOS\ntags: [block]\n\n---\n## block 你应该了解的知识\n为什么不把本部分放到本质部分的下面呢，我以为实用为大，还是先把block的使用及其注意点写在前面吧。\n\n1、为了方便声明block类型的变量，我们一般用typedef `typedef void (^Block)(void)`给block类型起个别名，这样我们就可以直接按如下方式声明block变量了。\n\n```\ntypedef void (^Block)(void);\nint main(int argc, const char * argv[]) {\n//这样声明\nBlock block = ^{};\n//而不是这样\n//void(^block)(void)=^{};\n\nreturn 0;\n}\n```\n2、在非ARC情况下，定义块的时候（无论是全局块还是局部块），其所占的内存区域是分配在栈中的。如下声明了一个block，如下面的代码就有危险，在条件语句实现的两个block都分配在栈内存中，于是这两个块只在对应的条件语句范围内有效，这样写的代码可以编译，但是运行起来却是时而对时儿错，若编译器未复写待执行的块，则程序正常运行，若复写则程序奔溃。\n\n```\nvoid (^block)();\nif(/*some condition*/){\nblock = ^{\nNSLog(@\"Block A\");\n};\n}else{\nblock = ^{\nNSLog(@\"Block B\");\n};\n}\nblock();\n```\n应该按这样的姿势写\n\n```\nvoid (^block)();\nif(/*some condition*/){\nblock = [^{\nNSLog(@\"Block A\");\n} copy];\n}else{\nblock = [^{\nNSLog(@\"Block B\");\n} copy];\n}\nblock();\n```\n\n3、同理2，将block声明为属性的时候，要用copy，还要注意如果你不确定你生命的这个block属性会不会被其他线程修改，你就用atomic加个原子锁，这样就线程安全了\n\n```\n@property (copy) Block block; //属性默认就是atomic\n\n```\n\n4、调用block的时候，有些童鞋的姿势不太对，假如我声明了一个block属性，正确调用姿势如下\n\n```\nBlock block  = self.block;\nif(block){\nblock();\n}\n```\n大部分童鞋会按下面这样写，那些连判断都不做的童鞋我就不批评你了，回去面壁去\n\n```\nif(self.block){\n\n//我是其他线程，我要这里要捣乱\n\nblock();\n}\n\n```\n\n上面的写法为什么不妥呢，因为即使self.block当时存在，如果另一个线程在该线程执行到我注释的那一行的时候把block置空了咋办，你再调用是不是就得到了一个完美的闪退，但是我如果把self.block 赋值给了一个局部变量的话，其他线程修改的是self.block而修改不了这个零时变量，所以上面的那种姿势不太稳妥。如果你看过AF的源码你就会发现，歪果仁就是按着我说的上面的正确姿势写的。\n\n5、为什么用了__block就可以修改所截获的变量了？\n\n因为block的特性，编译器不允许在block内直接修改所捕获的变量，但是我们可以修改`__block`修饰的自动变量，因为用`__block`修饰过之后，原先存储在栈中的变量就变成了存在堆中了，查看用clang过后的cpp文件你会发现在block中多了一个与该变量同名的`__Block_byref_i_0`结构体的指针变量，其中包含了存储在堆中的那个变量，可以通过结构体指针变量来直接更改变量的值，而没有用`__block`修饰的变量，block会把截获的变量copy为自己的一个变量。\n\n6、避免循环引用，如果你把一个block声明成了对象的一个属性，那么该对象就会持有这个block，如果在该对象中要实现block属性的话，用到self的时候要用__weak修饰过的，不然会循环引用。\n\n7、block的存储位置，栈、堆、全局数据区（强调一下如非特殊说明，block都是函数中实现）\nblock是否截获外围变量会影响他的存储区域的。\n\n7.1 下图是ARC模式下执行的代码\n![ARC下的block.png](http://upload-images.jianshu.io/upload_images/1229960-46005086cdd8bc09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000)\n7.2 下图是非ARC模式下执行的代码\n![MRC下的block.png](http://upload-images.jianshu.io/upload_images/1229960-5c079f6944335315.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000)\n\n解释一下上面的结果，学过C的都知道，malloc是分配到堆中了，global是分配到全局数据区了。\n\n7.3.1 MRC下此种写法Xcode会报错，但是如果不引用外围变量的话就没事，如果你仔细看7.1与7.2的介绍，你就知道原因了，不过我还是想说一下。因为在MRC情况下引入外围变量时，此种写法的block存在栈里面，而该函数的却返回了block，return标志着一个函数的结束，所以在return的时候block会被释放而报错，在MRC情况下不引入外围变量的话，此种写法的block存在全局数据区里，所以没问题。\n\n![MRC下此种写法报错.png](http://upload-images.jianshu.io/upload_images/1229960-925bdc8941a771d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800)\n7.3.2 ARC下，无论引不引入外围变量，都没事，不引入返回的block存在全局数据区，引入的话存在堆中。就不截图了。\n\n7.4 下面这种情况，ARC与MRC下block都存储在全局数据区，这种情况不常出现，一般我们都是在函数中来是实现block的。\n\n![ARC与MRC下都存储在全局数据区.png](http://upload-images.jianshu.io/upload_images/1229960-e11c0f8b876f7297.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000)\n\n7.5 总结（强调一下如非特殊说明，block都是函数中实现）：\n\n**ARC模式下：**不论你声明的是局部block还是全局block，它们只要不截获外围变量，它们都会存储在全局数据区的，如果截获外围变量，block就会存储在堆（heap）中。\n\n**非ARC模式下：**不论你声明的是局部block还是全局block，它们只要不截获外围变量，它们都会存储在全局数据区的，如果截获外围变量，block就会存储在栈(stack)中。\n\n**两种模式下的差别：**只要不截获外围变量block一律都存在全局数据区，只有截获了外围变量ARC和MRC才有所区别，而开发中往往我们的block都是后面这么一个情况，现在很少有人使用非ARC了吧，所以还是关注ARC的情况吧，即你只需要记住结论的第一条就好了。\n\n## block 的本质\nblock其本质是一个struct，也可以说是一个含有[自动变量](http://www.cnblogs.com/candyming/archive/2011/11/25/2262826.html)的匿名函数，通过clang编译器转换成C++代码可以看出，执行`clang -rewrite-objc 要转换的OC文件`命令，可以在同级目录下获得一个.cpp文件，里面就是转换后的OC代码，下面我会分三种情况给出OC代码及其对应的cpp代码。\n\n1、只是纯粹的在入口函数中定义了一个block，block中也没有引入外围变量\n\n```\n#import <Foundation/Foundation.h>\n\nint main(int argc, const char * argv[]) {\n\nvoid(^block)(void)=^{\nNSLog(@\"Block!!\");\n};\nblock();\n\nreturn 0;\n}\n```\n下面是转换后的C++代码，为了方便观察，我把文件最下方的有关block的代码摘录如下\n\n``` \n//block的结构体\nstruct __main_block_impl_0 {\n//block的实现\nstruct __block_impl impl;\n//block的描述（包含block的大小以及copy，dispose等）\nstruct __main_block_desc_0* Desc;\n//block的构造函数，对block结构体成员变量的初始化\n__main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags=0) {\nimpl.isa = &_NSConcreteStackBlock;\nimpl.Flags = flags;\nimpl.FuncPtr = fp;\nDesc = desc;\n}\n};\n\n//block内的代码实现部分\nstatic void __main_block_func_0(struct __main_block_impl_0 *__cself) {\n\nNSLog((NSString *)&__NSConstantStringImpl__var_folders_1q_hr0kg_v15rj7ry_618ljfldr0000gn_T_hellow_a5b27a_mi_0);\n}\n\n//block的描述，包含block的大小以及copy，dispose\nstatic struct __main_block_desc_0 {\nsize_t reserved;\nsize_t Block_size;\n} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0)};\n\n//OC中的main函数\nint main(int argc, char * argv[]) {\n\nvoid(*block)(void)=((void (*)())&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA));\n((void (*)(__block_impl *))((__block_impl *)block)->FuncPtr)((__block_impl *)block);\nreturn 0;\n}\n\n```\n2、在入口函数中定义了一个block，并在block中引入外围整型变量i\n\n```\n#import <Foundation/Foundation.h>\n\nint main(int argc, const char * argv[]) {\n\n//自动变量i\nint i = 10;\nvoid(^block)(void)=^{\n\nNSLog(@\"Block!!---%d\",i);\n};\nblock();\n\nreturn 0;\n}\n```\n转换后的cpp代码\n\n```\nstruct __main_block_impl_0 {\nstruct __block_impl impl;\nstruct __main_block_desc_0* Desc;\n//这是block捕获的变量\nint i; \n__main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _i, int flags=0) : i(_i) {\nimpl.isa = &_NSConcreteStackBlock;\nimpl.Flags = flags;\nimpl.FuncPtr = fp;\nDesc = desc;\n}\n};\n\nstatic void __main_block_func_0(struct __main_block_impl_0 *__cself) {\nint i = __cself->i; // bound by copy\nNSLog((NSString *)&__NSConstantStringImpl__var_folders_1q_hr0kg_v15rj7ry_618ljfldr0000gn_T_main_1b12e5_mi_0,i);\n}\n\nstatic struct __main_block_desc_0 {\nsize_t reserved;\nsize_t Block_size;\n} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0)};\n\nint main(int argc, const char * argv[]) {\n\nint i = 10;\nvoid(*block)(void)=((void (*)())&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, i));\n((void (*)(__block_impl *))((__block_impl *)block)->FuncPtr)((__block_impl *)block);\n\nreturn 0;\n}\n```\n3、在入口函数中定义了一个block，并在block中引入外围整型变量i，并且i用__block修饰\n\n```\n\n#import <Foundation/Foundation.h>\n\nint main(int argc, const char * argv[]) {\n\n__block int i = 10;\nvoid(^block)(void)=^{\ni += 1;\nNSLog(@\"Block!!---%d\",i);\n};\nblock();\n\nreturn 0;\n}\n```\n转换后的cpp代码\n\n```\n//存储block截获的外围变量的一个结构体\nstruct __Block_byref_i_0 {\nvoid *__isa;\n__Block_byref_i_0 *__forwarding;\nint __flags;\nint __size;\nint i;\n};\n\nstruct __main_block_impl_0 {\nstruct __block_impl impl;\nstruct __main_block_desc_0* Desc;\n//这是block捕获的变量\n__Block_byref_i_0 *i; // by ref\n__main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_i_0 *_i, int flags=0) : i(_i->__forwarding) {\nimpl.isa = &_NSConcreteStackBlock;\nimpl.Flags = flags;\nimpl.FuncPtr = fp;\nDesc = desc;\n}\n};\n\nstatic void __main_block_func_0(struct __main_block_impl_0 *__cself) {\n__Block_byref_i_0 *i = __cself->i; // bound by ref\n\n(i->__forwarding->i) += 1;\nNSLog((NSString *)&__NSConstantStringImpl__var_folders_1q_hr0kg_v15rj7ry_618ljfldr0000gn_T_main_10e8d1_mi_0,(i->__forwarding->i));\n}\n\n//下面两个指针函数是__main_block_desc_0结构体中的函数指针的实现，前者是要保留block截获的对象，后者则将之释放\n\nstatic void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) {_Block_object_assign((void*)&dst->i, (void*)src->i, 8/*BLOCK_FIELD_IS_BYREF*/);}\n\nstatic void __main_block_dispose_0(struct __main_block_impl_0*src) {_Block_object_dispose((void*)src->i, 8/*BLOCK_FIELD_IS_BYREF*/);}\n\n//block的描述\nstatic struct __main_block_desc_0 {\nsize_t reserved;\nsize_t Block_size;\nvoid (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);\nvoid (*dispose)(struct __main_block_impl_0*);\n} __main_block_desc_0_DATA = { 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0};\n\n//主函数\nint main(int argc, const char * argv[]) {\n\n__attribute__((__blocks__(byref))) __Block_byref_i_0 i = {(void*)0,(__Block_byref_i_0 *)&i, 0, sizeof(__Block_byref_i_0), 10};\nvoid(*block)(void)=((void (*)())&__main_block_impl_0((void *)__main_block_func_0, &__main_block_desc_0_DATA, (__Block_byref_i_0 *)&i, 570425344));\n((void (*)(__block_impl *))((__block_impl *)block)->FuncPtr)((__block_impl *)block);\n\nreturn 0;\n}\n```\n第一种和第二种比较可知，当block截获外围变量时，block会把截获的变量注册成为自己的成员变量，这也是为什么block不能直接修改截获的变量的原因，因为在block内操作的外围变量其实是block的同名的成员变量。\n\n第一种和第三种比较可知，当block截获外围变量时，block会把截获的变量封装成`__Block_byref_i_0`结构体，并把结构体指针变量注册为自己的成员变量。\n\n被`__block`修饰的外围变量会变成堆变量，这样这个外围变量就不会随函数的结束而被释放了，`__Block_byref_i_0`结构体i指针变量中有一个指向自己的`__forwarding`指针，通过`i->__forwarding->i`来修改存在堆中的外围变量。\n","slug":"block","published":1,"date":"2017-03-14T08:36:04.000Z","updated":"2017-03-25T05:11:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmeouzf001zv8tjnpk1yf4m","content":"<h2 id=\"block-你应该了解的知识\"><a href=\"#block-你应该了解的知识\" class=\"headerlink\" title=\"block 你应该了解的知识\"></a>block 你应该了解的知识</h2><p>为什么不把本部分放到本质部分的下面呢，我以为实用为大，还是先把block的使用及其注意点写在前面吧。</p>\n<p>1、为了方便声明block类型的变量，我们一般用typedef <code>typedef void (^Block)(void)</code>给block类型起个别名，这样我们就可以直接按如下方式声明block变量了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">typedef void (^Block)(void);</div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\">//这样声明</div><div class=\"line\">Block block = ^&#123;&#125;;</div><div class=\"line\">//而不是这样</div><div class=\"line\">//void(^block)(void)=^&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2、在非ARC情况下，定义块的时候（无论是全局块还是局部块），其所占的内存区域是分配在栈中的。如下声明了一个block，如下面的代码就有危险，在条件语句实现的两个block都分配在栈内存中，于是这两个块只在对应的条件语句范围内有效，这样写的代码可以编译，但是运行起来却是时而对时儿错，若编译器未复写待执行的块，则程序正常运行，若复写则程序奔溃。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">void (^block)();</div><div class=\"line\">if(/*some condition*/)&#123;</div><div class=\"line\">block = ^&#123;</div><div class=\"line\">NSLog(@&quot;Block A&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">&#125;else&#123;</div><div class=\"line\">block = ^&#123;</div><div class=\"line\">NSLog(@&quot;Block B&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">block();</div></pre></td></tr></table></figure>\n<p>应该按这样的姿势写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">void (^block)();</div><div class=\"line\">if(/*some condition*/)&#123;</div><div class=\"line\">block = [^&#123;</div><div class=\"line\">NSLog(@&quot;Block A&quot;);</div><div class=\"line\">&#125; copy];</div><div class=\"line\">&#125;else&#123;</div><div class=\"line\">block = [^&#123;</div><div class=\"line\">NSLog(@&quot;Block B&quot;);</div><div class=\"line\">&#125; copy];</div><div class=\"line\">&#125;</div><div class=\"line\">block();</div></pre></td></tr></table></figure>\n<p>3、同理2，将block声明为属性的时候，要用copy，还要注意如果你不确定你生命的这个block属性会不会被其他线程修改，你就用atomic加个原子锁，这样就线程安全了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@property (copy) Block block; //属性默认就是atomic</div></pre></td></tr></table></figure>\n<p>4、调用block的时候，有些童鞋的姿势不太对，假如我声明了一个block属性，正确调用姿势如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Block block  = self.block;</div><div class=\"line\">if(block)&#123;</div><div class=\"line\">block();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>大部分童鞋会按下面这样写，那些连判断都不做的童鞋我就不批评你了，回去面壁去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(self.block)&#123;</div><div class=\"line\"></div><div class=\"line\">//我是其他线程，我要这里要捣乱</div><div class=\"line\"></div><div class=\"line\">block();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的写法为什么不妥呢，因为即使self.block当时存在，如果另一个线程在该线程执行到我注释的那一行的时候把block置空了咋办，你再调用是不是就得到了一个完美的闪退，但是我如果把self.block 赋值给了一个局部变量的话，其他线程修改的是self.block而修改不了这个零时变量，所以上面的那种姿势不太稳妥。如果你看过AF的源码你就会发现，歪果仁就是按着我说的上面的正确姿势写的。</p>\n<p>5、为什么用了__block就可以修改所截获的变量了？</p>\n<p>因为block的特性，编译器不允许在block内直接修改所捕获的变量，但是我们可以修改<code>__block</code>修饰的自动变量，因为用<code>__block</code>修饰过之后，原先存储在栈中的变量就变成了存在堆中了，查看用clang过后的cpp文件你会发现在block中多了一个与该变量同名的<code>__Block_byref_i_0</code>结构体的指针变量，其中包含了存储在堆中的那个变量，可以通过结构体指针变量来直接更改变量的值，而没有用<code>__block</code>修饰的变量，block会把截获的变量copy为自己的一个变量。</p>\n<p>6、避免循环引用，如果你把一个block声明成了对象的一个属性，那么该对象就会持有这个block，如果在该对象中要实现block属性的话，用到self的时候要用__weak修饰过的，不然会循环引用。</p>\n<p>7、block的存储位置，栈、堆、全局数据区（强调一下如非特殊说明，block都是函数中实现）<br>block是否截获外围变量会影响他的存储区域的。</p>\n<p>7.1 下图是ARC模式下执行的代码<br><img src=\"http://upload-images.jianshu.io/upload_images/1229960-46005086cdd8bc09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000\" alt=\"ARC下的block.png\"><br>7.2 下图是非ARC模式下执行的代码<br><img src=\"http://upload-images.jianshu.io/upload_images/1229960-5c079f6944335315.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000\" alt=\"MRC下的block.png\"></p>\n<p>解释一下上面的结果，学过C的都知道，malloc是分配到堆中了，global是分配到全局数据区了。</p>\n<p>7.3.1 MRC下此种写法Xcode会报错，但是如果不引用外围变量的话就没事，如果你仔细看7.1与7.2的介绍，你就知道原因了，不过我还是想说一下。因为在MRC情况下引入外围变量时，此种写法的block存在栈里面，而该函数的却返回了block，return标志着一个函数的结束，所以在return的时候block会被释放而报错，在MRC情况下不引入外围变量的话，此种写法的block存在全局数据区里，所以没问题。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1229960-925bdc8941a771d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800\" alt=\"MRC下此种写法报错.png\"><br>7.3.2 ARC下，无论引不引入外围变量，都没事，不引入返回的block存在全局数据区，引入的话存在堆中。就不截图了。</p>\n<p>7.4 下面这种情况，ARC与MRC下block都存储在全局数据区，这种情况不常出现，一般我们都是在函数中来是实现block的。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1229960-e11c0f8b876f7297.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000\" alt=\"ARC与MRC下都存储在全局数据区.png\"></p>\n<p>7.5 总结（强调一下如非特殊说明，block都是函数中实现）：</p>\n<p><strong>ARC模式下：</strong>不论你声明的是局部block还是全局block，它们只要不截获外围变量，它们都会存储在全局数据区的，如果截获外围变量，block就会存储在堆（heap）中。</p>\n<p><strong>非ARC模式下：</strong>不论你声明的是局部block还是全局block，它们只要不截获外围变量，它们都会存储在全局数据区的，如果截获外围变量，block就会存储在栈(stack)中。</p>\n<p><strong>两种模式下的差别：</strong>只要不截获外围变量block一律都存在全局数据区，只有截获了外围变量ARC和MRC才有所区别，而开发中往往我们的block都是后面这么一个情况，现在很少有人使用非ARC了吧，所以还是关注ARC的情况吧，即你只需要记住结论的第一条就好了。</p>\n<h2 id=\"block-的本质\"><a href=\"#block-的本质\" class=\"headerlink\" title=\"block 的本质\"></a>block 的本质</h2><p>block其本质是一个struct，也可以说是一个含有<a href=\"http://www.cnblogs.com/candyming/archive/2011/11/25/2262826.html\" target=\"_blank\" rel=\"external\">自动变量</a>的匿名函数，通过clang编译器转换成C++代码可以看出，执行<code>clang -rewrite-objc 要转换的OC文件</code>命令，可以在同级目录下获得一个.cpp文件，里面就是转换后的OC代码，下面我会分三种情况给出OC代码及其对应的cpp代码。</p>\n<p>1、只是纯粹的在入口函数中定义了一个block，block中也没有引入外围变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\"></div><div class=\"line\">void(^block)(void)=^&#123;</div><div class=\"line\">NSLog(@&quot;Block!!&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">block();</div><div class=\"line\"></div><div class=\"line\">return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面是转换后的C++代码，为了方便观察，我把文件最下方的有关block的代码摘录如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">//block的结构体</div><div class=\"line\">struct __main_block_impl_0 &#123;</div><div class=\"line\">//block的实现</div><div class=\"line\">struct __block_impl impl;</div><div class=\"line\">//block的描述（包含block的大小以及copy，dispose等）</div><div class=\"line\">struct __main_block_desc_0* Desc;</div><div class=\"line\">//block的构造函数，对block结构体成员变量的初始化</div><div class=\"line\">__main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags=0) &#123;</div><div class=\"line\">impl.isa = &amp;_NSConcreteStackBlock;</div><div class=\"line\">impl.Flags = flags;</div><div class=\"line\">impl.FuncPtr = fp;</div><div class=\"line\">Desc = desc;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">//block内的代码实现部分</div><div class=\"line\">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</div><div class=\"line\"></div><div class=\"line\">NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_1q_hr0kg_v15rj7ry_618ljfldr0000gn_T_hellow_a5b27a_mi_0);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//block的描述，包含block的大小以及copy，dispose</div><div class=\"line\">static struct __main_block_desc_0 &#123;</div><div class=\"line\">size_t reserved;</div><div class=\"line\">size_t Block_size;</div><div class=\"line\">&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0)&#125;;</div><div class=\"line\"></div><div class=\"line\">//OC中的main函数</div><div class=\"line\">int main(int argc, char * argv[]) &#123;</div><div class=\"line\"></div><div class=\"line\">void(*block)(void)=((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA));</div><div class=\"line\">((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</div><div class=\"line\">return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2、在入口函数中定义了一个block，并在block中引入外围整型变量i</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\"></div><div class=\"line\">//自动变量i</div><div class=\"line\">int i = 10;</div><div class=\"line\">void(^block)(void)=^&#123;</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;Block!!---%d&quot;,i);</div><div class=\"line\">&#125;;</div><div class=\"line\">block();</div><div class=\"line\"></div><div class=\"line\">return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>转换后的cpp代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct __main_block_impl_0 &#123;</div><div class=\"line\">struct __block_impl impl;</div><div class=\"line\">struct __main_block_desc_0* Desc;</div><div class=\"line\">//这是block捕获的变量</div><div class=\"line\">int i; </div><div class=\"line\">__main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _i, int flags=0) : i(_i) &#123;</div><div class=\"line\">impl.isa = &amp;_NSConcreteStackBlock;</div><div class=\"line\">impl.Flags = flags;</div><div class=\"line\">impl.FuncPtr = fp;</div><div class=\"line\">Desc = desc;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</div><div class=\"line\">int i = __cself-&gt;i; // bound by copy</div><div class=\"line\">NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_1q_hr0kg_v15rj7ry_618ljfldr0000gn_T_main_1b12e5_mi_0,i);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">static struct __main_block_desc_0 &#123;</div><div class=\"line\">size_t reserved;</div><div class=\"line\">size_t Block_size;</div><div class=\"line\">&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0)&#125;;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\"></div><div class=\"line\">int i = 10;</div><div class=\"line\">void(*block)(void)=((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, i));</div><div class=\"line\">((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</div><div class=\"line\"></div><div class=\"line\">return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3、在入口函数中定义了一个block，并在block中引入外围整型变量i，并且i用__block修饰</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\"></div><div class=\"line\">__block int i = 10;</div><div class=\"line\">void(^block)(void)=^&#123;</div><div class=\"line\">i += 1;</div><div class=\"line\">NSLog(@&quot;Block!!---%d&quot;,i);</div><div class=\"line\">&#125;;</div><div class=\"line\">block();</div><div class=\"line\"></div><div class=\"line\">return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>转换后的cpp代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">//存储block截获的外围变量的一个结构体</div><div class=\"line\">struct __Block_byref_i_0 &#123;</div><div class=\"line\">void *__isa;</div><div class=\"line\">__Block_byref_i_0 *__forwarding;</div><div class=\"line\">int __flags;</div><div class=\"line\">int __size;</div><div class=\"line\">int i;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">struct __main_block_impl_0 &#123;</div><div class=\"line\">struct __block_impl impl;</div><div class=\"line\">struct __main_block_desc_0* Desc;</div><div class=\"line\">//这是block捕获的变量</div><div class=\"line\">__Block_byref_i_0 *i; // by ref</div><div class=\"line\">__main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_i_0 *_i, int flags=0) : i(_i-&gt;__forwarding) &#123;</div><div class=\"line\">impl.isa = &amp;_NSConcreteStackBlock;</div><div class=\"line\">impl.Flags = flags;</div><div class=\"line\">impl.FuncPtr = fp;</div><div class=\"line\">Desc = desc;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</div><div class=\"line\">__Block_byref_i_0 *i = __cself-&gt;i; // bound by ref</div><div class=\"line\"></div><div class=\"line\">(i-&gt;__forwarding-&gt;i) += 1;</div><div class=\"line\">NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_1q_hr0kg_v15rj7ry_618ljfldr0000gn_T_main_10e8d1_mi_0,(i-&gt;__forwarding-&gt;i));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//下面两个指针函数是__main_block_desc_0结构体中的函数指针的实现，前者是要保留block截获的对象，后者则将之释放</div><div class=\"line\"></div><div class=\"line\">static void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;i, (void*)src-&gt;i, 8/*BLOCK_FIELD_IS_BYREF*/);&#125;</div><div class=\"line\"></div><div class=\"line\">static void __main_block_dispose_0(struct __main_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;i, 8/*BLOCK_FIELD_IS_BYREF*/);&#125;</div><div class=\"line\"></div><div class=\"line\">//block的描述</div><div class=\"line\">static struct __main_block_desc_0 &#123;</div><div class=\"line\">size_t reserved;</div><div class=\"line\">size_t Block_size;</div><div class=\"line\">void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);</div><div class=\"line\">void (*dispose)(struct __main_block_impl_0*);</div><div class=\"line\">&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</div><div class=\"line\"></div><div class=\"line\">//主函数</div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\"></div><div class=\"line\">__attribute__((__blocks__(byref))) __Block_byref_i_0 i = &#123;(void*)0,(__Block_byref_i_0 *)&amp;i, 0, sizeof(__Block_byref_i_0), 10&#125;;</div><div class=\"line\">void(*block)(void)=((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_i_0 *)&amp;i, 570425344));</div><div class=\"line\">((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</div><div class=\"line\"></div><div class=\"line\">return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第一种和第二种比较可知，当block截获外围变量时，block会把截获的变量注册成为自己的成员变量，这也是为什么block不能直接修改截获的变量的原因，因为在block内操作的外围变量其实是block的同名的成员变量。</p>\n<p>第一种和第三种比较可知，当block截获外围变量时，block会把截获的变量封装成<code>__Block_byref_i_0</code>结构体，并把结构体指针变量注册为自己的成员变量。</p>\n<p>被<code>__block</code>修饰的外围变量会变成堆变量，这样这个外围变量就不会随函数的结束而被释放了，<code>__Block_byref_i_0</code>结构体i指针变量中有一个指向自己的<code>__forwarding</code>指针，通过<code>i-&gt;__forwarding-&gt;i</code>来修改存在堆中的外围变量。</p>\n","excerpt":"","more":"<h2 id=\"block-你应该了解的知识\"><a href=\"#block-你应该了解的知识\" class=\"headerlink\" title=\"block 你应该了解的知识\"></a>block 你应该了解的知识</h2><p>为什么不把本部分放到本质部分的下面呢，我以为实用为大，还是先把block的使用及其注意点写在前面吧。</p>\n<p>1、为了方便声明block类型的变量，我们一般用typedef <code>typedef void (^Block)(void)</code>给block类型起个别名，这样我们就可以直接按如下方式声明block变量了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">typedef void (^Block)(void);</div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\">//这样声明</div><div class=\"line\">Block block = ^&#123;&#125;;</div><div class=\"line\">//而不是这样</div><div class=\"line\">//void(^block)(void)=^&#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2、在非ARC情况下，定义块的时候（无论是全局块还是局部块），其所占的内存区域是分配在栈中的。如下声明了一个block，如下面的代码就有危险，在条件语句实现的两个block都分配在栈内存中，于是这两个块只在对应的条件语句范围内有效，这样写的代码可以编译，但是运行起来却是时而对时儿错，若编译器未复写待执行的块，则程序正常运行，若复写则程序奔溃。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">void (^block)();</div><div class=\"line\">if(/*some condition*/)&#123;</div><div class=\"line\">block = ^&#123;</div><div class=\"line\">NSLog(@&quot;Block A&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">&#125;else&#123;</div><div class=\"line\">block = ^&#123;</div><div class=\"line\">NSLog(@&quot;Block B&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">block();</div></pre></td></tr></table></figure>\n<p>应该按这样的姿势写</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">void (^block)();</div><div class=\"line\">if(/*some condition*/)&#123;</div><div class=\"line\">block = [^&#123;</div><div class=\"line\">NSLog(@&quot;Block A&quot;);</div><div class=\"line\">&#125; copy];</div><div class=\"line\">&#125;else&#123;</div><div class=\"line\">block = [^&#123;</div><div class=\"line\">NSLog(@&quot;Block B&quot;);</div><div class=\"line\">&#125; copy];</div><div class=\"line\">&#125;</div><div class=\"line\">block();</div></pre></td></tr></table></figure>\n<p>3、同理2，将block声明为属性的时候，要用copy，还要注意如果你不确定你生命的这个block属性会不会被其他线程修改，你就用atomic加个原子锁，这样就线程安全了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">@property (copy) Block block; //属性默认就是atomic</div></pre></td></tr></table></figure>\n<p>4、调用block的时候，有些童鞋的姿势不太对，假如我声明了一个block属性，正确调用姿势如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Block block  = self.block;</div><div class=\"line\">if(block)&#123;</div><div class=\"line\">block();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>大部分童鞋会按下面这样写，那些连判断都不做的童鞋我就不批评你了，回去面壁去</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(self.block)&#123;</div><div class=\"line\"></div><div class=\"line\">//我是其他线程，我要这里要捣乱</div><div class=\"line\"></div><div class=\"line\">block();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的写法为什么不妥呢，因为即使self.block当时存在，如果另一个线程在该线程执行到我注释的那一行的时候把block置空了咋办，你再调用是不是就得到了一个完美的闪退，但是我如果把self.block 赋值给了一个局部变量的话，其他线程修改的是self.block而修改不了这个零时变量，所以上面的那种姿势不太稳妥。如果你看过AF的源码你就会发现，歪果仁就是按着我说的上面的正确姿势写的。</p>\n<p>5、为什么用了__block就可以修改所截获的变量了？</p>\n<p>因为block的特性，编译器不允许在block内直接修改所捕获的变量，但是我们可以修改<code>__block</code>修饰的自动变量，因为用<code>__block</code>修饰过之后，原先存储在栈中的变量就变成了存在堆中了，查看用clang过后的cpp文件你会发现在block中多了一个与该变量同名的<code>__Block_byref_i_0</code>结构体的指针变量，其中包含了存储在堆中的那个变量，可以通过结构体指针变量来直接更改变量的值，而没有用<code>__block</code>修饰的变量，block会把截获的变量copy为自己的一个变量。</p>\n<p>6、避免循环引用，如果你把一个block声明成了对象的一个属性，那么该对象就会持有这个block，如果在该对象中要实现block属性的话，用到self的时候要用__weak修饰过的，不然会循环引用。</p>\n<p>7、block的存储位置，栈、堆、全局数据区（强调一下如非特殊说明，block都是函数中实现）<br>block是否截获外围变量会影响他的存储区域的。</p>\n<p>7.1 下图是ARC模式下执行的代码<br><img src=\"http://upload-images.jianshu.io/upload_images/1229960-46005086cdd8bc09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000\" alt=\"ARC下的block.png\"><br>7.2 下图是非ARC模式下执行的代码<br><img src=\"http://upload-images.jianshu.io/upload_images/1229960-5c079f6944335315.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000\" alt=\"MRC下的block.png\"></p>\n<p>解释一下上面的结果，学过C的都知道，malloc是分配到堆中了，global是分配到全局数据区了。</p>\n<p>7.3.1 MRC下此种写法Xcode会报错，但是如果不引用外围变量的话就没事，如果你仔细看7.1与7.2的介绍，你就知道原因了，不过我还是想说一下。因为在MRC情况下引入外围变量时，此种写法的block存在栈里面，而该函数的却返回了block，return标志着一个函数的结束，所以在return的时候block会被释放而报错，在MRC情况下不引入外围变量的话，此种写法的block存在全局数据区里，所以没问题。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1229960-925bdc8941a771d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800\" alt=\"MRC下此种写法报错.png\"><br>7.3.2 ARC下，无论引不引入外围变量，都没事，不引入返回的block存在全局数据区，引入的话存在堆中。就不截图了。</p>\n<p>7.4 下面这种情况，ARC与MRC下block都存储在全局数据区，这种情况不常出现，一般我们都是在函数中来是实现block的。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1229960-e11c0f8b876f7297.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000\" alt=\"ARC与MRC下都存储在全局数据区.png\"></p>\n<p>7.5 总结（强调一下如非特殊说明，block都是函数中实现）：</p>\n<p><strong>ARC模式下：</strong>不论你声明的是局部block还是全局block，它们只要不截获外围变量，它们都会存储在全局数据区的，如果截获外围变量，block就会存储在堆（heap）中。</p>\n<p><strong>非ARC模式下：</strong>不论你声明的是局部block还是全局block，它们只要不截获外围变量，它们都会存储在全局数据区的，如果截获外围变量，block就会存储在栈(stack)中。</p>\n<p><strong>两种模式下的差别：</strong>只要不截获外围变量block一律都存在全局数据区，只有截获了外围变量ARC和MRC才有所区别，而开发中往往我们的block都是后面这么一个情况，现在很少有人使用非ARC了吧，所以还是关注ARC的情况吧，即你只需要记住结论的第一条就好了。</p>\n<h2 id=\"block-的本质\"><a href=\"#block-的本质\" class=\"headerlink\" title=\"block 的本质\"></a>block 的本质</h2><p>block其本质是一个struct，也可以说是一个含有<a href=\"http://www.cnblogs.com/candyming/archive/2011/11/25/2262826.html\">自动变量</a>的匿名函数，通过clang编译器转换成C++代码可以看出，执行<code>clang -rewrite-objc 要转换的OC文件</code>命令，可以在同级目录下获得一个.cpp文件，里面就是转换后的OC代码，下面我会分三种情况给出OC代码及其对应的cpp代码。</p>\n<p>1、只是纯粹的在入口函数中定义了一个block，block中也没有引入外围变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\"></div><div class=\"line\">void(^block)(void)=^&#123;</div><div class=\"line\">NSLog(@&quot;Block!!&quot;);</div><div class=\"line\">&#125;;</div><div class=\"line\">block();</div><div class=\"line\"></div><div class=\"line\">return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面是转换后的C++代码，为了方便观察，我把文件最下方的有关block的代码摘录如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">//block的结构体</div><div class=\"line\">struct __main_block_impl_0 &#123;</div><div class=\"line\">//block的实现</div><div class=\"line\">struct __block_impl impl;</div><div class=\"line\">//block的描述（包含block的大小以及copy，dispose等）</div><div class=\"line\">struct __main_block_desc_0* Desc;</div><div class=\"line\">//block的构造函数，对block结构体成员变量的初始化</div><div class=\"line\">__main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags=0) &#123;</div><div class=\"line\">impl.isa = &amp;_NSConcreteStackBlock;</div><div class=\"line\">impl.Flags = flags;</div><div class=\"line\">impl.FuncPtr = fp;</div><div class=\"line\">Desc = desc;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">//block内的代码实现部分</div><div class=\"line\">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</div><div class=\"line\"></div><div class=\"line\">NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_1q_hr0kg_v15rj7ry_618ljfldr0000gn_T_hellow_a5b27a_mi_0);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//block的描述，包含block的大小以及copy，dispose</div><div class=\"line\">static struct __main_block_desc_0 &#123;</div><div class=\"line\">size_t reserved;</div><div class=\"line\">size_t Block_size;</div><div class=\"line\">&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0)&#125;;</div><div class=\"line\"></div><div class=\"line\">//OC中的main函数</div><div class=\"line\">int main(int argc, char * argv[]) &#123;</div><div class=\"line\"></div><div class=\"line\">void(*block)(void)=((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA));</div><div class=\"line\">((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</div><div class=\"line\">return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2、在入口函数中定义了一个block，并在block中引入外围整型变量i</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\"></div><div class=\"line\">//自动变量i</div><div class=\"line\">int i = 10;</div><div class=\"line\">void(^block)(void)=^&#123;</div><div class=\"line\"></div><div class=\"line\">NSLog(@&quot;Block!!---%d&quot;,i);</div><div class=\"line\">&#125;;</div><div class=\"line\">block();</div><div class=\"line\"></div><div class=\"line\">return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>转换后的cpp代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">struct __main_block_impl_0 &#123;</div><div class=\"line\">struct __block_impl impl;</div><div class=\"line\">struct __main_block_desc_0* Desc;</div><div class=\"line\">//这是block捕获的变量</div><div class=\"line\">int i; </div><div class=\"line\">__main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _i, int flags=0) : i(_i) &#123;</div><div class=\"line\">impl.isa = &amp;_NSConcreteStackBlock;</div><div class=\"line\">impl.Flags = flags;</div><div class=\"line\">impl.FuncPtr = fp;</div><div class=\"line\">Desc = desc;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</div><div class=\"line\">int i = __cself-&gt;i; // bound by copy</div><div class=\"line\">NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_1q_hr0kg_v15rj7ry_618ljfldr0000gn_T_main_1b12e5_mi_0,i);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">static struct __main_block_desc_0 &#123;</div><div class=\"line\">size_t reserved;</div><div class=\"line\">size_t Block_size;</div><div class=\"line\">&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0)&#125;;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\"></div><div class=\"line\">int i = 10;</div><div class=\"line\">void(*block)(void)=((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, i));</div><div class=\"line\">((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</div><div class=\"line\"></div><div class=\"line\">return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3、在入口函数中定义了一个block，并在block中引入外围整型变量i，并且i用__block修饰</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">#import &lt;Foundation/Foundation.h&gt;</div><div class=\"line\"></div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\"></div><div class=\"line\">__block int i = 10;</div><div class=\"line\">void(^block)(void)=^&#123;</div><div class=\"line\">i += 1;</div><div class=\"line\">NSLog(@&quot;Block!!---%d&quot;,i);</div><div class=\"line\">&#125;;</div><div class=\"line\">block();</div><div class=\"line\"></div><div class=\"line\">return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>转换后的cpp代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\">//存储block截获的外围变量的一个结构体</div><div class=\"line\">struct __Block_byref_i_0 &#123;</div><div class=\"line\">void *__isa;</div><div class=\"line\">__Block_byref_i_0 *__forwarding;</div><div class=\"line\">int __flags;</div><div class=\"line\">int __size;</div><div class=\"line\">int i;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">struct __main_block_impl_0 &#123;</div><div class=\"line\">struct __block_impl impl;</div><div class=\"line\">struct __main_block_desc_0* Desc;</div><div class=\"line\">//这是block捕获的变量</div><div class=\"line\">__Block_byref_i_0 *i; // by ref</div><div class=\"line\">__main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, __Block_byref_i_0 *_i, int flags=0) : i(_i-&gt;__forwarding) &#123;</div><div class=\"line\">impl.isa = &amp;_NSConcreteStackBlock;</div><div class=\"line\">impl.Flags = flags;</div><div class=\"line\">impl.FuncPtr = fp;</div><div class=\"line\">Desc = desc;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</div><div class=\"line\">__Block_byref_i_0 *i = __cself-&gt;i; // bound by ref</div><div class=\"line\"></div><div class=\"line\">(i-&gt;__forwarding-&gt;i) += 1;</div><div class=\"line\">NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_1q_hr0kg_v15rj7ry_618ljfldr0000gn_T_main_10e8d1_mi_0,(i-&gt;__forwarding-&gt;i));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//下面两个指针函数是__main_block_desc_0结构体中的函数指针的实现，前者是要保留block截获的对象，后者则将之释放</div><div class=\"line\"></div><div class=\"line\">static void __main_block_copy_0(struct __main_block_impl_0*dst, struct __main_block_impl_0*src) &#123;_Block_object_assign((void*)&amp;dst-&gt;i, (void*)src-&gt;i, 8/*BLOCK_FIELD_IS_BYREF*/);&#125;</div><div class=\"line\"></div><div class=\"line\">static void __main_block_dispose_0(struct __main_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;i, 8/*BLOCK_FIELD_IS_BYREF*/);&#125;</div><div class=\"line\"></div><div class=\"line\">//block的描述</div><div class=\"line\">static struct __main_block_desc_0 &#123;</div><div class=\"line\">size_t reserved;</div><div class=\"line\">size_t Block_size;</div><div class=\"line\">void (*copy)(struct __main_block_impl_0*, struct __main_block_impl_0*);</div><div class=\"line\">void (*dispose)(struct __main_block_impl_0*);</div><div class=\"line\">&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</div><div class=\"line\"></div><div class=\"line\">//主函数</div><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\"></div><div class=\"line\">__attribute__((__blocks__(byref))) __Block_byref_i_0 i = &#123;(void*)0,(__Block_byref_i_0 *)&amp;i, 0, sizeof(__Block_byref_i_0), 10&#125;;</div><div class=\"line\">void(*block)(void)=((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_i_0 *)&amp;i, 570425344));</div><div class=\"line\">((void (*)(__block_impl *))((__block_impl *)block)-&gt;FuncPtr)((__block_impl *)block);</div><div class=\"line\"></div><div class=\"line\">return 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>第一种和第二种比较可知，当block截获外围变量时，block会把截获的变量注册成为自己的成员变量，这也是为什么block不能直接修改截获的变量的原因，因为在block内操作的外围变量其实是block的同名的成员变量。</p>\n<p>第一种和第三种比较可知，当block截获外围变量时，block会把截获的变量封装成<code>__Block_byref_i_0</code>结构体，并把结构体指针变量注册为自己的成员变量。</p>\n<p>被<code>__block</code>修饰的外围变量会变成堆变量，这样这个外围变量就不会随函数的结束而被释放了，<code>__Block_byref_i_0</code>结构体i指针变量中有一个指向自己的<code>__forwarding</code>指针，通过<code>i-&gt;__forwarding-&gt;i</code>来修改存在堆中的外围变量。</p>\n"},{"title":"写这篇blog内心是崩溃的","_content":"\n在某一个月黑风高的夜里，他正在伏案敲代码，敲完之后一脸自信的cmd + run，结果不愉快的事情就此发生了，心塞。。😂\n事情是这样的，我们美丽的UI设计了一套图，本来想自定义个flowLayout走个捷径的，事实却发现走了个大弯路，图是下面这样子的👇\n\n![图.png](http://upload-images.jianshu.io/upload_images/1229960-fd829b12d38e19b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480)\n约束报错，很是无奈，于是我又到GitHub上查看了一遍masonry的使用方式，现总一下。\n\niOS布局有这么几种方式：\n**frame：**你要看吗？我并不打算写\n**autoResize：**autoresizingMask是view的一个布局属性，默认值是UIViewAutoresizingNone，这个枚举值有很多值，具体自己查看\n**autoLayout：**自动布局出来以后，很受欢迎，为此苹果还设计了[VFL](http://www.tuicool.com/articles/QrUfemz)可视化语言，但是程序员是很懒的（不是说不会偷懒的程序员不是好程序员吗，所以我说程序员懒并不是贬义词），然后[masonry](https://github.com/SnapKit/Masonry)就诞生了，masonry是一个对NSLayoutConstraint的封装具备链式语法的三方布局库，很受大家欢迎，我不敢说没人用frame布局，但是我敢说没几个人还在用NSLayoutConstraint来布局了吧\n\nmasonry的具体用法就不说了，GitHub上有详细的用法，下面就提一下masonry一些你值得注意的地方。\n\n1. masrony 提供的一个利于debug约束问题的方法，代码摘自masonry的demo上的，我加了注释\n\n```  Objective-C\n  \n    UIView *greenView = UIView.new;\n    greenView.backgroundColor = UIColor.greenColor;\n    [self addSubview:greenView];\n\n    UIView *redView = UIView.new;\n    redView.backgroundColor = UIColor.redColor;\n    [self addSubview:redView];\n\n    UILabel *blueView = UILabel.new;\n    blueView.backgroundColor = UIColor.blueColor;\n    [self addSubview:blueView];\n\n    UIView *superview = self;\n    int padding = 10;\n    // 给视图添加key的方式有两种，如下所示\n\n    // 法一：\n    //you can attach debug keys to views like so:\n    // greenView.mas_key = @\"greenView\";\n    // redView.mas_key = @\"redView\";\n    // blueView.mas_key = @\"blueView\";\n    // superview.mas_key = @\"superview\";\n\n    // 法二：\n    //OR you can attach keys automagically like so:\n    MASAttachKeys(greenView, redView, blueView, superview);\n\n    // 给约束添加key\n    [blueView mas_makeConstraints:^(MASConstraintMaker *make) {\n        //you can also attach debug keys to constaints\n        make.edges.equalTo(@1).key(@\"ConflictingConstraint\"); //composite constraint keys will be indexed\n        make.height.greaterThanOrEqualTo(@5000).key(@\"ConstantConstraint\");\n\n        make.top.equalTo(greenView.mas_bottom).offset(padding);\n        make.left.equalTo(superview.mas_left).offset(padding);\n        make.bottom.equalTo(superview.mas_bottom).offset(-padding).key(@\"BottomConstraint\");\n        make.right.equalTo(superview.mas_right).offset(-padding);\n        make.height.equalTo(greenView.mas_height);\n        make.height.equalTo(redView.mas_height).key(@340954); //anything can be a key\n    }];\n    \n    return self;\n}\n```\n上面的约束有问题，会抛出问题，如果不给视图和约束设置key的话，xcode提示错误如下：\n``` Objective-C\nProbably at least one of the constraints in the following list is one you don't want. \n\tTry this: \n\t\t(1) look at each constraint and try to figure out which you don't expect; \n\t\t(2) find the code that added the unwanted constraint or constraints and fix it. \n(\n    \"<MASLayoutConstraint:0x6000000a5e20 UILabel:0x7fb318c2c990.left == MASExampleDebuggingView:0x7fb318c15c00.left + 1>\",\n    \"<MASLayoutConstraint:0x6080000a40e0 UILabel:0x7fb318c2c990.left == MASExampleDebuggingView:0x7fb318c15c00.left + 10>\"\n)\n```\n给视图和约束添加了key之后的提示如下：\n``` Objective-C\nProbably at least one of the constraints in the following list is one you don't want. \n\tTry this: \n\t\t(1) look at each constraint and try to figure out which you don't expect; \n\t\t(2) find the code that added the unwanted constraint or constraints and fix it. \n(\n    \"<MASLayoutConstraint:ConflictingConstraint[0] UILabel:blueView.left == MASExampleDebuggingView:superview.left + 1>\",\n    \"<MASLayoutConstraint:0x6000000b7ac0 UILabel:blueView.left == MASExampleDebuggingView:superview.left + 10>\"\n)\n\n```\n是不是看着爽多了。。\n这样你就能看到具体是哪个view的哪个约束可能出现问题了，而不是出现一堆的十六进制地址\n\n2.添加或者更新(update、remake)约束的代码应该放在哪，代码如下一看便知\n\n``` Objective-C\n// 当你使用autoLayout布局的时候建议写此方法，防止autoresize布局造成的错误\n+ (BOOL)requiresConstraintBasedLayout\n{\n    return YES;\n}\n\n// this is Apple's recommended place for adding/updating constraints\n// 苹果推荐添加或者更新（update、remake）约束的地方\n- (void)updateConstraints {\n\n    [self.growingButton updateConstraints:^(MASConstraintMaker *make) {\n        make.center.equalTo(self);\n        make.width.equalTo(@(self.buttonSize.width)).priorityLow();\n        make.height.equalTo(@(self.buttonSize.height)).priorityLow();\n        make.width.lessThanOrEqualTo(self);\n        make.height.lessThanOrEqualTo(self);\n    }];\n    // according to apple super should be called at end of method\n    [super updateConstraints];\n}\n```\n\n3.autoLayout不允许对其属性例如左、右、centerY等被设置为常量，因此如果你要给这些属性传递一个NSNumber类型的值得时候masonry会将他们转换成与父视图相关的约束。\n\n``` Objective-C\n\nHowever Auto Layout does not allow alignment attributes such as left, right, centerY etc to be set to constant values. \nSo if you pass a NSNumber for these attributes\n Masonry will turn these into constraints relative to the view’s superview ie:\n [view makeConstraints:^(MASConstraintMaker *make) {    \n        make.left.lessThanOrEqualTo(@10)\n }];\n```\nview的左边距等价于 view.left = view.superview.left + 10\n\n4.按比例布局，如果各占一半的话，也可以不用multipliedBy，直接约束两个视图的width isEqual就行了\n\n``` Objective-C\n// topInnerView的宽度是高度的1/3\n[self.topInnerView mas_makeConstraints:^(MASConstraintMaker *make) {\n    make.width.equalTo(self.topInnerView.mas_height).multipliedBy(3);\n]\n```\n5.你用NSAutoLyoutConstraints布局的时候需要设置视图的`view1.translatesAutoresizingMaskIntoConstraints = NO`，默认值是YES，等于YES的时候autoresize会影响autolayout布局，有时会发现效果不是自己想要的，不过如果你用masonry设置约束的时候，masonry会帮你把这个属性值设置为NO，你不用管它，写出来就是想提醒你。\n\n6.看完官方的demo，发现他们会把需要的每个约束都写上，但是有时候不需要全写上，如下面被我注释的代码，但是官方是没有注释的，既然人家官方都这样写，你是不是也应该这样写啊，别注释了，这样不容易出错，如下：\n\n``` Objective-C\n UIView *superview = self;\n    int padding = 10;\n\n    //if you want to use Masonry without the mas_ prefix\n    //define MAS_SHORTHAND before importing Masonry.h see Masonry iOS Examples-Prefix.pch\n    [greenView makeConstraints:^(MASConstraintMaker *make) {\n        make.top.greaterThanOrEqualTo(superview.top).offset(padding);\n        make.left.equalTo(superview.left).offset(padding);\n        make.bottom.equalTo(blueView.top).offset(-padding);\n        make.right.equalTo(redView.left).offset(-padding);\n        make.width.equalTo(redView).multipliedBy(1);\n\n        make.height.equalTo(redView.height);\n        make.height.equalTo(blueView.height);\n    }];\n\n    //with is semantic and option\n    [redView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(superview.mas_top).with.offset(padding); //with with\n        //make.left.equalTo(greenView.mas_right).offset(padding); //without with\n        make.bottom.equalTo(blueView.mas_top).offset(-padding);\n        make.right.equalTo(superview.mas_right).offset(-padding);\n        // make.width.equalTo(greenView).multipliedBy(1);\n        \n        make.height.equalTo(@[greenView, blueView]); //can pass array of views\n    }];\n    \n    [blueView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(greenView.mas_bottom).offset(padding);\n        make.left.equalTo(superview.mas_left).offset(padding);\n        make.bottom.equalTo(superview.mas_bottom).offset(-padding);\n        make.right.equalTo(superview.mas_right).offset(-padding);\n        make.height.equalTo(@[greenView.mas_height, redView.mas_height]); //can pass array of attributes\n    }];\n\n    return self;\n}\n\n```\n要注意blueView设置高度依赖的时候设置的是一个数组这样的用法\n\n7.masonry动画\n\n``` Objective-C\n\n@implementation MASExampleUpdateView\n\n- (id)init {\n    self = [super init];\n    if (!self) return nil;\n\n    self.growingButton = [UIButton buttonWithType:UIButtonTypeSystem];\n    [self.growingButton setTitle:@\"Grow Me!\" forState:UIControlStateNormal];\n    self.growingButton.layer.borderColor = UIColor.greenColor.CGColor;\n    self.growingButton.layer.borderWidth = 3;\n    [self.growingButton addTarget:self action:@selector(didTapGrowButton:) forControlEvents:UIControlEventTouchUpInside];\n    [self addSubview:self.growingButton];\n    self.buttonSize = CGSizeMake(100, 100);\n    return self;\n}\n\n+ (BOOL)requiresConstraintBasedLayout\n{\n    return YES;\n}\n\n// this is Apple's recommended place for adding/updating constraints\n// 苹果推荐添加或或者更新约束的地方\n- (void)updateConstraints {\n\n    [self.growingButton updateConstraints:^(MASConstraintMaker *make) {\n        make.center.equalTo(self);\n        make.width.equalTo(@(self.buttonSize.width)).priorityLow();\n        make.height.equalTo(@(self.buttonSize.height)).priorityLow();\n        make.width.lessThanOrEqualTo(self);\n        make.height.lessThanOrEqualTo(self);\n    }];\n    \n    // according to apple super should be called at end of method\n    [super updateConstraints];\n}\n\n- (void)didTapGrowButton:(UIButton *)button {\n    self.buttonSize = CGSizeMake(self.buttonSize.width * 1.3, self.buttonSize.height * 1.3);\n\n    // tell constraints they need updating\n    // 告诉约束系统要更新，系统会调用上面重写的updateConstraints方法\n    [self setNeedsUpdateConstraints];\n\n    // update constraints now so we can animate the change,\n    // it will be call by system automatically\n    // 该方法不必手动调用\n    // [self updateConstraintsIfNeeded];\n\n    // 可以用layoutIfNeeded来实现即时更新，还可以添加动画\n    [UIView animateWithDuration:0.4 animations:^{\n        [self layoutIfNeeded]; // 需要在此处调用layoutIfNeeded方法才能产生动画\n    }];\n}\n@end\n```","source":"_posts/一次masonry布局错误后的自检.md","raw":"---\ntitle: 写这篇blog内心是崩溃的\ncategories: iOS\ntags: [masonry]\n\n---\n\n在某一个月黑风高的夜里，他正在伏案敲代码，敲完之后一脸自信的cmd + run，结果不愉快的事情就此发生了，心塞。。😂\n事情是这样的，我们美丽的UI设计了一套图，本来想自定义个flowLayout走个捷径的，事实却发现走了个大弯路，图是下面这样子的👇\n\n![图.png](http://upload-images.jianshu.io/upload_images/1229960-fd829b12d38e19b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480)\n约束报错，很是无奈，于是我又到GitHub上查看了一遍masonry的使用方式，现总一下。\n\niOS布局有这么几种方式：\n**frame：**你要看吗？我并不打算写\n**autoResize：**autoresizingMask是view的一个布局属性，默认值是UIViewAutoresizingNone，这个枚举值有很多值，具体自己查看\n**autoLayout：**自动布局出来以后，很受欢迎，为此苹果还设计了[VFL](http://www.tuicool.com/articles/QrUfemz)可视化语言，但是程序员是很懒的（不是说不会偷懒的程序员不是好程序员吗，所以我说程序员懒并不是贬义词），然后[masonry](https://github.com/SnapKit/Masonry)就诞生了，masonry是一个对NSLayoutConstraint的封装具备链式语法的三方布局库，很受大家欢迎，我不敢说没人用frame布局，但是我敢说没几个人还在用NSLayoutConstraint来布局了吧\n\nmasonry的具体用法就不说了，GitHub上有详细的用法，下面就提一下masonry一些你值得注意的地方。\n\n1. masrony 提供的一个利于debug约束问题的方法，代码摘自masonry的demo上的，我加了注释\n\n```  Objective-C\n  \n    UIView *greenView = UIView.new;\n    greenView.backgroundColor = UIColor.greenColor;\n    [self addSubview:greenView];\n\n    UIView *redView = UIView.new;\n    redView.backgroundColor = UIColor.redColor;\n    [self addSubview:redView];\n\n    UILabel *blueView = UILabel.new;\n    blueView.backgroundColor = UIColor.blueColor;\n    [self addSubview:blueView];\n\n    UIView *superview = self;\n    int padding = 10;\n    // 给视图添加key的方式有两种，如下所示\n\n    // 法一：\n    //you can attach debug keys to views like so:\n    // greenView.mas_key = @\"greenView\";\n    // redView.mas_key = @\"redView\";\n    // blueView.mas_key = @\"blueView\";\n    // superview.mas_key = @\"superview\";\n\n    // 法二：\n    //OR you can attach keys automagically like so:\n    MASAttachKeys(greenView, redView, blueView, superview);\n\n    // 给约束添加key\n    [blueView mas_makeConstraints:^(MASConstraintMaker *make) {\n        //you can also attach debug keys to constaints\n        make.edges.equalTo(@1).key(@\"ConflictingConstraint\"); //composite constraint keys will be indexed\n        make.height.greaterThanOrEqualTo(@5000).key(@\"ConstantConstraint\");\n\n        make.top.equalTo(greenView.mas_bottom).offset(padding);\n        make.left.equalTo(superview.mas_left).offset(padding);\n        make.bottom.equalTo(superview.mas_bottom).offset(-padding).key(@\"BottomConstraint\");\n        make.right.equalTo(superview.mas_right).offset(-padding);\n        make.height.equalTo(greenView.mas_height);\n        make.height.equalTo(redView.mas_height).key(@340954); //anything can be a key\n    }];\n    \n    return self;\n}\n```\n上面的约束有问题，会抛出问题，如果不给视图和约束设置key的话，xcode提示错误如下：\n``` Objective-C\nProbably at least one of the constraints in the following list is one you don't want. \n\tTry this: \n\t\t(1) look at each constraint and try to figure out which you don't expect; \n\t\t(2) find the code that added the unwanted constraint or constraints and fix it. \n(\n    \"<MASLayoutConstraint:0x6000000a5e20 UILabel:0x7fb318c2c990.left == MASExampleDebuggingView:0x7fb318c15c00.left + 1>\",\n    \"<MASLayoutConstraint:0x6080000a40e0 UILabel:0x7fb318c2c990.left == MASExampleDebuggingView:0x7fb318c15c00.left + 10>\"\n)\n```\n给视图和约束添加了key之后的提示如下：\n``` Objective-C\nProbably at least one of the constraints in the following list is one you don't want. \n\tTry this: \n\t\t(1) look at each constraint and try to figure out which you don't expect; \n\t\t(2) find the code that added the unwanted constraint or constraints and fix it. \n(\n    \"<MASLayoutConstraint:ConflictingConstraint[0] UILabel:blueView.left == MASExampleDebuggingView:superview.left + 1>\",\n    \"<MASLayoutConstraint:0x6000000b7ac0 UILabel:blueView.left == MASExampleDebuggingView:superview.left + 10>\"\n)\n\n```\n是不是看着爽多了。。\n这样你就能看到具体是哪个view的哪个约束可能出现问题了，而不是出现一堆的十六进制地址\n\n2.添加或者更新(update、remake)约束的代码应该放在哪，代码如下一看便知\n\n``` Objective-C\n// 当你使用autoLayout布局的时候建议写此方法，防止autoresize布局造成的错误\n+ (BOOL)requiresConstraintBasedLayout\n{\n    return YES;\n}\n\n// this is Apple's recommended place for adding/updating constraints\n// 苹果推荐添加或者更新（update、remake）约束的地方\n- (void)updateConstraints {\n\n    [self.growingButton updateConstraints:^(MASConstraintMaker *make) {\n        make.center.equalTo(self);\n        make.width.equalTo(@(self.buttonSize.width)).priorityLow();\n        make.height.equalTo(@(self.buttonSize.height)).priorityLow();\n        make.width.lessThanOrEqualTo(self);\n        make.height.lessThanOrEqualTo(self);\n    }];\n    // according to apple super should be called at end of method\n    [super updateConstraints];\n}\n```\n\n3.autoLayout不允许对其属性例如左、右、centerY等被设置为常量，因此如果你要给这些属性传递一个NSNumber类型的值得时候masonry会将他们转换成与父视图相关的约束。\n\n``` Objective-C\n\nHowever Auto Layout does not allow alignment attributes such as left, right, centerY etc to be set to constant values. \nSo if you pass a NSNumber for these attributes\n Masonry will turn these into constraints relative to the view’s superview ie:\n [view makeConstraints:^(MASConstraintMaker *make) {    \n        make.left.lessThanOrEqualTo(@10)\n }];\n```\nview的左边距等价于 view.left = view.superview.left + 10\n\n4.按比例布局，如果各占一半的话，也可以不用multipliedBy，直接约束两个视图的width isEqual就行了\n\n``` Objective-C\n// topInnerView的宽度是高度的1/3\n[self.topInnerView mas_makeConstraints:^(MASConstraintMaker *make) {\n    make.width.equalTo(self.topInnerView.mas_height).multipliedBy(3);\n]\n```\n5.你用NSAutoLyoutConstraints布局的时候需要设置视图的`view1.translatesAutoresizingMaskIntoConstraints = NO`，默认值是YES，等于YES的时候autoresize会影响autolayout布局，有时会发现效果不是自己想要的，不过如果你用masonry设置约束的时候，masonry会帮你把这个属性值设置为NO，你不用管它，写出来就是想提醒你。\n\n6.看完官方的demo，发现他们会把需要的每个约束都写上，但是有时候不需要全写上，如下面被我注释的代码，但是官方是没有注释的，既然人家官方都这样写，你是不是也应该这样写啊，别注释了，这样不容易出错，如下：\n\n``` Objective-C\n UIView *superview = self;\n    int padding = 10;\n\n    //if you want to use Masonry without the mas_ prefix\n    //define MAS_SHORTHAND before importing Masonry.h see Masonry iOS Examples-Prefix.pch\n    [greenView makeConstraints:^(MASConstraintMaker *make) {\n        make.top.greaterThanOrEqualTo(superview.top).offset(padding);\n        make.left.equalTo(superview.left).offset(padding);\n        make.bottom.equalTo(blueView.top).offset(-padding);\n        make.right.equalTo(redView.left).offset(-padding);\n        make.width.equalTo(redView).multipliedBy(1);\n\n        make.height.equalTo(redView.height);\n        make.height.equalTo(blueView.height);\n    }];\n\n    //with is semantic and option\n    [redView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(superview.mas_top).with.offset(padding); //with with\n        //make.left.equalTo(greenView.mas_right).offset(padding); //without with\n        make.bottom.equalTo(blueView.mas_top).offset(-padding);\n        make.right.equalTo(superview.mas_right).offset(-padding);\n        // make.width.equalTo(greenView).multipliedBy(1);\n        \n        make.height.equalTo(@[greenView, blueView]); //can pass array of views\n    }];\n    \n    [blueView mas_makeConstraints:^(MASConstraintMaker *make) {\n        make.top.equalTo(greenView.mas_bottom).offset(padding);\n        make.left.equalTo(superview.mas_left).offset(padding);\n        make.bottom.equalTo(superview.mas_bottom).offset(-padding);\n        make.right.equalTo(superview.mas_right).offset(-padding);\n        make.height.equalTo(@[greenView.mas_height, redView.mas_height]); //can pass array of attributes\n    }];\n\n    return self;\n}\n\n```\n要注意blueView设置高度依赖的时候设置的是一个数组这样的用法\n\n7.masonry动画\n\n``` Objective-C\n\n@implementation MASExampleUpdateView\n\n- (id)init {\n    self = [super init];\n    if (!self) return nil;\n\n    self.growingButton = [UIButton buttonWithType:UIButtonTypeSystem];\n    [self.growingButton setTitle:@\"Grow Me!\" forState:UIControlStateNormal];\n    self.growingButton.layer.borderColor = UIColor.greenColor.CGColor;\n    self.growingButton.layer.borderWidth = 3;\n    [self.growingButton addTarget:self action:@selector(didTapGrowButton:) forControlEvents:UIControlEventTouchUpInside];\n    [self addSubview:self.growingButton];\n    self.buttonSize = CGSizeMake(100, 100);\n    return self;\n}\n\n+ (BOOL)requiresConstraintBasedLayout\n{\n    return YES;\n}\n\n// this is Apple's recommended place for adding/updating constraints\n// 苹果推荐添加或或者更新约束的地方\n- (void)updateConstraints {\n\n    [self.growingButton updateConstraints:^(MASConstraintMaker *make) {\n        make.center.equalTo(self);\n        make.width.equalTo(@(self.buttonSize.width)).priorityLow();\n        make.height.equalTo(@(self.buttonSize.height)).priorityLow();\n        make.width.lessThanOrEqualTo(self);\n        make.height.lessThanOrEqualTo(self);\n    }];\n    \n    // according to apple super should be called at end of method\n    [super updateConstraints];\n}\n\n- (void)didTapGrowButton:(UIButton *)button {\n    self.buttonSize = CGSizeMake(self.buttonSize.width * 1.3, self.buttonSize.height * 1.3);\n\n    // tell constraints they need updating\n    // 告诉约束系统要更新，系统会调用上面重写的updateConstraints方法\n    [self setNeedsUpdateConstraints];\n\n    // update constraints now so we can animate the change,\n    // it will be call by system automatically\n    // 该方法不必手动调用\n    // [self updateConstraintsIfNeeded];\n\n    // 可以用layoutIfNeeded来实现即时更新，还可以添加动画\n    [UIView animateWithDuration:0.4 animations:^{\n        [self layoutIfNeeded]; // 需要在此处调用layoutIfNeeded方法才能产生动画\n    }];\n}\n@end\n```","slug":"一次masonry布局错误后的自检","published":1,"date":"2017-05-13T13:09:34.000Z","updated":"2017-05-13T17:00:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmeouzh0021v8tj5bd6s5ju","content":"<p>在某一个月黑风高的夜里，他正在伏案敲代码，敲完之后一脸自信的cmd + run，结果不愉快的事情就此发生了，心塞。。😂<br>事情是这样的，我们美丽的UI设计了一套图，本来想自定义个flowLayout走个捷径的，事实却发现走了个大弯路，图是下面这样子的👇</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1229960-fd829b12d38e19b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480\" alt=\"图.png\"><br>约束报错，很是无奈，于是我又到GitHub上查看了一遍masonry的使用方式，现总一下。</p>\n<p>iOS布局有这么几种方式：<br><strong>frame：</strong>你要看吗？我并不打算写<br><strong>autoResize：</strong>autoresizingMask是view的一个布局属性，默认值是UIViewAutoresizingNone，这个枚举值有很多值，具体自己查看<br><strong>autoLayout：</strong>自动布局出来以后，很受欢迎，为此苹果还设计了<a href=\"http://www.tuicool.com/articles/QrUfemz\" target=\"_blank\" rel=\"external\">VFL</a>可视化语言，但是程序员是很懒的（不是说不会偷懒的程序员不是好程序员吗，所以我说程序员懒并不是贬义词），然后<a href=\"https://github.com/SnapKit/Masonry\" target=\"_blank\" rel=\"external\">masonry</a>就诞生了，masonry是一个对NSLayoutConstraint的封装具备链式语法的三方布局库，很受大家欢迎，我不敢说没人用frame布局，但是我敢说没几个人还在用NSLayoutConstraint来布局了吧</p>\n<p>masonry的具体用法就不说了，GitHub上有详细的用法，下面就提一下masonry一些你值得注意的地方。</p>\n<ol>\n<li>masrony 提供的一个利于debug约束问题的方法，代码摘自masonry的demo上的，我加了注释</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">    UIView *greenView = UIView.new;</div><div class=\"line\">    greenView.backgroundColor = UIColor.greenColor;</div><div class=\"line\">    [self addSubview:greenView];</div><div class=\"line\"></div><div class=\"line\">    UIView *redView = UIView.new;</div><div class=\"line\">    redView.backgroundColor = UIColor.redColor;</div><div class=\"line\">    [self addSubview:redView];</div><div class=\"line\"></div><div class=\"line\">    UILabel *blueView = UILabel.new;</div><div class=\"line\">    blueView.backgroundColor = UIColor.blueColor;</div><div class=\"line\">    [self addSubview:blueView];</div><div class=\"line\"></div><div class=\"line\">    UIView *superview = self;</div><div class=\"line\">    int padding = 10;</div><div class=\"line\">    // 给视图添加key的方式有两种，如下所示</div><div class=\"line\"></div><div class=\"line\">    // 法一：</div><div class=\"line\">    //you can attach debug keys to views like so:</div><div class=\"line\">    // greenView.mas_key = @&quot;greenView&quot;;</div><div class=\"line\">    // redView.mas_key = @&quot;redView&quot;;</div><div class=\"line\">    // blueView.mas_key = @&quot;blueView&quot;;</div><div class=\"line\">    // superview.mas_key = @&quot;superview&quot;;</div><div class=\"line\"></div><div class=\"line\">    // 法二：</div><div class=\"line\">    //OR you can attach keys automagically like so:</div><div class=\"line\">    MASAttachKeys(greenView, redView, blueView, superview);</div><div class=\"line\"></div><div class=\"line\">    // 给约束添加key</div><div class=\"line\">    [blueView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        //you can also attach debug keys to constaints</div><div class=\"line\">        make.edges.equalTo(@1).key(@&quot;ConflictingConstraint&quot;); //composite constraint keys will be indexed</div><div class=\"line\">        make.height.greaterThanOrEqualTo(@5000).key(@&quot;ConstantConstraint&quot;);</div><div class=\"line\"></div><div class=\"line\">        make.top.equalTo(greenView.mas_bottom).offset(padding);</div><div class=\"line\">        make.left.equalTo(superview.mas_left).offset(padding);</div><div class=\"line\">        make.bottom.equalTo(superview.mas_bottom).offset(-padding).key(@&quot;BottomConstraint&quot;);</div><div class=\"line\">        make.right.equalTo(superview.mas_right).offset(-padding);</div><div class=\"line\">        make.height.equalTo(greenView.mas_height);</div><div class=\"line\">        make.height.equalTo(redView.mas_height).key(@340954); //anything can be a key</div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    return self;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的约束有问题，会抛出问题，如果不给视图和约束设置key的话，xcode提示错误如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Probably at least one of the constraints in the following list is one you don&apos;t want. </div><div class=\"line\">\tTry this: </div><div class=\"line\">\t\t(1) look at each constraint and try to figure out which you don&apos;t expect; </div><div class=\"line\">\t\t(2) find the code that added the unwanted constraint or constraints and fix it. </div><div class=\"line\">(</div><div class=\"line\">    &quot;&lt;MASLayoutConstraint:0x6000000a5e20 UILabel:0x7fb318c2c990.left == MASExampleDebuggingView:0x7fb318c15c00.left + 1&gt;&quot;,</div><div class=\"line\">    &quot;&lt;MASLayoutConstraint:0x6080000a40e0 UILabel:0x7fb318c2c990.left == MASExampleDebuggingView:0x7fb318c15c00.left + 10&gt;&quot;</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>给视图和约束添加了key之后的提示如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Probably at least one of the constraints in the following list is one you don&apos;t want. </div><div class=\"line\">\tTry this: </div><div class=\"line\">\t\t(1) look at each constraint and try to figure out which you don&apos;t expect; </div><div class=\"line\">\t\t(2) find the code that added the unwanted constraint or constraints and fix it. </div><div class=\"line\">(</div><div class=\"line\">    &quot;&lt;MASLayoutConstraint:ConflictingConstraint[0] UILabel:blueView.left == MASExampleDebuggingView:superview.left + 1&gt;&quot;,</div><div class=\"line\">    &quot;&lt;MASLayoutConstraint:0x6000000b7ac0 UILabel:blueView.left == MASExampleDebuggingView:superview.left + 10&gt;&quot;</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>是不是看着爽多了。。<br>这样你就能看到具体是哪个view的哪个约束可能出现问题了，而不是出现一堆的十六进制地址</p>\n<p>2.添加或者更新(update、remake)约束的代码应该放在哪，代码如下一看便知</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 当你使用autoLayout布局的时候建议写此方法，防止autoresize布局造成的错误</div><div class=\"line\">+ (BOOL)requiresConstraintBasedLayout</div><div class=\"line\">&#123;</div><div class=\"line\">    return YES;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// this is Apple&apos;s recommended place for adding/updating constraints</div><div class=\"line\">// 苹果推荐添加或者更新（update、remake）约束的地方</div><div class=\"line\">- (void)updateConstraints &#123;</div><div class=\"line\"></div><div class=\"line\">    [self.growingButton updateConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.center.equalTo(self);</div><div class=\"line\">        make.width.equalTo(@(self.buttonSize.width)).priorityLow();</div><div class=\"line\">        make.height.equalTo(@(self.buttonSize.height)).priorityLow();</div><div class=\"line\">        make.width.lessThanOrEqualTo(self);</div><div class=\"line\">        make.height.lessThanOrEqualTo(self);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    // according to apple super should be called at end of method</div><div class=\"line\">    [super updateConstraints];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.autoLayout不允许对其属性例如左、右、centerY等被设置为常量，因此如果你要给这些属性传递一个NSNumber类型的值得时候masonry会将他们转换成与父视图相关的约束。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">However Auto Layout does not allow alignment attributes such as left, right, centerY etc to be set to constant values. </div><div class=\"line\">So if you pass a NSNumber for these attributes</div><div class=\"line\"> Masonry will turn these into constraints relative to the view’s superview ie:</div><div class=\"line\"> [view makeConstraints:^(MASConstraintMaker *make) &#123;    </div><div class=\"line\">        make.left.lessThanOrEqualTo(@10)</div><div class=\"line\"> &#125;];</div></pre></td></tr></table></figure>\n<p>view的左边距等价于 view.left = view.superview.left + 10</p>\n<p>4.按比例布局，如果各占一半的话，也可以不用multipliedBy，直接约束两个视图的width isEqual就行了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// topInnerView的宽度是高度的1/3</div><div class=\"line\">[self.topInnerView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">    make.width.equalTo(self.topInnerView.mas_height).multipliedBy(3);</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>5.你用NSAutoLyoutConstraints布局的时候需要设置视图的<code>view1.translatesAutoresizingMaskIntoConstraints = NO</code>，默认值是YES，等于YES的时候autoresize会影响autolayout布局，有时会发现效果不是自己想要的，不过如果你用masonry设置约束的时候，masonry会帮你把这个属性值设置为NO，你不用管它，写出来就是想提醒你。</p>\n<p>6.看完官方的demo，发现他们会把需要的每个约束都写上，但是有时候不需要全写上，如下面被我注释的代码，但是官方是没有注释的，既然人家官方都这样写，你是不是也应该这样写啊，别注释了，这样不容易出错，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"> UIView *superview = self;</div><div class=\"line\">    int padding = 10;</div><div class=\"line\"></div><div class=\"line\">    //if you want to use Masonry without the mas_ prefix</div><div class=\"line\">    //define MAS_SHORTHAND before importing Masonry.h see Masonry iOS Examples-Prefix.pch</div><div class=\"line\">    [greenView makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.top.greaterThanOrEqualTo(superview.top).offset(padding);</div><div class=\"line\">        make.left.equalTo(superview.left).offset(padding);</div><div class=\"line\">        make.bottom.equalTo(blueView.top).offset(-padding);</div><div class=\"line\">        make.right.equalTo(redView.left).offset(-padding);</div><div class=\"line\">        make.width.equalTo(redView).multipliedBy(1);</div><div class=\"line\"></div><div class=\"line\">        make.height.equalTo(redView.height);</div><div class=\"line\">        make.height.equalTo(blueView.height);</div><div class=\"line\">    &#125;];</div><div class=\"line\"></div><div class=\"line\">    //with is semantic and option</div><div class=\"line\">    [redView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.top.equalTo(superview.mas_top).with.offset(padding); //with with</div><div class=\"line\">        //make.left.equalTo(greenView.mas_right).offset(padding); //without with</div><div class=\"line\">        make.bottom.equalTo(blueView.mas_top).offset(-padding);</div><div class=\"line\">        make.right.equalTo(superview.mas_right).offset(-padding);</div><div class=\"line\">        // make.width.equalTo(greenView).multipliedBy(1);</div><div class=\"line\">        </div><div class=\"line\">        make.height.equalTo(@[greenView, blueView]); //can pass array of views</div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    [blueView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.top.equalTo(greenView.mas_bottom).offset(padding);</div><div class=\"line\">        make.left.equalTo(superview.mas_left).offset(padding);</div><div class=\"line\">        make.bottom.equalTo(superview.mas_bottom).offset(-padding);</div><div class=\"line\">        make.right.equalTo(superview.mas_right).offset(-padding);</div><div class=\"line\">        make.height.equalTo(@[greenView.mas_height, redView.mas_height]); //can pass array of attributes</div><div class=\"line\">    &#125;];</div><div class=\"line\"></div><div class=\"line\">    return self;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>要注意blueView设置高度依赖的时候设置的是一个数组这样的用法</p>\n<p>7.masonry动画</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@implementation MASExampleUpdateView</div><div class=\"line\"></div><div class=\"line\">- (id)init &#123;</div><div class=\"line\">    self = [super init];</div><div class=\"line\">    if (!self) return nil;</div><div class=\"line\"></div><div class=\"line\">    self.growingButton = [UIButton buttonWithType:UIButtonTypeSystem];</div><div class=\"line\">    [self.growingButton setTitle:@&quot;Grow Me!&quot; forState:UIControlStateNormal];</div><div class=\"line\">    self.growingButton.layer.borderColor = UIColor.greenColor.CGColor;</div><div class=\"line\">    self.growingButton.layer.borderWidth = 3;</div><div class=\"line\">    [self.growingButton addTarget:self action:@selector(didTapGrowButton:) forControlEvents:UIControlEventTouchUpInside];</div><div class=\"line\">    [self addSubview:self.growingButton];</div><div class=\"line\">    self.buttonSize = CGSizeMake(100, 100);</div><div class=\"line\">    return self;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (BOOL)requiresConstraintBasedLayout</div><div class=\"line\">&#123;</div><div class=\"line\">    return YES;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// this is Apple&apos;s recommended place for adding/updating constraints</div><div class=\"line\">// 苹果推荐添加或或者更新约束的地方</div><div class=\"line\">- (void)updateConstraints &#123;</div><div class=\"line\"></div><div class=\"line\">    [self.growingButton updateConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.center.equalTo(self);</div><div class=\"line\">        make.width.equalTo(@(self.buttonSize.width)).priorityLow();</div><div class=\"line\">        make.height.equalTo(@(self.buttonSize.height)).priorityLow();</div><div class=\"line\">        make.width.lessThanOrEqualTo(self);</div><div class=\"line\">        make.height.lessThanOrEqualTo(self);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    // according to apple super should be called at end of method</div><div class=\"line\">    [super updateConstraints];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)didTapGrowButton:(UIButton *)button &#123;</div><div class=\"line\">    self.buttonSize = CGSizeMake(self.buttonSize.width * 1.3, self.buttonSize.height * 1.3);</div><div class=\"line\"></div><div class=\"line\">    // tell constraints they need updating</div><div class=\"line\">    // 告诉约束系统要更新，系统会调用上面重写的updateConstraints方法</div><div class=\"line\">    [self setNeedsUpdateConstraints];</div><div class=\"line\"></div><div class=\"line\">    // update constraints now so we can animate the change,</div><div class=\"line\">    // it will be call by system automatically</div><div class=\"line\">    // 该方法不必手动调用</div><div class=\"line\">    // [self updateConstraintsIfNeeded];</div><div class=\"line\"></div><div class=\"line\">    // 可以用layoutIfNeeded来实现即时更新，还可以添加动画</div><div class=\"line\">    [UIView animateWithDuration:0.4 animations:^&#123;</div><div class=\"line\">        [self layoutIfNeeded]; // 需要在此处调用layoutIfNeeded方法才能产生动画</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>在某一个月黑风高的夜里，他正在伏案敲代码，敲完之后一脸自信的cmd + run，结果不愉快的事情就此发生了，心塞。。😂<br>事情是这样的，我们美丽的UI设计了一套图，本来想自定义个flowLayout走个捷径的，事实却发现走了个大弯路，图是下面这样子的👇</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1229960-fd829b12d38e19b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/480\" alt=\"图.png\"><br>约束报错，很是无奈，于是我又到GitHub上查看了一遍masonry的使用方式，现总一下。</p>\n<p>iOS布局有这么几种方式：<br><strong>frame：</strong>你要看吗？我并不打算写<br><strong>autoResize：</strong>autoresizingMask是view的一个布局属性，默认值是UIViewAutoresizingNone，这个枚举值有很多值，具体自己查看<br><strong>autoLayout：</strong>自动布局出来以后，很受欢迎，为此苹果还设计了<a href=\"http://www.tuicool.com/articles/QrUfemz\">VFL</a>可视化语言，但是程序员是很懒的（不是说不会偷懒的程序员不是好程序员吗，所以我说程序员懒并不是贬义词），然后<a href=\"https://github.com/SnapKit/Masonry\">masonry</a>就诞生了，masonry是一个对NSLayoutConstraint的封装具备链式语法的三方布局库，很受大家欢迎，我不敢说没人用frame布局，但是我敢说没几个人还在用NSLayoutConstraint来布局了吧</p>\n<p>masonry的具体用法就不说了，GitHub上有详细的用法，下面就提一下masonry一些你值得注意的地方。</p>\n<ol>\n<li>masrony 提供的一个利于debug约束问题的方法，代码摘自masonry的demo上的，我加了注释</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">  </div><div class=\"line\">    UIView *greenView = UIView.new;</div><div class=\"line\">    greenView.backgroundColor = UIColor.greenColor;</div><div class=\"line\">    [self addSubview:greenView];</div><div class=\"line\"></div><div class=\"line\">    UIView *redView = UIView.new;</div><div class=\"line\">    redView.backgroundColor = UIColor.redColor;</div><div class=\"line\">    [self addSubview:redView];</div><div class=\"line\"></div><div class=\"line\">    UILabel *blueView = UILabel.new;</div><div class=\"line\">    blueView.backgroundColor = UIColor.blueColor;</div><div class=\"line\">    [self addSubview:blueView];</div><div class=\"line\"></div><div class=\"line\">    UIView *superview = self;</div><div class=\"line\">    int padding = 10;</div><div class=\"line\">    // 给视图添加key的方式有两种，如下所示</div><div class=\"line\"></div><div class=\"line\">    // 法一：</div><div class=\"line\">    //you can attach debug keys to views like so:</div><div class=\"line\">    // greenView.mas_key = @&quot;greenView&quot;;</div><div class=\"line\">    // redView.mas_key = @&quot;redView&quot;;</div><div class=\"line\">    // blueView.mas_key = @&quot;blueView&quot;;</div><div class=\"line\">    // superview.mas_key = @&quot;superview&quot;;</div><div class=\"line\"></div><div class=\"line\">    // 法二：</div><div class=\"line\">    //OR you can attach keys automagically like so:</div><div class=\"line\">    MASAttachKeys(greenView, redView, blueView, superview);</div><div class=\"line\"></div><div class=\"line\">    // 给约束添加key</div><div class=\"line\">    [blueView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        //you can also attach debug keys to constaints</div><div class=\"line\">        make.edges.equalTo(@1).key(@&quot;ConflictingConstraint&quot;); //composite constraint keys will be indexed</div><div class=\"line\">        make.height.greaterThanOrEqualTo(@5000).key(@&quot;ConstantConstraint&quot;);</div><div class=\"line\"></div><div class=\"line\">        make.top.equalTo(greenView.mas_bottom).offset(padding);</div><div class=\"line\">        make.left.equalTo(superview.mas_left).offset(padding);</div><div class=\"line\">        make.bottom.equalTo(superview.mas_bottom).offset(-padding).key(@&quot;BottomConstraint&quot;);</div><div class=\"line\">        make.right.equalTo(superview.mas_right).offset(-padding);</div><div class=\"line\">        make.height.equalTo(greenView.mas_height);</div><div class=\"line\">        make.height.equalTo(redView.mas_height).key(@340954); //anything can be a key</div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    return self;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的约束有问题，会抛出问题，如果不给视图和约束设置key的话，xcode提示错误如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Probably at least one of the constraints in the following list is one you don&apos;t want. </div><div class=\"line\">\tTry this: </div><div class=\"line\">\t\t(1) look at each constraint and try to figure out which you don&apos;t expect; </div><div class=\"line\">\t\t(2) find the code that added the unwanted constraint or constraints and fix it. </div><div class=\"line\">(</div><div class=\"line\">    &quot;&lt;MASLayoutConstraint:0x6000000a5e20 UILabel:0x7fb318c2c990.left == MASExampleDebuggingView:0x7fb318c15c00.left + 1&gt;&quot;,</div><div class=\"line\">    &quot;&lt;MASLayoutConstraint:0x6080000a40e0 UILabel:0x7fb318c2c990.left == MASExampleDebuggingView:0x7fb318c15c00.left + 10&gt;&quot;</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>给视图和约束添加了key之后的提示如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Probably at least one of the constraints in the following list is one you don&apos;t want. </div><div class=\"line\">\tTry this: </div><div class=\"line\">\t\t(1) look at each constraint and try to figure out which you don&apos;t expect; </div><div class=\"line\">\t\t(2) find the code that added the unwanted constraint or constraints and fix it. </div><div class=\"line\">(</div><div class=\"line\">    &quot;&lt;MASLayoutConstraint:ConflictingConstraint[0] UILabel:blueView.left == MASExampleDebuggingView:superview.left + 1&gt;&quot;,</div><div class=\"line\">    &quot;&lt;MASLayoutConstraint:0x6000000b7ac0 UILabel:blueView.left == MASExampleDebuggingView:superview.left + 10&gt;&quot;</div><div class=\"line\">)</div></pre></td></tr></table></figure></p>\n<p>是不是看着爽多了。。<br>这样你就能看到具体是哪个view的哪个约束可能出现问题了，而不是出现一堆的十六进制地址</p>\n<p>2.添加或者更新(update、remake)约束的代码应该放在哪，代码如下一看便知</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 当你使用autoLayout布局的时候建议写此方法，防止autoresize布局造成的错误</div><div class=\"line\">+ (BOOL)requiresConstraintBasedLayout</div><div class=\"line\">&#123;</div><div class=\"line\">    return YES;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// this is Apple&apos;s recommended place for adding/updating constraints</div><div class=\"line\">// 苹果推荐添加或者更新（update、remake）约束的地方</div><div class=\"line\">- (void)updateConstraints &#123;</div><div class=\"line\"></div><div class=\"line\">    [self.growingButton updateConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.center.equalTo(self);</div><div class=\"line\">        make.width.equalTo(@(self.buttonSize.width)).priorityLow();</div><div class=\"line\">        make.height.equalTo(@(self.buttonSize.height)).priorityLow();</div><div class=\"line\">        make.width.lessThanOrEqualTo(self);</div><div class=\"line\">        make.height.lessThanOrEqualTo(self);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    // according to apple super should be called at end of method</div><div class=\"line\">    [super updateConstraints];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.autoLayout不允许对其属性例如左、右、centerY等被设置为常量，因此如果你要给这些属性传递一个NSNumber类型的值得时候masonry会将他们转换成与父视图相关的约束。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">However Auto Layout does not allow alignment attributes such as left, right, centerY etc to be set to constant values. </div><div class=\"line\">So if you pass a NSNumber for these attributes</div><div class=\"line\"> Masonry will turn these into constraints relative to the view’s superview ie:</div><div class=\"line\"> [view makeConstraints:^(MASConstraintMaker *make) &#123;    </div><div class=\"line\">        make.left.lessThanOrEqualTo(@10)</div><div class=\"line\"> &#125;];</div></pre></td></tr></table></figure>\n<p>view的左边距等价于 view.left = view.superview.left + 10</p>\n<p>4.按比例布局，如果各占一半的话，也可以不用multipliedBy，直接约束两个视图的width isEqual就行了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// topInnerView的宽度是高度的1/3</div><div class=\"line\">[self.topInnerView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">    make.width.equalTo(self.topInnerView.mas_height).multipliedBy(3);</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>5.你用NSAutoLyoutConstraints布局的时候需要设置视图的<code>view1.translatesAutoresizingMaskIntoConstraints = NO</code>，默认值是YES，等于YES的时候autoresize会影响autolayout布局，有时会发现效果不是自己想要的，不过如果你用masonry设置约束的时候，masonry会帮你把这个属性值设置为NO，你不用管它，写出来就是想提醒你。</p>\n<p>6.看完官方的demo，发现他们会把需要的每个约束都写上，但是有时候不需要全写上，如下面被我注释的代码，但是官方是没有注释的，既然人家官方都这样写，你是不是也应该这样写啊，别注释了，这样不容易出错，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"> UIView *superview = self;</div><div class=\"line\">    int padding = 10;</div><div class=\"line\"></div><div class=\"line\">    //if you want to use Masonry without the mas_ prefix</div><div class=\"line\">    //define MAS_SHORTHAND before importing Masonry.h see Masonry iOS Examples-Prefix.pch</div><div class=\"line\">    [greenView makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.top.greaterThanOrEqualTo(superview.top).offset(padding);</div><div class=\"line\">        make.left.equalTo(superview.left).offset(padding);</div><div class=\"line\">        make.bottom.equalTo(blueView.top).offset(-padding);</div><div class=\"line\">        make.right.equalTo(redView.left).offset(-padding);</div><div class=\"line\">        make.width.equalTo(redView).multipliedBy(1);</div><div class=\"line\"></div><div class=\"line\">        make.height.equalTo(redView.height);</div><div class=\"line\">        make.height.equalTo(blueView.height);</div><div class=\"line\">    &#125;];</div><div class=\"line\"></div><div class=\"line\">    //with is semantic and option</div><div class=\"line\">    [redView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.top.equalTo(superview.mas_top).with.offset(padding); //with with</div><div class=\"line\">        //make.left.equalTo(greenView.mas_right).offset(padding); //without with</div><div class=\"line\">        make.bottom.equalTo(blueView.mas_top).offset(-padding);</div><div class=\"line\">        make.right.equalTo(superview.mas_right).offset(-padding);</div><div class=\"line\">        // make.width.equalTo(greenView).multipliedBy(1);</div><div class=\"line\">        </div><div class=\"line\">        make.height.equalTo(@[greenView, blueView]); //can pass array of views</div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    [blueView mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.top.equalTo(greenView.mas_bottom).offset(padding);</div><div class=\"line\">        make.left.equalTo(superview.mas_left).offset(padding);</div><div class=\"line\">        make.bottom.equalTo(superview.mas_bottom).offset(-padding);</div><div class=\"line\">        make.right.equalTo(superview.mas_right).offset(-padding);</div><div class=\"line\">        make.height.equalTo(@[greenView.mas_height, redView.mas_height]); //can pass array of attributes</div><div class=\"line\">    &#125;];</div><div class=\"line\"></div><div class=\"line\">    return self;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>要注意blueView设置高度依赖的时候设置的是一个数组这样的用法</p>\n<p>7.masonry动画</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@implementation MASExampleUpdateView</div><div class=\"line\"></div><div class=\"line\">- (id)init &#123;</div><div class=\"line\">    self = [super init];</div><div class=\"line\">    if (!self) return nil;</div><div class=\"line\"></div><div class=\"line\">    self.growingButton = [UIButton buttonWithType:UIButtonTypeSystem];</div><div class=\"line\">    [self.growingButton setTitle:@&quot;Grow Me!&quot; forState:UIControlStateNormal];</div><div class=\"line\">    self.growingButton.layer.borderColor = UIColor.greenColor.CGColor;</div><div class=\"line\">    self.growingButton.layer.borderWidth = 3;</div><div class=\"line\">    [self.growingButton addTarget:self action:@selector(didTapGrowButton:) forControlEvents:UIControlEventTouchUpInside];</div><div class=\"line\">    [self addSubview:self.growingButton];</div><div class=\"line\">    self.buttonSize = CGSizeMake(100, 100);</div><div class=\"line\">    return self;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (BOOL)requiresConstraintBasedLayout</div><div class=\"line\">&#123;</div><div class=\"line\">    return YES;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// this is Apple&apos;s recommended place for adding/updating constraints</div><div class=\"line\">// 苹果推荐添加或或者更新约束的地方</div><div class=\"line\">- (void)updateConstraints &#123;</div><div class=\"line\"></div><div class=\"line\">    [self.growingButton updateConstraints:^(MASConstraintMaker *make) &#123;</div><div class=\"line\">        make.center.equalTo(self);</div><div class=\"line\">        make.width.equalTo(@(self.buttonSize.width)).priorityLow();</div><div class=\"line\">        make.height.equalTo(@(self.buttonSize.height)).priorityLow();</div><div class=\"line\">        make.width.lessThanOrEqualTo(self);</div><div class=\"line\">        make.height.lessThanOrEqualTo(self);</div><div class=\"line\">    &#125;];</div><div class=\"line\">    </div><div class=\"line\">    // according to apple super should be called at end of method</div><div class=\"line\">    [super updateConstraints];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)didTapGrowButton:(UIButton *)button &#123;</div><div class=\"line\">    self.buttonSize = CGSizeMake(self.buttonSize.width * 1.3, self.buttonSize.height * 1.3);</div><div class=\"line\"></div><div class=\"line\">    // tell constraints they need updating</div><div class=\"line\">    // 告诉约束系统要更新，系统会调用上面重写的updateConstraints方法</div><div class=\"line\">    [self setNeedsUpdateConstraints];</div><div class=\"line\"></div><div class=\"line\">    // update constraints now so we can animate the change,</div><div class=\"line\">    // it will be call by system automatically</div><div class=\"line\">    // 该方法不必手动调用</div><div class=\"line\">    // [self updateConstraintsIfNeeded];</div><div class=\"line\"></div><div class=\"line\">    // 可以用layoutIfNeeded来实现即时更新，还可以添加动画</div><div class=\"line\">    [UIView animateWithDuration:0.4 animations:^&#123;</div><div class=\"line\">        [self layoutIfNeeded]; // 需要在此处调用layoutIfNeeded方法才能产生动画</div><div class=\"line\">    &#125;];</div><div class=\"line\">&#125;</div><div class=\"line\">@end</div></pre></td></tr></table></figure>"},{"title":"看了我这篇RN你就入门了","date":"2016-12-30T08:44:51.000Z","_content":"\n## 前言\nReact认为每个组件都是一个有限状态机，状态与UI是一一对应的。我们只需管理好APP的state就能控制UI的显示，我们可以在每个component类中来通过`this.state`和`this.setState`来管理组件的state，但是如果APP交互比较多比较复杂，或者说该组件的某一状态需要和其他组件共享的话，这种方式就有点复杂了。\n有没有一种能统一管理APP状态的框架呢，这时候Redux就应用而生了，它是一个用于统一管理APP 所有的state的一个的js框架，它不建议我们在component中直接操作state，而是交给redux的store中进行处理。而react-redux是在react的基础上为移动端定制的状态管理容器。\n\n## redux的设计思想\n`（1）Web 应用是一个状态机，视图与状态是一一对应的。`\n`（2）所有的状态，保存在一个对象里面，由其统一管理。`\n`（3）遵循严格的单项数据流，一个组件所需要的数据，必须由父组件传过来，而不能像flux中直接从store取。`\n`（4）状态在组件中是‘只读’的，要交给redux处理`\n\n## redux概念\n有图有真相，先来一张redux数据流图，让你有一个整体的把握\n![redux flow](http://upload-images.jianshu.io/upload_images/1229960-9cae53256b3bba52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### action\n一般是不允许用户直接操作类的state，而是通过触发消息来执行对应的操作来产生一个新的state，用户或后台服务器可以通过store.dispatch(action)来向store发送一个消息（消息至少一个标识该消息的字段type，还可以添加其他字段用于数据传送），store会在内部根据消息的类型type去reducer中执行相应的处理，这个消息我们就叫他为Action，Action本质上是一个JavaScript对象。\n\n实际编码中一般会把整个应用的消息类型统一放在一个文件ActionTypes.js中\n\n```javascript\nexport const ADD_TODO = 'ADD_TODO'\n```\nAction的结构如下，各个字段的key的名字可以随意命名，但是类型的key一般都是type，数据类型最好为字符串\n\n```javascript\n{\n  type: ADD_TODO,\n  text: 'Build my first Redux app'\n}\n```\n随着程序越来越大，你会发现一个组件中的action太多太乱了，所以我们也会把action按业务分类放在各个指定的文件中，但是又有一个问题，若果每个action的字段都有五六个，我们在如下写法岂不是太乱了\n\n```javascript\nstore.dispatch({\n  type: ADD_TODO,\n  text: 'Build my first Redux app'\n})\n```\n于是乎我们就想起来可以将action对象封装在函数中，这个函数返回一个action对象，这个返回一个action对象的函数我们就称之为ActionCreator，如下所示\n\n```javascript\nexport let todo = ()=> {\n    return {\n\t \ttype: ADD_TODO,\n  \t\ttext: 'Build my first Redux app'\n\t}\n}\n```\n我们直接store.dispatch(todo)就好了，看着是不是整洁多了啊\n### reducer\n它是一个纯函数，要求有相同的输入（参数）就一定会有相同的输出，它会根据当前的state和action来进行逻辑处理返回一个新的state\n参数一：当前的state对象\n参数二：action对象\n返回值：产生一个新的state对象\n\n```javascript\nimport { VisibilityFilters } from './actions'\n//初始state\nconst initialState = {\n  visibilityFilter: VisibilityFilters.SHOW_ALL,\n  todos: []\n};\n\nfunction todoApp(state = initialState, action) {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return Object.assign({}, state, {\n        visibilityFilter: action.filter\n      })\n    default:\n      return state\n  }\n}\n```\n**注意**：reducer函数中一定不要去修改state，而是用Object.assign()函数生成一个新的state对象，如上所示\n\n\n**combineReducers**：随着应用变得复杂，把APP的所有状态都放在一个reducer中处理会造成reducer函数非常庞大，因此需要对 reducer 函数 进行拆分，拆分后的每一个子reducer独立负责管理 APP state 的一部分。combineReducers 辅助函数的作用是，把多个不同子reducer 函数合并成一个最终的根reducer ，最后将根 reducer 作为createStore的参数就可以创建store对象了。合并后的 reducer 可以调用各个子 reducer，并把它们的结果合并成一个 state 对象。state 对象的结构由传入的多个 reducer 的 key 决定。\n\n最终，state 对象的结构会是这样的：\n\n```javascript\n{\n  reducer1: ...\n  reducer2: ...\n}\n```\n使用方法如下所示\n\n```javascript\nimport { combineReducers } from 'redux';\nimport Strolling from './strollingReducer';\nimport Foods from './foodsReducer';\nimport FoodsList from './foodsListReducer';\nimport FoodCompare from './foodCompareReducer';\nimport FoodInfo from './foodInfoReducer';\nimport Search from './searchReducer';\nimport User from './userReducer';\n\nexport default rootReducer = combineReducers({\n    Strolling,\n    Foods,\n    FoodsList,\n    FoodCompare,\n    FoodInfo,\n    Search,\n    User,\n})\n\n// export default rootReducer = combineReducers({\n//     Strolling:Strolling,\n//     Foods:Foods,  \n//     FoodsList:FoodsList,\n//     FoodCompare:FoodCompare,\n//     FoodInfo:FoodInfo,\n//     Search:Search,\n//     User:User,\n// })\n \n// export default function rootReducer(state = {},action){\n\n//     return{\n//         Strolling: Strolling(state.Strolling,action),\n//         Foods:Foods(state.Foods,action),\n//         FoodsList:FoodsList(state.FoodsList,action),\n//         FoodCompare:FoodCompare(state.FoodCompare,action),\n//         FoodInfo:FoodInfo(state.FoodInfo,action),\n//         Search:Search(state.Search,action),\n//         User:User(state.User,action)\n//     }\n// }\n\n//以上三种方式是等价的,key可以设置也可以省略\n```\n**注意：我们不一定非要用combineReducers来组合子reducer，我们可以自定义类似功能的方法来组合，state的结构完全由我们决定。**\n### store\n一个应用只有一个store，store 就是用来维持应用所有的 state 树 的一个对象。 改变 store 内 state 的惟一途径是对它 dispatch 一个 action，它有三个函数\n\n* **getState()**\n\t返回应用当前的 state 树。\n* **dispatch(action)**\n\t分发 action。这是触发 state 变化的惟一途径。\n\t会使用当前 getState() 的结果和传入的 action 以同步方式的调用 store 的 reduce 函数。返回值会被作为下一个 state。从现在开始，这就成为了 getState() 的返回值，同时变化监听器(change listener)会被触发。\n* **subscribe(listener)**\n\t当state树发生变化的时候store会调用subscribe函数，我们可以传一个我们订制的函数作为参数来进行处理\n\t参数：一个函数\n\t返回值：返回一个解绑定函数\n\t```JavaScript\n\t//添加监听\n\tlet unsubscribe = store.subscribe(handleChange)\n\t//解除监听\n\tunsubscribe()\n\t```\n*  **replaceReducer(nextReducer)**\n\t替换 store 当前用来计算 state 的 reducer。\n\t这是一个高级 API。只有在你需要实现代码分隔，而且需要立即加载一些 reducer 的时候才可能会用到它。在实现 Redux 热加载机制的时候也可能会用到。\n\t\n\t\n## react-redux基础\n前言已经提到过react-redux的由来，这里在啰嗦一下，react-redux是redux作者专门为react native订制的，这样使用起来更方便，我们只需在我们的组件中通过属性props获取dispatch方法，就可以直接向store发送一个action，而不需要再获取store对象，通过store对象的dispatch方法发送。\nreact-redux有两宝，**provider**和**connect**，下面详细介绍一下。\n####  Provider：\n有一个store属性，我们要将应用的根标签放到Provider标签中，这样应用的所有标签就可以通过context来获取store对象了，但是我们一般不会通过此法来获取store对象，Provider是为了给connect函数使用的，这样才能通过connect函数的参数获取到store的state和dispatch了。\n\n#### connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\nconnect是一个高阶函数，`connect()`本身会返回一个函数变量（假如名字为func），给这个函数变量传递一个参数func(MainContainer)会生成一个MainContainer容器组件，形如下面的写法：\n\n```\nexport default connect((state) => {\n    const { Main } = state;\n    return {\n        Main\n    }\n})(MainContainer);\n```\n参数一：[mapStateToProps(state, [ownProps]): stateProps] (Function)\n>如果定义该参数，组件将会监听 Redux store 的变化。任何时候，只要 Redux store 发生改变，mapStateToProps 函数就会被调用。该回调函数必须返回一个纯对象，这个对象会与组件的 props 合并。如果你省略了这个参数，你的组件将不会监听 Redux store。如果指定了该回调函数中的第二个参数 ownProps，则该参数的值为传递到组件的 props，而且只要组件接收到新的 props，mapStateToProps 也会被调用（例如，当 props 接收到来自父组件一个小小的改动，那么你所使用的 ownProps 参数，mapStateToProps 都会被重新计算）。\n\n参数二：[mapDispatchToProps(dispatch, [ownProps]): dispatchProps] (Object or Function):\n>如果传递的是一个对象，那么每个定义在该对象的函数都将被当作 Redux action creator，而且这个对象会与 Redux store 绑定在一起，其中所定义的方法名将作为属性名，合并到组件的 props 中。如果传递的是一个函数，该函数将接收一个 dispatch 函数，然后由你来决定如何返回一个对象，这个对象通过 dispatch 函数与 action creator 以某种方式绑定在一起（提示：你也许会用到 Redux 的辅助函数 bindActionCreators()）。`如果你省略这个 mapDispatchToProps 参数，默认情况下，dispatch 会注入到你的组件 props 中。`如果指定了该回调函数中第二个参数 ownProps，该参数的值为传递到组件的 props，而且只要组件接收到新 props，mapDispatchToProps 也会被调用。\n\n参数三：[mergeProps(stateProps, dispatchProps, ownProps): props] (Function)\n>如果指定了这个参数，mapStateToProps() 与 mapDispatchToProps() 的执行结果和组件自身的 props 将传入到这个回调函数中。该回调函数返回的对象将作为 props 传递到被包装的组件中。你也许可以用这个回调函数，根据组件的 props 来筛选部分的 state 数据，或者把 props 中的某个特定变量与 action creator 绑定在一起。如果你省略这个参数，默认情况下返回 Object.assign({}, ownProps, stateProps, dispatchProps) 的结果。\n[options] (Object) 如果指定这个参数，可以定制 connector 的行为。\n\n参数四：[options] (Object) 如果指定这个参数，可以定制 connector 的行为。\n>[pure = true] (Boolean): 如果为 true，connector 将执行 shouldComponentUpdate 并且浅对比 mergeProps 的结果，避免不必要的更新，前提是当前组件是一个“纯”组件，它不依赖于任何的输入或 state 而只依赖于 props 和 Redux store 的 state。默认值为 true。\n[withRef = false] (Boolean): 如果为 true，connector 会保存一个对被包装组件实例的引用，该引用通过 getWrappedInstance() 方法获得。默认值为 false。\n\n## redux-redux使用\n上面说了provider和connect方法，下面是实用讲解\n\n创建store对象的js文件\n\n下面的代码里包括应用中间件redux-thunk，和创建store对象两步，[这里有更多关于中间件的详情](http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html)\n\n```\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/rootRudcer';\n//使用thunk中间件\nlet createStoreWithMiddleware = applyMiddleware(thunk)(createStore);\n//创建store对象，一个APP只有一个store对象\nlet store = createStoreWithMiddleware(rootReducer);\nexport default store;\n\n```\n\n程序的入口文件\n\n```\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nimport App from './containers/app';\n\nexport default class Root extends React.Component {\n    render() {\n        return (\n        \t//将APP的根视图组件包含在provider标签中\n            <Provider store = {store} >\n                <App />\n            </Provider>\n        )\n    }\n}\n```\n\n在容器组件中，将redux和容器组件关联起来，这里是redux与组件关联的地方，大多数童鞋使用redux最迷惑的地方估计就在这一块了。\n\n```\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport Brand from '../Components/Brand';\n\n//BrandContainer容器组件\nclass BrandContainer extends React.Component {\n    \n    render() {\n        return (\n        \t//把容器组件的属性传递给UI组件\n            <Brand {...this.props} />\n        )\n    }\n}\n\nexport default connect((state) => {\n    const { BrandReducer } = state;\n    return {\n        BrandReducer\n    }\n})(BrandContainer);\n```\n\n这样UI组件Brand中就可以通过属性获取dispatch方法以及处理后的最新state了\n\n```\nconst {dispatch, BrandReducer} = this.props;\n```\n\n下面来解释一下上面的代码\n\n将当前的BrandContainer组件关联起来，上面介绍了store中的state对象的结构会是这样的：\n\n{<br/>\n  reducer1: ...<br/>\n  reducer2: ...<br/>\n}\n\n所以可以通过解构的方式，获取对应模块的state，如下面的const { BrandReducer } = state;\n\n下面这一块代码的作用就是将store中state传递给关联的容器组件中，当store中的state发生变化的时候，connect的第一参数mapStateToProps回调函数就会被调用，并且将该回调函数的返回值映射成其关联组件的一个属性，这样容器组件的属性就会发生变化，而UI组件又通过{...this.props}将容器组件的属性传递给了UI组件，所以UI组件的属性也会发生变化，我们知道属性的变化会导致UI组件重新render。好了，我们就能知道为什么我们在UI组件中dispatch一个action后UI组件能更新了，因为UI组件的属性发生变化导致RN重绘了UI。\n\n## react native 组件的生命周期\n### 弄明白了这个图我认为你就能基本掌握RN了\n![redux flow](http://7xqg0d.com1.z0.glb.clouddn.com/hexoBlog/react-native%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F.PNG\n)\n注意：上图的最右边componentWillMount改成componentWillUnmount\n### 项目的推荐目录\n这种结构适合业务逻辑不太复杂的中小型项目，其优点是逻辑模块清晰，缺点是文件目录跨度较大，对于大型项目建议按项目的功能模块来划分。\n![项目的推荐目录](http://upload-images.jianshu.io/upload_images/1229960-e38436556eda2e19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 热更新\n暂时不说了，苹果粑粑这两天不高兴了，凡是热更新的APP不能上架，已上线的APP也应该收到了一份批评邮件了。\n![你尽管hot patch吧](http://upload-images.jianshu.io/upload_images/1229960-24ed9d2bcfd08bde.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 相关文章\n[React 实践心得：react-redux 之 connect 方法详解](http://www.tuicool.com/articles/MrmYN36)\n[Redux 入门教程（一）：基本用法](http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html)\n[redux中文文档](http://www.redux.org.cn/)\n\n*注：部分图片来源于互联网*\n\n[原文链接，转载请注明此链接](https://slpowercoder.github.io/2016/12/30/一名iOSer对react-redux的理解/)","source":"_posts/看了我这篇RN你就入门了.md","raw":"---\ntitle: 看了我这篇RN你就入门了\ndate: 2016-12-30 16:44:51\ncategories: react-native\ntags: [redux,react-redux,react-native]\n\n---\n\n## 前言\nReact认为每个组件都是一个有限状态机，状态与UI是一一对应的。我们只需管理好APP的state就能控制UI的显示，我们可以在每个component类中来通过`this.state`和`this.setState`来管理组件的state，但是如果APP交互比较多比较复杂，或者说该组件的某一状态需要和其他组件共享的话，这种方式就有点复杂了。\n有没有一种能统一管理APP状态的框架呢，这时候Redux就应用而生了，它是一个用于统一管理APP 所有的state的一个的js框架，它不建议我们在component中直接操作state，而是交给redux的store中进行处理。而react-redux是在react的基础上为移动端定制的状态管理容器。\n\n## redux的设计思想\n`（1）Web 应用是一个状态机，视图与状态是一一对应的。`\n`（2）所有的状态，保存在一个对象里面，由其统一管理。`\n`（3）遵循严格的单项数据流，一个组件所需要的数据，必须由父组件传过来，而不能像flux中直接从store取。`\n`（4）状态在组件中是‘只读’的，要交给redux处理`\n\n## redux概念\n有图有真相，先来一张redux数据流图，让你有一个整体的把握\n![redux flow](http://upload-images.jianshu.io/upload_images/1229960-9cae53256b3bba52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### action\n一般是不允许用户直接操作类的state，而是通过触发消息来执行对应的操作来产生一个新的state，用户或后台服务器可以通过store.dispatch(action)来向store发送一个消息（消息至少一个标识该消息的字段type，还可以添加其他字段用于数据传送），store会在内部根据消息的类型type去reducer中执行相应的处理，这个消息我们就叫他为Action，Action本质上是一个JavaScript对象。\n\n实际编码中一般会把整个应用的消息类型统一放在一个文件ActionTypes.js中\n\n```javascript\nexport const ADD_TODO = 'ADD_TODO'\n```\nAction的结构如下，各个字段的key的名字可以随意命名，但是类型的key一般都是type，数据类型最好为字符串\n\n```javascript\n{\n  type: ADD_TODO,\n  text: 'Build my first Redux app'\n}\n```\n随着程序越来越大，你会发现一个组件中的action太多太乱了，所以我们也会把action按业务分类放在各个指定的文件中，但是又有一个问题，若果每个action的字段都有五六个，我们在如下写法岂不是太乱了\n\n```javascript\nstore.dispatch({\n  type: ADD_TODO,\n  text: 'Build my first Redux app'\n})\n```\n于是乎我们就想起来可以将action对象封装在函数中，这个函数返回一个action对象，这个返回一个action对象的函数我们就称之为ActionCreator，如下所示\n\n```javascript\nexport let todo = ()=> {\n    return {\n\t \ttype: ADD_TODO,\n  \t\ttext: 'Build my first Redux app'\n\t}\n}\n```\n我们直接store.dispatch(todo)就好了，看着是不是整洁多了啊\n### reducer\n它是一个纯函数，要求有相同的输入（参数）就一定会有相同的输出，它会根据当前的state和action来进行逻辑处理返回一个新的state\n参数一：当前的state对象\n参数二：action对象\n返回值：产生一个新的state对象\n\n```javascript\nimport { VisibilityFilters } from './actions'\n//初始state\nconst initialState = {\n  visibilityFilter: VisibilityFilters.SHOW_ALL,\n  todos: []\n};\n\nfunction todoApp(state = initialState, action) {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return Object.assign({}, state, {\n        visibilityFilter: action.filter\n      })\n    default:\n      return state\n  }\n}\n```\n**注意**：reducer函数中一定不要去修改state，而是用Object.assign()函数生成一个新的state对象，如上所示\n\n\n**combineReducers**：随着应用变得复杂，把APP的所有状态都放在一个reducer中处理会造成reducer函数非常庞大，因此需要对 reducer 函数 进行拆分，拆分后的每一个子reducer独立负责管理 APP state 的一部分。combineReducers 辅助函数的作用是，把多个不同子reducer 函数合并成一个最终的根reducer ，最后将根 reducer 作为createStore的参数就可以创建store对象了。合并后的 reducer 可以调用各个子 reducer，并把它们的结果合并成一个 state 对象。state 对象的结构由传入的多个 reducer 的 key 决定。\n\n最终，state 对象的结构会是这样的：\n\n```javascript\n{\n  reducer1: ...\n  reducer2: ...\n}\n```\n使用方法如下所示\n\n```javascript\nimport { combineReducers } from 'redux';\nimport Strolling from './strollingReducer';\nimport Foods from './foodsReducer';\nimport FoodsList from './foodsListReducer';\nimport FoodCompare from './foodCompareReducer';\nimport FoodInfo from './foodInfoReducer';\nimport Search from './searchReducer';\nimport User from './userReducer';\n\nexport default rootReducer = combineReducers({\n    Strolling,\n    Foods,\n    FoodsList,\n    FoodCompare,\n    FoodInfo,\n    Search,\n    User,\n})\n\n// export default rootReducer = combineReducers({\n//     Strolling:Strolling,\n//     Foods:Foods,  \n//     FoodsList:FoodsList,\n//     FoodCompare:FoodCompare,\n//     FoodInfo:FoodInfo,\n//     Search:Search,\n//     User:User,\n// })\n \n// export default function rootReducer(state = {},action){\n\n//     return{\n//         Strolling: Strolling(state.Strolling,action),\n//         Foods:Foods(state.Foods,action),\n//         FoodsList:FoodsList(state.FoodsList,action),\n//         FoodCompare:FoodCompare(state.FoodCompare,action),\n//         FoodInfo:FoodInfo(state.FoodInfo,action),\n//         Search:Search(state.Search,action),\n//         User:User(state.User,action)\n//     }\n// }\n\n//以上三种方式是等价的,key可以设置也可以省略\n```\n**注意：我们不一定非要用combineReducers来组合子reducer，我们可以自定义类似功能的方法来组合，state的结构完全由我们决定。**\n### store\n一个应用只有一个store，store 就是用来维持应用所有的 state 树 的一个对象。 改变 store 内 state 的惟一途径是对它 dispatch 一个 action，它有三个函数\n\n* **getState()**\n\t返回应用当前的 state 树。\n* **dispatch(action)**\n\t分发 action。这是触发 state 变化的惟一途径。\n\t会使用当前 getState() 的结果和传入的 action 以同步方式的调用 store 的 reduce 函数。返回值会被作为下一个 state。从现在开始，这就成为了 getState() 的返回值，同时变化监听器(change listener)会被触发。\n* **subscribe(listener)**\n\t当state树发生变化的时候store会调用subscribe函数，我们可以传一个我们订制的函数作为参数来进行处理\n\t参数：一个函数\n\t返回值：返回一个解绑定函数\n\t```JavaScript\n\t//添加监听\n\tlet unsubscribe = store.subscribe(handleChange)\n\t//解除监听\n\tunsubscribe()\n\t```\n*  **replaceReducer(nextReducer)**\n\t替换 store 当前用来计算 state 的 reducer。\n\t这是一个高级 API。只有在你需要实现代码分隔，而且需要立即加载一些 reducer 的时候才可能会用到它。在实现 Redux 热加载机制的时候也可能会用到。\n\t\n\t\n## react-redux基础\n前言已经提到过react-redux的由来，这里在啰嗦一下，react-redux是redux作者专门为react native订制的，这样使用起来更方便，我们只需在我们的组件中通过属性props获取dispatch方法，就可以直接向store发送一个action，而不需要再获取store对象，通过store对象的dispatch方法发送。\nreact-redux有两宝，**provider**和**connect**，下面详细介绍一下。\n####  Provider：\n有一个store属性，我们要将应用的根标签放到Provider标签中，这样应用的所有标签就可以通过context来获取store对象了，但是我们一般不会通过此法来获取store对象，Provider是为了给connect函数使用的，这样才能通过connect函数的参数获取到store的state和dispatch了。\n\n#### connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\nconnect是一个高阶函数，`connect()`本身会返回一个函数变量（假如名字为func），给这个函数变量传递一个参数func(MainContainer)会生成一个MainContainer容器组件，形如下面的写法：\n\n```\nexport default connect((state) => {\n    const { Main } = state;\n    return {\n        Main\n    }\n})(MainContainer);\n```\n参数一：[mapStateToProps(state, [ownProps]): stateProps] (Function)\n>如果定义该参数，组件将会监听 Redux store 的变化。任何时候，只要 Redux store 发生改变，mapStateToProps 函数就会被调用。该回调函数必须返回一个纯对象，这个对象会与组件的 props 合并。如果你省略了这个参数，你的组件将不会监听 Redux store。如果指定了该回调函数中的第二个参数 ownProps，则该参数的值为传递到组件的 props，而且只要组件接收到新的 props，mapStateToProps 也会被调用（例如，当 props 接收到来自父组件一个小小的改动，那么你所使用的 ownProps 参数，mapStateToProps 都会被重新计算）。\n\n参数二：[mapDispatchToProps(dispatch, [ownProps]): dispatchProps] (Object or Function):\n>如果传递的是一个对象，那么每个定义在该对象的函数都将被当作 Redux action creator，而且这个对象会与 Redux store 绑定在一起，其中所定义的方法名将作为属性名，合并到组件的 props 中。如果传递的是一个函数，该函数将接收一个 dispatch 函数，然后由你来决定如何返回一个对象，这个对象通过 dispatch 函数与 action creator 以某种方式绑定在一起（提示：你也许会用到 Redux 的辅助函数 bindActionCreators()）。`如果你省略这个 mapDispatchToProps 参数，默认情况下，dispatch 会注入到你的组件 props 中。`如果指定了该回调函数中第二个参数 ownProps，该参数的值为传递到组件的 props，而且只要组件接收到新 props，mapDispatchToProps 也会被调用。\n\n参数三：[mergeProps(stateProps, dispatchProps, ownProps): props] (Function)\n>如果指定了这个参数，mapStateToProps() 与 mapDispatchToProps() 的执行结果和组件自身的 props 将传入到这个回调函数中。该回调函数返回的对象将作为 props 传递到被包装的组件中。你也许可以用这个回调函数，根据组件的 props 来筛选部分的 state 数据，或者把 props 中的某个特定变量与 action creator 绑定在一起。如果你省略这个参数，默认情况下返回 Object.assign({}, ownProps, stateProps, dispatchProps) 的结果。\n[options] (Object) 如果指定这个参数，可以定制 connector 的行为。\n\n参数四：[options] (Object) 如果指定这个参数，可以定制 connector 的行为。\n>[pure = true] (Boolean): 如果为 true，connector 将执行 shouldComponentUpdate 并且浅对比 mergeProps 的结果，避免不必要的更新，前提是当前组件是一个“纯”组件，它不依赖于任何的输入或 state 而只依赖于 props 和 Redux store 的 state。默认值为 true。\n[withRef = false] (Boolean): 如果为 true，connector 会保存一个对被包装组件实例的引用，该引用通过 getWrappedInstance() 方法获得。默认值为 false。\n\n## redux-redux使用\n上面说了provider和connect方法，下面是实用讲解\n\n创建store对象的js文件\n\n下面的代码里包括应用中间件redux-thunk，和创建store对象两步，[这里有更多关于中间件的详情](http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html)\n\n```\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/rootRudcer';\n//使用thunk中间件\nlet createStoreWithMiddleware = applyMiddleware(thunk)(createStore);\n//创建store对象，一个APP只有一个store对象\nlet store = createStoreWithMiddleware(rootReducer);\nexport default store;\n\n```\n\n程序的入口文件\n\n```\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nimport App from './containers/app';\n\nexport default class Root extends React.Component {\n    render() {\n        return (\n        \t//将APP的根视图组件包含在provider标签中\n            <Provider store = {store} >\n                <App />\n            </Provider>\n        )\n    }\n}\n```\n\n在容器组件中，将redux和容器组件关联起来，这里是redux与组件关联的地方，大多数童鞋使用redux最迷惑的地方估计就在这一块了。\n\n```\nimport React from 'react';\nimport {connect} from 'react-redux';\nimport Brand from '../Components/Brand';\n\n//BrandContainer容器组件\nclass BrandContainer extends React.Component {\n    \n    render() {\n        return (\n        \t//把容器组件的属性传递给UI组件\n            <Brand {...this.props} />\n        )\n    }\n}\n\nexport default connect((state) => {\n    const { BrandReducer } = state;\n    return {\n        BrandReducer\n    }\n})(BrandContainer);\n```\n\n这样UI组件Brand中就可以通过属性获取dispatch方法以及处理后的最新state了\n\n```\nconst {dispatch, BrandReducer} = this.props;\n```\n\n下面来解释一下上面的代码\n\n将当前的BrandContainer组件关联起来，上面介绍了store中的state对象的结构会是这样的：\n\n{<br/>\n  reducer1: ...<br/>\n  reducer2: ...<br/>\n}\n\n所以可以通过解构的方式，获取对应模块的state，如下面的const { BrandReducer } = state;\n\n下面这一块代码的作用就是将store中state传递给关联的容器组件中，当store中的state发生变化的时候，connect的第一参数mapStateToProps回调函数就会被调用，并且将该回调函数的返回值映射成其关联组件的一个属性，这样容器组件的属性就会发生变化，而UI组件又通过{...this.props}将容器组件的属性传递给了UI组件，所以UI组件的属性也会发生变化，我们知道属性的变化会导致UI组件重新render。好了，我们就能知道为什么我们在UI组件中dispatch一个action后UI组件能更新了，因为UI组件的属性发生变化导致RN重绘了UI。\n\n## react native 组件的生命周期\n### 弄明白了这个图我认为你就能基本掌握RN了\n![redux flow](http://7xqg0d.com1.z0.glb.clouddn.com/hexoBlog/react-native%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F.PNG\n)\n注意：上图的最右边componentWillMount改成componentWillUnmount\n### 项目的推荐目录\n这种结构适合业务逻辑不太复杂的中小型项目，其优点是逻辑模块清晰，缺点是文件目录跨度较大，对于大型项目建议按项目的功能模块来划分。\n![项目的推荐目录](http://upload-images.jianshu.io/upload_images/1229960-e38436556eda2e19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 热更新\n暂时不说了，苹果粑粑这两天不高兴了，凡是热更新的APP不能上架，已上线的APP也应该收到了一份批评邮件了。\n![你尽管hot patch吧](http://upload-images.jianshu.io/upload_images/1229960-24ed9d2bcfd08bde.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 相关文章\n[React 实践心得：react-redux 之 connect 方法详解](http://www.tuicool.com/articles/MrmYN36)\n[Redux 入门教程（一）：基本用法](http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html)\n[redux中文文档](http://www.redux.org.cn/)\n\n*注：部分图片来源于互联网*\n\n[原文链接，转载请注明此链接](https://slpowercoder.github.io/2016/12/30/一名iOSer对react-redux的理解/)","slug":"看了我这篇RN你就入门了","published":1,"updated":"2018-07-08T05:50:40.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjlmeouzj0023v8tj9vnns6yx","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>React认为每个组件都是一个有限状态机，状态与UI是一一对应的。我们只需管理好APP的state就能控制UI的显示，我们可以在每个component类中来通过<code>this.state</code>和<code>this.setState</code>来管理组件的state，但是如果APP交互比较多比较复杂，或者说该组件的某一状态需要和其他组件共享的话，这种方式就有点复杂了。<br>有没有一种能统一管理APP状态的框架呢，这时候Redux就应用而生了，它是一个用于统一管理APP 所有的state的一个的js框架，它不建议我们在component中直接操作state，而是交给redux的store中进行处理。而react-redux是在react的基础上为移动端定制的状态管理容器。</p>\n<h2 id=\"redux的设计思想\"><a href=\"#redux的设计思想\" class=\"headerlink\" title=\"redux的设计思想\"></a>redux的设计思想</h2><p><code>（1）Web 应用是一个状态机，视图与状态是一一对应的。</code><br><code>（2）所有的状态，保存在一个对象里面，由其统一管理。</code><br><code>（3）遵循严格的单项数据流，一个组件所需要的数据，必须由父组件传过来，而不能像flux中直接从store取。</code><br><code>（4）状态在组件中是‘只读’的，要交给redux处理</code></p>\n<h2 id=\"redux概念\"><a href=\"#redux概念\" class=\"headerlink\" title=\"redux概念\"></a>redux概念</h2><p>有图有真相，先来一张redux数据流图，让你有一个整体的把握<br><img src=\"http://upload-images.jianshu.io/upload_images/1229960-9cae53256b3bba52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"redux flow\"></p>\n<h3 id=\"action\"><a href=\"#action\" class=\"headerlink\" title=\"action\"></a>action</h3><p>一般是不允许用户直接操作类的state，而是通过触发消息来执行对应的操作来产生一个新的state，用户或后台服务器可以通过store.dispatch(action)来向store发送一个消息（消息至少一个标识该消息的字段type，还可以添加其他字段用于数据传送），store会在内部根据消息的类型type去reducer中执行相应的处理，这个消息我们就叫他为Action，Action本质上是一个JavaScript对象。</p>\n<p>实际编码中一般会把整个应用的消息类型统一放在一个文件ActionTypes.js中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ADD_TODO = <span class=\"string\">'ADD_TODO'</span></div></pre></td></tr></table></figure>\n<p>Action的结构如下，各个字段的key的名字可以随意命名，但是类型的key一般都是type，数据类型最好为字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  type: ADD_TODO,</div><div class=\"line\">  text: <span class=\"string\">'Build my first Redux app'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>随着程序越来越大，你会发现一个组件中的action太多太乱了，所以我们也会把action按业务分类放在各个指定的文件中，但是又有一个问题，若果每个action的字段都有五六个，我们在如下写法岂不是太乱了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">store.dispatch(&#123;</div><div class=\"line\">  type: ADD_TODO,</div><div class=\"line\">  text: <span class=\"string\">'Build my first Redux app'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>于是乎我们就想起来可以将action对象封装在函数中，这个函数返回一个action对象，这个返回一个action对象的函数我们就称之为ActionCreator，如下所示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> todo = ()=&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t \ttype: ADD_TODO,</div><div class=\"line\">  \t\ttext: <span class=\"string\">'Build my first Redux app'</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们直接store.dispatch(todo)就好了，看着是不是整洁多了啊</p>\n<h3 id=\"reducer\"><a href=\"#reducer\" class=\"headerlink\" title=\"reducer\"></a>reducer</h3><p>它是一个纯函数，要求有相同的输入（参数）就一定会有相同的输出，它会根据当前的state和action来进行逻辑处理返回一个新的state<br>参数一：当前的state对象<br>参数二：action对象<br>返回值：产生一个新的state对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; VisibilityFilters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./actions'</span></div><div class=\"line\"><span class=\"comment\">//初始state</span></div><div class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</div><div class=\"line\">  visibilityFilter: VisibilityFilters.SHOW_ALL,</div><div class=\"line\">  todos: []</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">todoApp</span>(<span class=\"params\">state = initialState, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> SET_VISIBILITY_FILTER:</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123;</div><div class=\"line\">        visibilityFilter: action.filter</div><div class=\"line\">      &#125;)</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> state</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意</strong>：reducer函数中一定不要去修改state，而是用Object.assign()函数生成一个新的state对象，如上所示</p>\n<p><strong>combineReducers</strong>：随着应用变得复杂，把APP的所有状态都放在一个reducer中处理会造成reducer函数非常庞大，因此需要对 reducer 函数 进行拆分，拆分后的每一个子reducer独立负责管理 APP state 的一部分。combineReducers 辅助函数的作用是，把多个不同子reducer 函数合并成一个最终的根reducer ，最后将根 reducer 作为createStore的参数就可以创建store对象了。合并后的 reducer 可以调用各个子 reducer，并把它们的结果合并成一个 state 对象。state 对象的结构由传入的多个 reducer 的 key 决定。</p>\n<p>最终，state 对象的结构会是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  reducer1: ...</div><div class=\"line\">  reducer2: ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用方法如下所示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Strolling <span class=\"keyword\">from</span> <span class=\"string\">'./strollingReducer'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Foods <span class=\"keyword\">from</span> <span class=\"string\">'./foodsReducer'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> FoodsList <span class=\"keyword\">from</span> <span class=\"string\">'./foodsListReducer'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> FoodCompare <span class=\"keyword\">from</span> <span class=\"string\">'./foodCompareReducer'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> FoodInfo <span class=\"keyword\">from</span> <span class=\"string\">'./foodInfoReducer'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Search <span class=\"keyword\">from</span> <span class=\"string\">'./searchReducer'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> User <span class=\"keyword\">from</span> <span class=\"string\">'./userReducer'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> rootReducer = combineReducers(&#123;</div><div class=\"line\">    Strolling,</div><div class=\"line\">    Foods,</div><div class=\"line\">    FoodsList,</div><div class=\"line\">    FoodCompare,</div><div class=\"line\">    FoodInfo,</div><div class=\"line\">    Search,</div><div class=\"line\">    User,</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// export default rootReducer = combineReducers(&#123;</span></div><div class=\"line\"><span class=\"comment\">//     Strolling:Strolling,</span></div><div class=\"line\"><span class=\"comment\">//     Foods:Foods,  </span></div><div class=\"line\"><span class=\"comment\">//     FoodsList:FoodsList,</span></div><div class=\"line\"><span class=\"comment\">//     FoodCompare:FoodCompare,</span></div><div class=\"line\"><span class=\"comment\">//     FoodInfo:FoodInfo,</span></div><div class=\"line\"><span class=\"comment\">//     Search:Search,</span></div><div class=\"line\"><span class=\"comment\">//     User:User,</span></div><div class=\"line\"><span class=\"comment\">// &#125;)</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// export default function rootReducer(state = &#123;&#125;,action)&#123;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//     return&#123;</span></div><div class=\"line\"><span class=\"comment\">//         Strolling: Strolling(state.Strolling,action),</span></div><div class=\"line\"><span class=\"comment\">//         Foods:Foods(state.Foods,action),</span></div><div class=\"line\"><span class=\"comment\">//         FoodsList:FoodsList(state.FoodsList,action),</span></div><div class=\"line\"><span class=\"comment\">//         FoodCompare:FoodCompare(state.FoodCompare,action),</span></div><div class=\"line\"><span class=\"comment\">//         FoodInfo:FoodInfo(state.FoodInfo,action),</span></div><div class=\"line\"><span class=\"comment\">//         Search:Search(state.Search,action),</span></div><div class=\"line\"><span class=\"comment\">//         User:User(state.User,action)</span></div><div class=\"line\"><span class=\"comment\">//     &#125;</span></div><div class=\"line\"><span class=\"comment\">// &#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//以上三种方式是等价的,key可以设置也可以省略</span></div></pre></td></tr></table></figure>\n<p><strong>注意：我们不一定非要用combineReducers来组合子reducer，我们可以自定义类似功能的方法来组合，state的结构完全由我们决定。</strong></p>\n<h3 id=\"store\"><a href=\"#store\" class=\"headerlink\" title=\"store\"></a>store</h3><p>一个应用只有一个store，store 就是用来维持应用所有的 state 树 的一个对象。 改变 store 内 state 的惟一途径是对它 dispatch 一个 action，它有三个函数</p>\n<ul>\n<li><strong>getState()</strong><br>  返回应用当前的 state 树。</li>\n<li><strong>dispatch(action)</strong><br>  分发 action。这是触发 state 变化的惟一途径。<br>  会使用当前 getState() 的结果和传入的 action 以同步方式的调用 store 的 reduce 函数。返回值会被作为下一个 state。从现在开始，这就成为了 getState() 的返回值，同时变化监听器(change listener)会被触发。</li>\n<li><p><strong>subscribe(listener)</strong><br>  当state树发生变化的时候store会调用subscribe函数，我们可以传一个我们订制的函数作为参数来进行处理<br>  参数：一个函数<br>  返回值：返回一个解绑定函数</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//添加监听</span></div><div class=\"line\"><span class=\"keyword\">let</span> unsubscribe = store.subscribe(handleChange)</div><div class=\"line\"><span class=\"comment\">//解除监听</span></div><div class=\"line\">unsubscribe()</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>replaceReducer(nextReducer)</strong><br> 替换 store 当前用来计算 state 的 reducer。<br> 这是一个高级 API。只有在你需要实现代码分隔，而且需要立即加载一些 reducer 的时候才可能会用到它。在实现 Redux 热加载机制的时候也可能会用到。</p>\n</li>\n</ul>\n<h2 id=\"react-redux基础\"><a href=\"#react-redux基础\" class=\"headerlink\" title=\"react-redux基础\"></a>react-redux基础</h2><p>前言已经提到过react-redux的由来，这里在啰嗦一下，react-redux是redux作者专门为react native订制的，这样使用起来更方便，我们只需在我们的组件中通过属性props获取dispatch方法，就可以直接向store发送一个action，而不需要再获取store对象，通过store对象的dispatch方法发送。<br>react-redux有两宝，<strong>provider</strong>和<strong>connect</strong>，下面详细介绍一下。</p>\n<h4 id=\"Provider：\"><a href=\"#Provider：\" class=\"headerlink\" title=\"Provider：\"></a>Provider：</h4><p>有一个store属性，我们要将应用的根标签放到Provider标签中，这样应用的所有标签就可以通过context来获取store对象了，但是我们一般不会通过此法来获取store对象，Provider是为了给connect函数使用的，这样才能通过connect函数的参数获取到store的state和dispatch了。</p>\n<h4 id=\"connect-mapStateToProps-mapDispatchToProps-mergeProps-options\"><a href=\"#connect-mapStateToProps-mapDispatchToProps-mergeProps-options\" class=\"headerlink\" title=\"connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\"></a>connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</h4><p>connect是一个高阶函数，<code>connect()</code>本身会返回一个函数变量（假如名字为func），给这个函数变量传递一个参数func(MainContainer)会生成一个MainContainer容器组件，形如下面的写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">export default connect((state) =&gt; &#123;</div><div class=\"line\">    const &#123; Main &#125; = state;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        Main</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)(MainContainer);</div></pre></td></tr></table></figure>\n<p>参数一：[mapStateToProps(state, [ownProps]): stateProps] (Function)</p>\n<blockquote>\n<p>如果定义该参数，组件将会监听 Redux store 的变化。任何时候，只要 Redux store 发生改变，mapStateToProps 函数就会被调用。该回调函数必须返回一个纯对象，这个对象会与组件的 props 合并。如果你省略了这个参数，你的组件将不会监听 Redux store。如果指定了该回调函数中的第二个参数 ownProps，则该参数的值为传递到组件的 props，而且只要组件接收到新的 props，mapStateToProps 也会被调用（例如，当 props 接收到来自父组件一个小小的改动，那么你所使用的 ownProps 参数，mapStateToProps 都会被重新计算）。</p>\n</blockquote>\n<p>参数二：[mapDispatchToProps(dispatch, [ownProps]): dispatchProps] (Object or Function):</p>\n<blockquote>\n<p>如果传递的是一个对象，那么每个定义在该对象的函数都将被当作 Redux action creator，而且这个对象会与 Redux store 绑定在一起，其中所定义的方法名将作为属性名，合并到组件的 props 中。如果传递的是一个函数，该函数将接收一个 dispatch 函数，然后由你来决定如何返回一个对象，这个对象通过 dispatch 函数与 action creator 以某种方式绑定在一起（提示：你也许会用到 Redux 的辅助函数 bindActionCreators()）。<code>如果你省略这个 mapDispatchToProps 参数，默认情况下，dispatch 会注入到你的组件 props 中。</code>如果指定了该回调函数中第二个参数 ownProps，该参数的值为传递到组件的 props，而且只要组件接收到新 props，mapDispatchToProps 也会被调用。</p>\n</blockquote>\n<p>参数三：[mergeProps(stateProps, dispatchProps, ownProps): props] (Function)</p>\n<blockquote>\n<p>如果指定了这个参数，mapStateToProps() 与 mapDispatchToProps() 的执行结果和组件自身的 props 将传入到这个回调函数中。该回调函数返回的对象将作为 props 传递到被包装的组件中。你也许可以用这个回调函数，根据组件的 props 来筛选部分的 state 数据，或者把 props 中的某个特定变量与 action creator 绑定在一起。如果你省略这个参数，默认情况下返回 Object.assign({}, ownProps, stateProps, dispatchProps) 的结果。<br>[options] (Object) 如果指定这个参数，可以定制 connector 的行为。</p>\n</blockquote>\n<p>参数四：[options] (Object) 如果指定这个参数，可以定制 connector 的行为。</p>\n<blockquote>\n<p>[pure = true] (Boolean): 如果为 true，connector 将执行 shouldComponentUpdate 并且浅对比 mergeProps 的结果，避免不必要的更新，前提是当前组件是一个“纯”组件，它不依赖于任何的输入或 state 而只依赖于 props 和 Redux store 的 state。默认值为 true。<br>[withRef = false] (Boolean): 如果为 true，connector 会保存一个对被包装组件实例的引用，该引用通过 getWrappedInstance() 方法获得。默认值为 false。</p>\n</blockquote>\n<h2 id=\"redux-redux使用\"><a href=\"#redux-redux使用\" class=\"headerlink\" title=\"redux-redux使用\"></a>redux-redux使用</h2><p>上面说了provider和connect方法，下面是实用讲解</p>\n<p>创建store对象的js文件</p>\n<p>下面的代码里包括应用中间件redux-thunk，和创建store对象两步，<a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html\" target=\"_blank\" rel=\"external\">这里有更多关于中间件的详情</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; createStore, applyMiddleware &#125; from &apos;redux&apos;;</div><div class=\"line\">import thunk from &apos;redux-thunk&apos;;</div><div class=\"line\">import rootReducer from &apos;../reducers/rootRudcer&apos;;</div><div class=\"line\">//使用thunk中间件</div><div class=\"line\">let createStoreWithMiddleware = applyMiddleware(thunk)(createStore);</div><div class=\"line\">//创建store对象，一个APP只有一个store对象</div><div class=\"line\">let store = createStoreWithMiddleware(rootReducer);</div><div class=\"line\">export default store;</div></pre></td></tr></table></figure>\n<p>程序的入口文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; Provider &#125; from &apos;react-redux&apos;;</div><div class=\"line\">import store from &apos;./store/store&apos;;</div><div class=\"line\"></div><div class=\"line\">import App from &apos;./containers/app&apos;;</div><div class=\"line\"></div><div class=\"line\">export default class Root extends React.Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return (</div><div class=\"line\">        \t//将APP的根视图组件包含在provider标签中</div><div class=\"line\">            &lt;Provider store = &#123;store&#125; &gt;</div><div class=\"line\">                &lt;App /&gt;</div><div class=\"line\">            &lt;/Provider&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在容器组件中，将redux和容器组件关联起来，这里是redux与组件关联的地方，大多数童鞋使用redux最迷惑的地方估计就在这一块了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123;connect&#125; from &apos;react-redux&apos;;</div><div class=\"line\">import Brand from &apos;../Components/Brand&apos;;</div><div class=\"line\"></div><div class=\"line\">//BrandContainer容器组件</div><div class=\"line\">class BrandContainer extends React.Component &#123;</div><div class=\"line\">    </div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return (</div><div class=\"line\">        \t//把容器组件的属性传递给UI组件</div><div class=\"line\">            &lt;Brand &#123;...this.props&#125; /&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default connect((state) =&gt; &#123;</div><div class=\"line\">    const &#123; BrandReducer &#125; = state;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        BrandReducer</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)(BrandContainer);</div></pre></td></tr></table></figure>\n<p>这样UI组件Brand中就可以通过属性获取dispatch方法以及处理后的最新state了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;dispatch, BrandReducer&#125; = this.props;</div></pre></td></tr></table></figure>\n<p>下面来解释一下上面的代码</p>\n<p>将当前的BrandContainer组件关联起来，上面介绍了store中的state对象的结构会是这样的：</p>\n<p>{<br><br>  reducer1: …<br><br>  reducer2: …<br><br>}</p>\n<p>所以可以通过解构的方式，获取对应模块的state，如下面的const { BrandReducer } = state;</p>\n<p>下面这一块代码的作用就是将store中state传递给关联的容器组件中，当store中的state发生变化的时候，connect的第一参数mapStateToProps回调函数就会被调用，并且将该回调函数的返回值映射成其关联组件的一个属性，这样容器组件的属性就会发生变化，而UI组件又通过{…this.props}将容器组件的属性传递给了UI组件，所以UI组件的属性也会发生变化，我们知道属性的变化会导致UI组件重新render。好了，我们就能知道为什么我们在UI组件中dispatch一个action后UI组件能更新了，因为UI组件的属性发生变化导致RN重绘了UI。</p>\n<h2 id=\"react-native-组件的生命周期\"><a href=\"#react-native-组件的生命周期\" class=\"headerlink\" title=\"react native 组件的生命周期\"></a>react native 组件的生命周期</h2><h3 id=\"弄明白了这个图我认为你就能基本掌握RN了\"><a href=\"#弄明白了这个图我认为你就能基本掌握RN了\" class=\"headerlink\" title=\"弄明白了这个图我认为你就能基本掌握RN了\"></a>弄明白了这个图我认为你就能基本掌握RN了</h3><p><img src=\"http://7xqg0d.com1.z0.glb.clouddn.com/hexoBlog/react-native%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F.PNG\" alt=\"redux flow\"><br>注意：上图的最右边componentWillMount改成componentWillUnmount</p>\n<h3 id=\"项目的推荐目录\"><a href=\"#项目的推荐目录\" class=\"headerlink\" title=\"项目的推荐目录\"></a>项目的推荐目录</h3><p>这种结构适合业务逻辑不太复杂的中小型项目，其优点是逻辑模块清晰，缺点是文件目录跨度较大，对于大型项目建议按项目的功能模块来划分。<br><img src=\"http://upload-images.jianshu.io/upload_images/1229960-e38436556eda2e19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"项目的推荐目录\"></p>\n<h2 id=\"热更新\"><a href=\"#热更新\" class=\"headerlink\" title=\"热更新\"></a>热更新</h2><p>暂时不说了，苹果粑粑这两天不高兴了，凡是热更新的APP不能上架，已上线的APP也应该收到了一份批评邮件了。<br><img src=\"http://upload-images.jianshu.io/upload_images/1229960-24ed9d2bcfd08bde.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"你尽管hot patch吧\"></p>\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><p><a href=\"http://www.tuicool.com/articles/MrmYN36\" target=\"_blank\" rel=\"external\">React 实践心得：react-redux 之 connect 方法详解</a><br><a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\" target=\"_blank\" rel=\"external\">Redux 入门教程（一）：基本用法</a><br><a href=\"http://www.redux.org.cn/\" target=\"_blank\" rel=\"external\">redux中文文档</a></p>\n<p><em>注：部分图片来源于互联网</em></p>\n<p><a href=\"https://slpowercoder.github.io/2016/12/30/一名iOSer对react-redux的理解/\">原文链接，转载请注明此链接</a></p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>React认为每个组件都是一个有限状态机，状态与UI是一一对应的。我们只需管理好APP的state就能控制UI的显示，我们可以在每个component类中来通过<code>this.state</code>和<code>this.setState</code>来管理组件的state，但是如果APP交互比较多比较复杂，或者说该组件的某一状态需要和其他组件共享的话，这种方式就有点复杂了。<br>有没有一种能统一管理APP状态的框架呢，这时候Redux就应用而生了，它是一个用于统一管理APP 所有的state的一个的js框架，它不建议我们在component中直接操作state，而是交给redux的store中进行处理。而react-redux是在react的基础上为移动端定制的状态管理容器。</p>\n<h2 id=\"redux的设计思想\"><a href=\"#redux的设计思想\" class=\"headerlink\" title=\"redux的设计思想\"></a>redux的设计思想</h2><p><code>（1）Web 应用是一个状态机，视图与状态是一一对应的。</code><br><code>（2）所有的状态，保存在一个对象里面，由其统一管理。</code><br><code>（3）遵循严格的单项数据流，一个组件所需要的数据，必须由父组件传过来，而不能像flux中直接从store取。</code><br><code>（4）状态在组件中是‘只读’的，要交给redux处理</code></p>\n<h2 id=\"redux概念\"><a href=\"#redux概念\" class=\"headerlink\" title=\"redux概念\"></a>redux概念</h2><p>有图有真相，先来一张redux数据流图，让你有一个整体的把握<br><img src=\"http://upload-images.jianshu.io/upload_images/1229960-9cae53256b3bba52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"redux flow\"></p>\n<h3 id=\"action\"><a href=\"#action\" class=\"headerlink\" title=\"action\"></a>action</h3><p>一般是不允许用户直接操作类的state，而是通过触发消息来执行对应的操作来产生一个新的state，用户或后台服务器可以通过store.dispatch(action)来向store发送一个消息（消息至少一个标识该消息的字段type，还可以添加其他字段用于数据传送），store会在内部根据消息的类型type去reducer中执行相应的处理，这个消息我们就叫他为Action，Action本质上是一个JavaScript对象。</p>\n<p>实际编码中一般会把整个应用的消息类型统一放在一个文件ActionTypes.js中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ADD_TODO = <span class=\"string\">'ADD_TODO'</span></div></pre></td></tr></table></figure>\n<p>Action的结构如下，各个字段的key的名字可以随意命名，但是类型的key一般都是type，数据类型最好为字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  type: ADD_TODO,</div><div class=\"line\">  text: <span class=\"string\">'Build my first Redux app'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>随着程序越来越大，你会发现一个组件中的action太多太乱了，所以我们也会把action按业务分类放在各个指定的文件中，但是又有一个问题，若果每个action的字段都有五六个，我们在如下写法岂不是太乱了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">store.dispatch(&#123;</div><div class=\"line\">  type: ADD_TODO,</div><div class=\"line\">  text: <span class=\"string\">'Build my first Redux app'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>于是乎我们就想起来可以将action对象封装在函数中，这个函数返回一个action对象，这个返回一个action对象的函数我们就称之为ActionCreator，如下所示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> todo = ()=&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t \ttype: ADD_TODO,</div><div class=\"line\">  \t\ttext: <span class=\"string\">'Build my first Redux app'</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们直接store.dispatch(todo)就好了，看着是不是整洁多了啊</p>\n<h3 id=\"reducer\"><a href=\"#reducer\" class=\"headerlink\" title=\"reducer\"></a>reducer</h3><p>它是一个纯函数，要求有相同的输入（参数）就一定会有相同的输出，它会根据当前的state和action来进行逻辑处理返回一个新的state<br>参数一：当前的state对象<br>参数二：action对象<br>返回值：产生一个新的state对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; VisibilityFilters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./actions'</span></div><div class=\"line\"><span class=\"comment\">//初始state</span></div><div class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</div><div class=\"line\">  visibilityFilter: VisibilityFilters.SHOW_ALL,</div><div class=\"line\">  todos: []</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">todoApp</span>(<span class=\"params\">state = initialState, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> SET_VISIBILITY_FILTER:</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, state, &#123;</div><div class=\"line\">        visibilityFilter: action.filter</div><div class=\"line\">      &#125;)</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">      <span class=\"keyword\">return</span> state</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>注意</strong>：reducer函数中一定不要去修改state，而是用Object.assign()函数生成一个新的state对象，如上所示</p>\n<p><strong>combineReducers</strong>：随着应用变得复杂，把APP的所有状态都放在一个reducer中处理会造成reducer函数非常庞大，因此需要对 reducer 函数 进行拆分，拆分后的每一个子reducer独立负责管理 APP state 的一部分。combineReducers 辅助函数的作用是，把多个不同子reducer 函数合并成一个最终的根reducer ，最后将根 reducer 作为createStore的参数就可以创建store对象了。合并后的 reducer 可以调用各个子 reducer，并把它们的结果合并成一个 state 对象。state 对象的结构由传入的多个 reducer 的 key 决定。</p>\n<p>最终，state 对象的结构会是这样的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  reducer1: ...</div><div class=\"line\">  reducer2: ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用方法如下所示</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; combineReducers &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Strolling <span class=\"keyword\">from</span> <span class=\"string\">'./strollingReducer'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Foods <span class=\"keyword\">from</span> <span class=\"string\">'./foodsReducer'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> FoodsList <span class=\"keyword\">from</span> <span class=\"string\">'./foodsListReducer'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> FoodCompare <span class=\"keyword\">from</span> <span class=\"string\">'./foodCompareReducer'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> FoodInfo <span class=\"keyword\">from</span> <span class=\"string\">'./foodInfoReducer'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Search <span class=\"keyword\">from</span> <span class=\"string\">'./searchReducer'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> User <span class=\"keyword\">from</span> <span class=\"string\">'./userReducer'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> rootReducer = combineReducers(&#123;</div><div class=\"line\">    Strolling,</div><div class=\"line\">    Foods,</div><div class=\"line\">    FoodsList,</div><div class=\"line\">    FoodCompare,</div><div class=\"line\">    FoodInfo,</div><div class=\"line\">    Search,</div><div class=\"line\">    User,</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// export default rootReducer = combineReducers(&#123;</span></div><div class=\"line\"><span class=\"comment\">//     Strolling:Strolling,</span></div><div class=\"line\"><span class=\"comment\">//     Foods:Foods,  </span></div><div class=\"line\"><span class=\"comment\">//     FoodsList:FoodsList,</span></div><div class=\"line\"><span class=\"comment\">//     FoodCompare:FoodCompare,</span></div><div class=\"line\"><span class=\"comment\">//     FoodInfo:FoodInfo,</span></div><div class=\"line\"><span class=\"comment\">//     Search:Search,</span></div><div class=\"line\"><span class=\"comment\">//     User:User,</span></div><div class=\"line\"><span class=\"comment\">// &#125;)</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// export default function rootReducer(state = &#123;&#125;,action)&#123;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//     return&#123;</span></div><div class=\"line\"><span class=\"comment\">//         Strolling: Strolling(state.Strolling,action),</span></div><div class=\"line\"><span class=\"comment\">//         Foods:Foods(state.Foods,action),</span></div><div class=\"line\"><span class=\"comment\">//         FoodsList:FoodsList(state.FoodsList,action),</span></div><div class=\"line\"><span class=\"comment\">//         FoodCompare:FoodCompare(state.FoodCompare,action),</span></div><div class=\"line\"><span class=\"comment\">//         FoodInfo:FoodInfo(state.FoodInfo,action),</span></div><div class=\"line\"><span class=\"comment\">//         Search:Search(state.Search,action),</span></div><div class=\"line\"><span class=\"comment\">//         User:User(state.User,action)</span></div><div class=\"line\"><span class=\"comment\">//     &#125;</span></div><div class=\"line\"><span class=\"comment\">// &#125;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//以上三种方式是等价的,key可以设置也可以省略</span></div></pre></td></tr></table></figure>\n<p><strong>注意：我们不一定非要用combineReducers来组合子reducer，我们可以自定义类似功能的方法来组合，state的结构完全由我们决定。</strong></p>\n<h3 id=\"store\"><a href=\"#store\" class=\"headerlink\" title=\"store\"></a>store</h3><p>一个应用只有一个store，store 就是用来维持应用所有的 state 树 的一个对象。 改变 store 内 state 的惟一途径是对它 dispatch 一个 action，它有三个函数</p>\n<ul>\n<li><strong>getState()</strong><br>  返回应用当前的 state 树。</li>\n<li><strong>dispatch(action)</strong><br>  分发 action。这是触发 state 变化的惟一途径。<br>  会使用当前 getState() 的结果和传入的 action 以同步方式的调用 store 的 reduce 函数。返回值会被作为下一个 state。从现在开始，这就成为了 getState() 的返回值，同时变化监听器(change listener)会被触发。</li>\n<li><p><strong>subscribe(listener)</strong><br>  当state树发生变化的时候store会调用subscribe函数，我们可以传一个我们订制的函数作为参数来进行处理<br>  参数：一个函数<br>  返回值：返回一个解绑定函数</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//添加监听</span></div><div class=\"line\"><span class=\"keyword\">let</span> unsubscribe = store.subscribe(handleChange)</div><div class=\"line\"><span class=\"comment\">//解除监听</span></div><div class=\"line\">unsubscribe()</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>replaceReducer(nextReducer)</strong><br> 替换 store 当前用来计算 state 的 reducer。<br> 这是一个高级 API。只有在你需要实现代码分隔，而且需要立即加载一些 reducer 的时候才可能会用到它。在实现 Redux 热加载机制的时候也可能会用到。</p>\n</li>\n</ul>\n<h2 id=\"react-redux基础\"><a href=\"#react-redux基础\" class=\"headerlink\" title=\"react-redux基础\"></a>react-redux基础</h2><p>前言已经提到过react-redux的由来，这里在啰嗦一下，react-redux是redux作者专门为react native订制的，这样使用起来更方便，我们只需在我们的组件中通过属性props获取dispatch方法，就可以直接向store发送一个action，而不需要再获取store对象，通过store对象的dispatch方法发送。<br>react-redux有两宝，<strong>provider</strong>和<strong>connect</strong>，下面详细介绍一下。</p>\n<h4 id=\"Provider：\"><a href=\"#Provider：\" class=\"headerlink\" title=\"Provider：\"></a>Provider：</h4><p>有一个store属性，我们要将应用的根标签放到Provider标签中，这样应用的所有标签就可以通过context来获取store对象了，但是我们一般不会通过此法来获取store对象，Provider是为了给connect函数使用的，这样才能通过connect函数的参数获取到store的state和dispatch了。</p>\n<h4 id=\"connect-mapStateToProps-mapDispatchToProps-mergeProps-options\"><a href=\"#connect-mapStateToProps-mapDispatchToProps-mergeProps-options\" class=\"headerlink\" title=\"connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\"></a>connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</h4><p>connect是一个高阶函数，<code>connect()</code>本身会返回一个函数变量（假如名字为func），给这个函数变量传递一个参数func(MainContainer)会生成一个MainContainer容器组件，形如下面的写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">export default connect((state) =&gt; &#123;</div><div class=\"line\">    const &#123; Main &#125; = state;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        Main</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)(MainContainer);</div></pre></td></tr></table></figure>\n<p>参数一：[mapStateToProps(state, [ownProps]): stateProps] (Function)</p>\n<blockquote>\n<p>如果定义该参数，组件将会监听 Redux store 的变化。任何时候，只要 Redux store 发生改变，mapStateToProps 函数就会被调用。该回调函数必须返回一个纯对象，这个对象会与组件的 props 合并。如果你省略了这个参数，你的组件将不会监听 Redux store。如果指定了该回调函数中的第二个参数 ownProps，则该参数的值为传递到组件的 props，而且只要组件接收到新的 props，mapStateToProps 也会被调用（例如，当 props 接收到来自父组件一个小小的改动，那么你所使用的 ownProps 参数，mapStateToProps 都会被重新计算）。</p>\n</blockquote>\n<p>参数二：[mapDispatchToProps(dispatch, [ownProps]): dispatchProps] (Object or Function):</p>\n<blockquote>\n<p>如果传递的是一个对象，那么每个定义在该对象的函数都将被当作 Redux action creator，而且这个对象会与 Redux store 绑定在一起，其中所定义的方法名将作为属性名，合并到组件的 props 中。如果传递的是一个函数，该函数将接收一个 dispatch 函数，然后由你来决定如何返回一个对象，这个对象通过 dispatch 函数与 action creator 以某种方式绑定在一起（提示：你也许会用到 Redux 的辅助函数 bindActionCreators()）。<code>如果你省略这个 mapDispatchToProps 参数，默认情况下，dispatch 会注入到你的组件 props 中。</code>如果指定了该回调函数中第二个参数 ownProps，该参数的值为传递到组件的 props，而且只要组件接收到新 props，mapDispatchToProps 也会被调用。</p>\n</blockquote>\n<p>参数三：[mergeProps(stateProps, dispatchProps, ownProps): props] (Function)</p>\n<blockquote>\n<p>如果指定了这个参数，mapStateToProps() 与 mapDispatchToProps() 的执行结果和组件自身的 props 将传入到这个回调函数中。该回调函数返回的对象将作为 props 传递到被包装的组件中。你也许可以用这个回调函数，根据组件的 props 来筛选部分的 state 数据，或者把 props 中的某个特定变量与 action creator 绑定在一起。如果你省略这个参数，默认情况下返回 Object.assign({}, ownProps, stateProps, dispatchProps) 的结果。<br>[options] (Object) 如果指定这个参数，可以定制 connector 的行为。</p>\n</blockquote>\n<p>参数四：[options] (Object) 如果指定这个参数，可以定制 connector 的行为。</p>\n<blockquote>\n<p>[pure = true] (Boolean): 如果为 true，connector 将执行 shouldComponentUpdate 并且浅对比 mergeProps 的结果，避免不必要的更新，前提是当前组件是一个“纯”组件，它不依赖于任何的输入或 state 而只依赖于 props 和 Redux store 的 state。默认值为 true。<br>[withRef = false] (Boolean): 如果为 true，connector 会保存一个对被包装组件实例的引用，该引用通过 getWrappedInstance() 方法获得。默认值为 false。</p>\n</blockquote>\n<h2 id=\"redux-redux使用\"><a href=\"#redux-redux使用\" class=\"headerlink\" title=\"redux-redux使用\"></a>redux-redux使用</h2><p>上面说了provider和connect方法，下面是实用讲解</p>\n<p>创建store对象的js文件</p>\n<p>下面的代码里包括应用中间件redux-thunk，和创建store对象两步，<a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html\">这里有更多关于中间件的详情</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; createStore, applyMiddleware &#125; from &apos;redux&apos;;</div><div class=\"line\">import thunk from &apos;redux-thunk&apos;;</div><div class=\"line\">import rootReducer from &apos;../reducers/rootRudcer&apos;;</div><div class=\"line\">//使用thunk中间件</div><div class=\"line\">let createStoreWithMiddleware = applyMiddleware(thunk)(createStore);</div><div class=\"line\">//创建store对象，一个APP只有一个store对象</div><div class=\"line\">let store = createStoreWithMiddleware(rootReducer);</div><div class=\"line\">export default store;</div></pre></td></tr></table></figure>\n<p>程序的入口文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; Provider &#125; from &apos;react-redux&apos;;</div><div class=\"line\">import store from &apos;./store/store&apos;;</div><div class=\"line\"></div><div class=\"line\">import App from &apos;./containers/app&apos;;</div><div class=\"line\"></div><div class=\"line\">export default class Root extends React.Component &#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return (</div><div class=\"line\">        \t//将APP的根视图组件包含在provider标签中</div><div class=\"line\">            &lt;Provider store = &#123;store&#125; &gt;</div><div class=\"line\">                &lt;App /&gt;</div><div class=\"line\">            &lt;/Provider&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在容器组件中，将redux和容器组件关联起来，这里是redux与组件关联的地方，大多数童鞋使用redux最迷惑的地方估计就在这一块了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123;connect&#125; from &apos;react-redux&apos;;</div><div class=\"line\">import Brand from &apos;../Components/Brand&apos;;</div><div class=\"line\"></div><div class=\"line\">//BrandContainer容器组件</div><div class=\"line\">class BrandContainer extends React.Component &#123;</div><div class=\"line\">    </div><div class=\"line\">    render() &#123;</div><div class=\"line\">        return (</div><div class=\"line\">        \t//把容器组件的属性传递给UI组件</div><div class=\"line\">            &lt;Brand &#123;...this.props&#125; /&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default connect((state) =&gt; &#123;</div><div class=\"line\">    const &#123; BrandReducer &#125; = state;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        BrandReducer</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)(BrandContainer);</div></pre></td></tr></table></figure>\n<p>这样UI组件Brand中就可以通过属性获取dispatch方法以及处理后的最新state了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">const &#123;dispatch, BrandReducer&#125; = this.props;</div></pre></td></tr></table></figure>\n<p>下面来解释一下上面的代码</p>\n<p>将当前的BrandContainer组件关联起来，上面介绍了store中的state对象的结构会是这样的：</p>\n<p>{<br/><br>  reducer1: …<br/><br>  reducer2: …<br/><br>}</p>\n<p>所以可以通过解构的方式，获取对应模块的state，如下面的const { BrandReducer } = state;</p>\n<p>下面这一块代码的作用就是将store中state传递给关联的容器组件中，当store中的state发生变化的时候，connect的第一参数mapStateToProps回调函数就会被调用，并且将该回调函数的返回值映射成其关联组件的一个属性，这样容器组件的属性就会发生变化，而UI组件又通过{…this.props}将容器组件的属性传递给了UI组件，所以UI组件的属性也会发生变化，我们知道属性的变化会导致UI组件重新render。好了，我们就能知道为什么我们在UI组件中dispatch一个action后UI组件能更新了，因为UI组件的属性发生变化导致RN重绘了UI。</p>\n<h2 id=\"react-native-组件的生命周期\"><a href=\"#react-native-组件的生命周期\" class=\"headerlink\" title=\"react native 组件的生命周期\"></a>react native 组件的生命周期</h2><h3 id=\"弄明白了这个图我认为你就能基本掌握RN了\"><a href=\"#弄明白了这个图我认为你就能基本掌握RN了\" class=\"headerlink\" title=\"弄明白了这个图我认为你就能基本掌握RN了\"></a>弄明白了这个图我认为你就能基本掌握RN了</h3><p><img src=\"http://7xqg0d.com1.z0.glb.clouddn.com/hexoBlog/react-native%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F.PNG\" alt=\"redux flow\"><br>注意：上图的最右边componentWillMount改成componentWillUnmount</p>\n<h3 id=\"项目的推荐目录\"><a href=\"#项目的推荐目录\" class=\"headerlink\" title=\"项目的推荐目录\"></a>项目的推荐目录</h3><p>这种结构适合业务逻辑不太复杂的中小型项目，其优点是逻辑模块清晰，缺点是文件目录跨度较大，对于大型项目建议按项目的功能模块来划分。<br><img src=\"http://upload-images.jianshu.io/upload_images/1229960-e38436556eda2e19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"项目的推荐目录\"></p>\n<h2 id=\"热更新\"><a href=\"#热更新\" class=\"headerlink\" title=\"热更新\"></a>热更新</h2><p>暂时不说了，苹果粑粑这两天不高兴了，凡是热更新的APP不能上架，已上线的APP也应该收到了一份批评邮件了。<br><img src=\"http://upload-images.jianshu.io/upload_images/1229960-24ed9d2bcfd08bde.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"你尽管hot patch吧\"></p>\n<h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><p><a href=\"http://www.tuicool.com/articles/MrmYN36\">React 实践心得：react-redux 之 connect 方法详解</a><br><a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html\">Redux 入门教程（一）：基本用法</a><br><a href=\"http://www.redux.org.cn/\">redux中文文档</a></p>\n<p><em>注：部分图片来源于互联网</em></p>\n<p><a href=\"https://slpowercoder.github.io/2016/12/30/一名iOSer对react-redux的理解/\">原文链接，转载请注明此链接</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjlmeouur0000v8tjdil13j8p","category_id":"cjlmeouuy0005v8tjmiz4zlod","_id":"cjlmeouv3000dv8tj9uttpruq"},{"post_id":"cjlmeouv00009v8tjahvnez4h","category_id":"cjlmeouuy0005v8tjmiz4zlod","_id":"cjlmeouv5000hv8tjakvevteb"},{"post_id":"cjlmeouv2000cv8tjsbh9368p","category_id":"cjlmeouuy0005v8tjmiz4zlod","_id":"cjlmeouv7000kv8tjzft7ygst"},{"post_id":"cjlmeouuv0002v8tjesoo9u4t","category_id":"cjlmeouv1000av8tjshp09bx9","_id":"cjlmeouv8000ov8tjffubx2nz"},{"post_id":"cjlmeouv3000ev8tj4aze4uf7","category_id":"cjlmeouuy0005v8tjmiz4zlod","_id":"cjlmeouv9000rv8tj7y8ujbq9"},{"post_id":"cjlmeouv6000jv8tj0ll0cczh","category_id":"cjlmeouuy0005v8tjmiz4zlod","_id":"cjlmeouva000vv8tjoo6esvzf"},{"post_id":"cjlmeouuy0006v8tjlvax12lv","category_id":"cjlmeouv1000av8tjshp09bx9","_id":"cjlmeouvb000xv8tjwrg3dius"},{"post_id":"cjlmeouv7000lv8tjpn0ybbn3","category_id":"cjlmeouuy0005v8tjmiz4zlod","_id":"cjlmeouvc0010v8tjzy7awkf5"},{"post_id":"cjlmeouv9000qv8tjk9it2q9o","category_id":"cjlmeouv1000av8tjshp09bx9","_id":"cjlmeouvd0012v8tjt7haou2y"},{"post_id":"cjlmeouuz0007v8tj9si1f3no","category_id":"cjlmeouv8000nv8tj8vftcdta","_id":"cjlmeouvd0014v8tjf2uvo8c3"},{"post_id":"cjlmeouva000sv8tjhbdzp1ln","category_id":"cjlmeouv1000av8tjshp09bx9","_id":"cjlmeouvd0017v8tj6r1br8xc"},{"post_id":"cjlmeouvb000wv8tj0z6yg4js","category_id":"cjlmeouuy0005v8tjmiz4zlod","_id":"cjlmeouvd0018v8tjdk2o9w4x"},{"post_id":"cjlmeouvb000yv8tj3yjs0vce","category_id":"cjlmeouv1000av8tjshp09bx9","_id":"cjlmeouve001av8tjciiwaiqi"},{"post_id":"cjlmeouzf001zv8tjnpk1yf4m","category_id":"cjlmeouuy0005v8tjmiz4zlod","_id":"cjlmeouzj0024v8tj51v76rsg"},{"post_id":"cjlmeouzh0021v8tj5bd6s5ju","category_id":"cjlmeouuy0005v8tjmiz4zlod","_id":"cjlmeouzk0025v8tjf0nmjvsf"},{"post_id":"cjlmeouzj0023v8tj9vnns6yx","category_id":"cjlmeouv1000av8tjshp09bx9","_id":"cjlmeouzl0028v8tjj067ynx1"}],"PostTag":[{"post_id":"cjlmeouur0000v8tjdil13j8p","tag_id":"cjlmeouuw0004v8tji3yxq9t8","_id":"cjlmeouv1000bv8tjvaln3wj9"},{"post_id":"cjlmeouuv0002v8tjesoo9u4t","tag_id":"cjlmeouv00008v8tjfgaayxop","_id":"cjlmeouv6000iv8tjt5qnqsx8"},{"post_id":"cjlmeouuy0006v8tjlvax12lv","tag_id":"cjlmeouv00008v8tjfgaayxop","_id":"cjlmeouv9000pv8tjl9at5bfg"},{"post_id":"cjlmeouv9000qv8tjk9it2q9o","tag_id":"cjlmeouv00008v8tjfgaayxop","_id":"cjlmeouva000uv8tjmzx50kzq"},{"post_id":"cjlmeouuz0007v8tj9si1f3no","tag_id":"cjlmeouv8000mv8tj8mmeihx2","_id":"cjlmeouvc0011v8tjl3akr9or"},{"post_id":"cjlmeouuz0007v8tj9si1f3no","tag_id":"cjlmeouva000tv8tj925fsimp","_id":"cjlmeouvd0013v8tjjcir91l1"},{"post_id":"cjlmeouvb000yv8tj3yjs0vce","tag_id":"cjlmeouv00008v8tjfgaayxop","_id":"cjlmeouvd0016v8tjvpt84k65"},{"post_id":"cjlmeouv00009v8tjahvnez4h","tag_id":"cjlmeouvc000zv8tjo4gyetcy","_id":"cjlmeouve001bv8tj13uemgsk"},{"post_id":"cjlmeouv00009v8tjahvnez4h","tag_id":"cjlmeouvd0015v8tjq8234sa0","_id":"cjlmeouve001cv8tjnrdhjq1z"},{"post_id":"cjlmeouv2000cv8tjsbh9368p","tag_id":"cjlmeouvd0019v8tjh86shrkr","_id":"cjlmeouve001fv8tjsb7wxzdn"},{"post_id":"cjlmeouv2000cv8tjsbh9368p","tag_id":"cjlmeouve001dv8tjhpges0ag","_id":"cjlmeouve001gv8tjq5ni2ey8"},{"post_id":"cjlmeouv3000ev8tj4aze4uf7","tag_id":"cjlmeouve001ev8tj8ax1i922","_id":"cjlmeouvf001lv8tjq8f336x9"},{"post_id":"cjlmeouv3000ev8tj4aze4uf7","tag_id":"cjlmeouvf001hv8tj0z0iwt87","_id":"cjlmeouvf001mv8tjxjf6bdsc"},{"post_id":"cjlmeouv3000ev8tj4aze4uf7","tag_id":"cjlmeouvf001iv8tjpkb30fjf","_id":"cjlmeouvg001ov8tjpxg49xzn"},{"post_id":"cjlmeouv3000ev8tj4aze4uf7","tag_id":"cjlmeouvf001jv8tj8yfuree5","_id":"cjlmeouvg001pv8tjyp2e5hu3"},{"post_id":"cjlmeouv6000jv8tj0ll0cczh","tag_id":"cjlmeouvf001kv8tjzozt7b4b","_id":"cjlmeouvg001rv8tjjthbhmgj"},{"post_id":"cjlmeouv7000lv8tjpn0ybbn3","tag_id":"cjlmeouvg001nv8tj7llrlfuo","_id":"cjlmeouvg001sv8tj3tkkw2hw"},{"post_id":"cjlmeouva000sv8tjhbdzp1ln","tag_id":"cjlmeouvg001qv8tj4ajxywjd","_id":"cjlmeouvh001uv8tjfh3r9qx6"},{"post_id":"cjlmeouva000sv8tjhbdzp1ln","tag_id":"cjlmeouv00008v8tjfgaayxop","_id":"cjlmeouvh001vv8tjapojp00e"},{"post_id":"cjlmeouvb000wv8tj0z6yg4js","tag_id":"cjlmeouvf001kv8tjzozt7b4b","_id":"cjlmeouvh001xv8tjbbirmlsm"},{"post_id":"cjlmeouvb000wv8tj0z6yg4js","tag_id":"cjlmeouvh001wv8tj0dc8oz5w","_id":"cjlmeouvh001yv8tjm0lt4o62"},{"post_id":"cjlmeouzf001zv8tjnpk1yf4m","tag_id":"cjlmeouzi0022v8tjazemmygx","_id":"cjlmeouzk0027v8tjglklhwxi"},{"post_id":"cjlmeouzh0021v8tj5bd6s5ju","tag_id":"cjlmeouzk0026v8tjjudcgfd0","_id":"cjlmeouzl002av8tj2yds9p9d"},{"post_id":"cjlmeouzj0023v8tj9vnns6yx","tag_id":"cjlmeouzl0029v8tjri87u614","_id":"cjlmeouzm002cv8tj43dkzoec"},{"post_id":"cjlmeouzj0023v8tj9vnns6yx","tag_id":"cjlmeouzm002bv8tjr3xspvx1","_id":"cjlmeouzm002dv8tjcojqj182"},{"post_id":"cjlmeouzj0023v8tj9vnns6yx","tag_id":"cjlmeouv00008v8tjfgaayxop","_id":"cjlmeouzn002ev8tjwb1wfupq"}],"Tag":[{"name":"消息转发","_id":"cjlmeouuw0004v8tji3yxq9t8"},{"name":"react-native","_id":"cjlmeouv00008v8tjfgaayxop"},{"name":"hexo","_id":"cjlmeouv8000mv8tj8mmeihx2"},{"name":"博客","_id":"cjlmeouva000tv8tj925fsimp"},{"name":"深拷贝","_id":"cjlmeouvc000zv8tjo4gyetcy"},{"name":"浅拷贝","_id":"cjlmeouvd0015v8tjq8234sa0"},{"name":"runtime","_id":"cjlmeouvd0019v8tjh86shrkr"},{"name":"category","_id":"cjlmeouve001dv8tjhpges0ag"},{"name":"assign","_id":"cjlmeouve001ev8tj8ax1i922"},{"name":"weak","_id":"cjlmeouvf001hv8tj0z0iwt87"},{"name":"retain","_id":"cjlmeouvf001iv8tjpkb30fjf"},{"name":"strong","_id":"cjlmeouvf001jv8tj8yfuree5"},{"name":"iOS","_id":"cjlmeouvf001kv8tjzozt7b4b"},{"name":"audio","_id":"cjlmeouvg001nv8tj7llrlfuo"},{"name":"通信","_id":"cjlmeouvg001qv8tj4ajxywjd"},{"name":"面试","_id":"cjlmeouvh001wv8tj0dc8oz5w"},{"name":"block","_id":"cjlmeouzi0022v8tjazemmygx"},{"name":"masonry","_id":"cjlmeouzk0026v8tjjudcgfd0"},{"name":"redux","_id":"cjlmeouzl0029v8tjri87u614"},{"name":"react-redux","_id":"cjlmeouzm002bv8tjr3xspvx1"}]}}